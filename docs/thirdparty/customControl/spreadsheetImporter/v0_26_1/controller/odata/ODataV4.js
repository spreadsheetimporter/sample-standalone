"use strict";sap.ui.define(["./OData","../Util","sap/base/Log","./MetadataHandlerV4"],function(t,e,n,o){"use strict";function a(t){return t&&t.__esModule&&typeof t.default!=="undefined"?t.default:t}const s=a(t);const i=a(e);const r=a(o);const d=s.extend("cc.spreadsheetimporter.v0_26_1.ODataV4",{constructor:function t(e,n){s.prototype.constructor.call(this,e,n);this.createPromises=[];this.createContexts=[];this.updateGroupId=i.getRandomString(10);this.metadataHandler=new r(n)},create:function t(e,n,o){const a=this.customBinding.create(o,true);return{context:a,promise:a.created()}},createAsync:function t(e,n,o){const a=this.create(e,this.customBinding,o);this.createContexts.push(a.context);this.createPromises.push(a.promise)},submitChanges:async function t(e){return e.submitBatch(this.updateGroupId)},waitForCreation:async function t(){await Promise.all(this.createPromises)},checkForErrors:async function t(e,n,o){if(this.customBinding.hasPendingChanges()){this.createContexts.forEach(async t=>{await t.delete(this.updateGroupId)});if(o){this.odataMessageHandler.displayMessages()}return true}return false},createCustomBinding:function t(e){if(this.spreadsheetUploadController.component.getOdataType()){const t=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()["$EntityContainer"];const e=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()[t];const n=this.spreadsheetUploadController.component.getOdataType();const o=this._findAttributeByType(e,n);this.customBinding=this.spreadsheetUploadController.view.getModel().bindList("/"+o,null,[],[],{$$updateGroupId:this.updateGroupId})}else{let t=e.getPath();if(e.getResolvedPath){t=e.getResolvedPath()}else{t=e.getModel().resolve(e.getPath(),e.getContext())}this.customBinding=e.getModel().bindList(t,null,[],[],{$$updateGroupId:this.updateGroupId})}},waitForDraft:async function t(){const e=[];for(let t=0;t<this.createContexts.length;t++){const n=this.createContexts[t];const o=this._getActionName(n,"ActivationAction");if(o){const t=n.getModel().bindContext(`${o}(...)`,n,{$$inheritExpandSelect:true});e.push(t.execute("$auto",false,null,true))}}return Promise.all(e)},getView:function t(e){return e._view||e.oView||e.getView()},getOdataType:function t(e,o,a){const s=e.getPath();const i=o.getModel().getMetaModel();const r=o.getModel().getMetaModel().getData();if(!a){try{const t=i.getObject(s);return t["$Type"]}catch(t){n.debug("Error while getting OData Type for List Report",t,"SpreadsheetUpload: ODataV4")}if(!a){for(const[t,e]of Object.entries(r)){if(e["$kind"]==="EntityType"&&e[s]){return e[s]["$Type"]}}}if(!a){n.error("Error while getting OData Type. Please specify 'odataType' in options",undefined,"SpreadsheetUpload: ODataV4")}}else{const t=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()["$EntityContainer"];const e=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()[t];const o=this._findAttributeByType(e,a);if(!o){const t=Object.keys(e).filter(t=>t!=="$kind").join();n.error(`Error while getting specified OData Type. ${t}`,undefined,"SpreadsheetUpload: ODataV4");throw new Error(`Error while getting specified OData Type. Available Entities: ${t}`)}return a}},getLabelList:async function t(e,n){return this.getMetadataHandler().getLabelList(e,n)},getKeyList:async function t(e,n){return this.getMetadataHandler().getKeyList(e)},resetContexts:function t(){this.createContexts=[];this.createPromises=[]},getMetadataHandler:function t(){return this.metadataHandler},_findAttributeByType:function t(e,n){for(const t in e){if(e.hasOwnProperty(t)){const o=e[t];if(o.$Type===n){return t}}}return undefined}});return d});
//# sourceMappingURL=ODataV4.js.map