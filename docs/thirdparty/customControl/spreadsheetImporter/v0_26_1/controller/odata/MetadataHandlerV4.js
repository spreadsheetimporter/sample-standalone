"use strict";sap.ui.define(["sap/base/Log","./MetadataHandler"],function(e,t){"use strict";function a(e){return e&&e.__esModule&&typeof e.default!=="undefined"?e.default:e}const o=a(t);const n=o.extend("cc.spreadsheetimporter.v0_26_1.MetadataHandlerV4",{constructor:function e(t){o.prototype.constructor.call(this,t)},getLabelList:function t(a,o){let n=new Map;let s;var l=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()["$Annotations"];const r=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()[o];e.debug("SpreadsheetUpload: Annotations",undefined,"SpreadsheetUpload: MetadataHandler",()=>this.spreadsheetUploadController.component.logger.returnObject(this.spreadsheetUploadController.context.getModel().getMetaModel().getData()));try{s=l[o]["@com.sap.vocabularies.UI.v1.Facets"][0].Label}catch(t){e.debug(`SpreadsheetUpload: Facet Label not found`,undefined,"SpreadsheetUpload: MetadataHandler")}if(!this.spreadsheetUploadController.component.getSpreadsheetFileName()&&s){this.spreadsheetUploadController.component.setSpreadsheetFileName(`${s}.xlsx`)}else if(!this.spreadsheetUploadController.component.getSpreadsheetFileName()&&!s){this.spreadsheetUploadController.component.setSpreadsheetFileName(`Template.xlsx`)}if(a.length>0){for(const t of a){const a=r[t];if(a){const e=l[`${o}/${t}`];let s={};s.label=this.getLabel(l,r,t,e,o);if(!s.label){s.label=t}s.type=a.$Type;s.maxLength=a.$MaxLength;n.set(t,s)}else{e.warning(`SpreadsheetUpload: Property ${t} not found`,undefined,"SpreadsheetUpload: MetadataHandler")}}}else{const e=[];for(const t in r){const a=r[t];if(a["$kind"]==="Property"){e.push([t,a])}}for(const[t,a]of e){const e=l[`${o}/${t}`];if(!e["@com.sap.vocabularies.UI.v1.Hidden"]&&!t.startsWith("SAP__")){let s={};s.label=this.getLabel(l,r,t,e,o);if(!s.label){s.label=t}s.type=a.$Type;s.maxLength=a.$MaxLength;n.set(t,s)}}}return n},getLabel:function t(a,o,n,s,l){let r="";if(s&&s["@com.sap.vocabularies.Common.v1.Label"]){r=s["@com.sap.vocabularies.Common.v1.Label"]}if(r===""){try{const e=a[l]["@com.sap.vocabularies.UI.v1.LineItem"];r=e.find(e=>e.Value.$Path===n).Label}catch(t){e.debug(`v: ${n} not found as a LineItem Label`,undefined,"SpreadsheetUpload: MetadataHandlerV4")}}if(r.startsWith("{")&&r.endsWith("}")){try{r=this.parseI18nText(r,this.spreadsheetUploadController.view)}catch(t){e.debug(`SpreadsheetUpload: ${r} not found as a Resource Bundle and i18n text`,undefined,"SpreadsheetUpload: MetadataHandlerV4")}}if(r===""){r=n}return r},getKeyList:function e(t){let a=[];if(this.spreadsheetUploadController.component.getSkipMandatoryFieldCheck()){return a}var o=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()["$Annotations"];const n=this.spreadsheetUploadController.context.getModel().getMetaModel().getData()[t];const s=o[t]["@com.sap.vocabularies.Common.v1.Messages"];const l=Object.entries(n).filter(e=>{let[t,a]=e;return a["$kind"]==="Property"});for(const[e,n]of l){const n=o[`${t}/${e}`];if(!n){continue}if(e===s?.$Path||e.startsWith("SAP__")){continue}if(!this.spreadsheetUploadController.component.getSkipMandatoryFieldCheck()&&n["@com.sap.vocabularies.Common.v1.FieldControl"]&&n["@com.sap.vocabularies.Common.v1.FieldControl"]["$EnumMember"]&&n["@com.sap.vocabularies.Common.v1.FieldControl"]["$EnumMember"]==="com.sap.vocabularies.Common.v1.FieldControlType/Mandatory"){a.push(e)}}return a}});return n});
//# sourceMappingURL=MetadataHandlerV4.js.map