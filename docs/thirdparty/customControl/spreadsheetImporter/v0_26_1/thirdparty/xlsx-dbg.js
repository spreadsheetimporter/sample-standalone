sap.ui.define((function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var xlsx = {exports: {}};

	var cpexcel = {exports: {}};

	/*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */

	var hasRequiredCpexcel;

	function requireCpexcel () {
		if (hasRequiredCpexcel) return cpexcel.exports;
		hasRequiredCpexcel = 1;
		(function (module) {
			/*jshint -W100 */
			var cptable = {version:"1.15.0"};
			cptable[437] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[620] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàąçêëèïîćÄĄĘęłôöĆûùŚÖÜ¢Ł¥śƒŹŻóÓńŃźż¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[737] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[850] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[852] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[857] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[861] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[865] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[866] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[874] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[895] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ČüéďäĎŤčěĚĹÍľǪÄÁÉžŽôöÓůÚýÖÜŠĽÝŘťáíóúňŇŮÔšřŕŔ¼§«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[932] = (function(){ var d = [], e = {}, D = [], j;
			D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ��������������������������������".split("");
			for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
			D[129] = "����������������������������������������������������������������　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈〉《》「」『』【】＋－±×�÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓�����������∈∋⊆⊇⊂⊃∪∩��������∧∨￢⇒⇔∀∃�����������∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬�������Å‰♯♭♪†‡¶����◯���".split("");
			for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
			D[130] = "�������������������������������������������������������������������������������０１２３４５６７８９�������ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ�������ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ����ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん��������������".split("");
			for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
			D[131] = "����������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミ�ムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ��������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�����������������������������������������".split("");
			for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
			D[132] = "����������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмн�опрстуфхцчшщъыьэюя�������������─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂�����������������������������������������������������������������".split("");
			for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
			D[135] = "����������������������������������������������������������������①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡��������㍻�〝〟№㏍℡㊤㊥㊦㊧㊨㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪���������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
			D[136] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭���".split("");
			for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
			D[137] = "����������������������������������������������������������������院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円�園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改���".split("");
			for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
			D[138] = "����������������������������������������������������������������魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫�橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄���".split("");
			for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
			D[139] = "����������������������������������������������������������������機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救�朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈���".split("");
			for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
			D[140] = "����������������������������������������������������������������掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨�劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向���".split("");
			for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
			D[141] = "����������������������������������������������������������������后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降�項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷���".split("");
			for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
			D[142] = "����������������������������������������������������������������察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止�死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周���".split("");
			for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
			D[143] = "����������������������������������������������������������������宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳�準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾���".split("");
			for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
			D[144] = "����������������������������������������������������������������拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨�逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線���".split("");
			for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
			D[145] = "����������������������������������������������������������������繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻�操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只���".split("");
			for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
			D[146] = "����������������������������������������������������������������叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄�逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓���".split("");
			for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
			D[147] = "����������������������������������������������������������������邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬�凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入���".split("");
			for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
			D[148] = "����������������������������������������������������������������如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅�楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美���".split("");
			for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
			D[149] = "����������������������������������������������������������������鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷�斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋���".split("");
			for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
			D[150] = "����������������������������������������������������������������法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆�摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒���".split("");
			for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
			D[151] = "����������������������������������������������������������������諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲�沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯���".split("");
			for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
			D[152] = "����������������������������������������������������������������蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕��������������������������������������������弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲���".split("");
			for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
			D[153] = "����������������������������������������������������������������僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭�凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨���".split("");
			for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
			D[154] = "����������������������������������������������������������������咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸�噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩���".split("");
			for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
			D[155] = "����������������������������������������������������������������奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀�它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏���".split("");
			for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
			D[156] = "����������������������������������������������������������������廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠�怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛���".split("");
			for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
			D[157] = "����������������������������������������������������������������戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫�捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼���".split("");
			for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
			D[158] = "����������������������������������������������������������������曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎�梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣���".split("");
			for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
			D[159] = "����������������������������������������������������������������檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯�麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌���".split("");
			for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
			D[224] = "����������������������������������������������������������������漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝�烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱���".split("");
			for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
			D[225] = "����������������������������������������������������������������瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿�痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬���".split("");
			for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
			D[226] = "����������������������������������������������������������������磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰�窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆���".split("");
			for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
			D[227] = "����������������������������������������������������������������紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷�縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋���".split("");
			for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
			D[228] = "����������������������������������������������������������������隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤�艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈���".split("");
			for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
			D[229] = "����������������������������������������������������������������蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬�蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞���".split("");
			for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
			D[230] = "����������������������������������������������������������������襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧�諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊���".split("");
			for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
			D[231] = "����������������������������������������������������������������蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜�轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮���".split("");
			for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
			D[232] = "����������������������������������������������������������������錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙�閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰���".split("");
			for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
			D[233] = "����������������������������������������������������������������顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃�騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈���".split("");
			for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
			D[234] = "����������������������������������������������������������������鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯�黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙�������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
			D[237] = "����������������������������������������������������������������纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏�塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱���".split("");
			for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
			D[238] = "����������������������������������������������������������������犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙�蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑��ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ￢￤＇＂���".split("");
			for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
			D[250] = "����������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊�兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯���".split("");
			for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
			D[251] = "����������������������������������������������������������������涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神�祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙���".split("");
			for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
			D[252] = "����������������������������������������������������������������髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
			return {"enc": e, "dec": d }; })();
			cptable[936] = (function(){ var d = [], e = {}, D = [], j;
			D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�������������������������������������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
			D[129] = "����������������������������������������������������������������丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪乫乬乭乮乯乲乴乵乶乷乸乹乺乻乼乽乿亀亁亂亃亄亅亇亊�亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂伃伄伅伆伇伈伋伌伒伓伔伕伖伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾伿佀佁佂佄佅佇佈佉佊佋佌佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢�".split("");
			for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
			D[130] = "����������������������������������������������������������������侤侫侭侰侱侲侳侴侶侷侸侹侺侻侼侽侾俀俁係俆俇俈俉俋俌俍俒俓俔俕俖俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿倀倁倂倃倄倅倆倇倈倉倊�個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯倰倱倲倳倴倵倶倷倸倹倻倽倿偀偁偂偄偅偆偉偊偋偍偐偑偒偓偔偖偗偘偙偛偝偞偟偠偡偢偣偤偦偧偨偩偪偫偭偮偯偰偱偲偳側偵偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎傏傐傑傒傓傔傕傖傗傘備傚傛傜傝傞傟傠傡傢傤傦傪傫傭傮傯傰傱傳傴債傶傷傸傹傼�".split("");
			for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
			D[131] = "����������������������������������������������������������������傽傾傿僀僁僂僃僄僅僆僇僈僉僊僋僌働僎僐僑僒僓僔僕僗僘僙僛僜僝僞僟僠僡僢僣僤僥僨僩僪僫僯僰僱僲僴僶僷僸價僺僼僽僾僿儀儁儂儃億儅儈�儉儊儌儍儎儏儐儑儓儔儕儖儗儘儙儚儛儜儝儞償儠儢儣儤儥儦儧儨儩優儫儬儭儮儯儰儱儲儳儴儵儶儷儸儹儺儻儼儽儾兂兇兊兌兎兏児兒兓兗兘兙兛兝兞兟兠兡兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦冧冨冩冪冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒凓凔凕凖凗�".split("");
			for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
			D[132] = "����������������������������������������������������������������凘凙凚凜凞凟凢凣凥処凧凨凩凪凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄剅剆則剈剉剋剎剏剒剓剕剗剘�剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳剴創剶剷剸剹剺剻剼剾劀劃劄劅劆劇劉劊劋劌劍劎劏劑劒劔劕劖劗劘劙劚劜劤劥劦劧劮劯劰労劵劶劷劸効劺劻劼劽勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務勚勛勜勝勞勠勡勢勣勥勦勧勨勩勪勫勬勭勮勯勱勲勳勴勵勶勷勸勻勼勽匁匂匃匄匇匉匊匋匌匎�".split("");
			for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
			D[133] = "����������������������������������������������������������������匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯匰匱匲匳匴匵匶匷匸匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏�厐厑厒厓厔厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯厰厱厲厳厴厵厷厸厹厺厼厽厾叀參叄叅叆叇収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝呞呟呠呡呣呥呧呩呪呫呬呭呮呯呰呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡�".split("");
			for(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}
			D[134] = "����������������������������������������������������������������咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠員哢哣哤哫哬哯哰哱哴哵哶哷哸哹哻哾唀唂唃唄唅唈唊唋唌唍唎唒唓唕唖唗唘唙唚唜唝唞唟唡唥唦�唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋啌啍啎問啑啒啓啔啗啘啙啚啛啝啞啟啠啢啣啨啩啫啯啰啱啲啳啴啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠喡喢喣喤喥喦喨喩喪喫喬喭單喯喰喲喴営喸喺喼喿嗀嗁嗂嗃嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗嗘嗙嗚嗛嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸嗹嗺嗻嗼嗿嘂嘃嘄嘅�".split("");
			for(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}
			D[135] = "����������������������������������������������������������������嘆嘇嘊嘋嘍嘐嘑嘒嘓嘔嘕嘖嘗嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀噁噂噃噄噅噆噇噈噉噊噋噏噐噑噒噓噕噖噚噛噝噞噟噠噡�噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽噾噿嚀嚁嚂嚃嚄嚇嚈嚉嚊嚋嚌嚍嚐嚑嚒嚔嚕嚖嚗嚘嚙嚚嚛嚜嚝嚞嚟嚠嚡嚢嚤嚥嚦嚧嚨嚩嚪嚫嚬嚭嚮嚰嚱嚲嚳嚴嚵嚶嚸嚹嚺嚻嚽嚾嚿囀囁囂囃囄囅囆囇囈囉囋囌囍囎囏囐囑囒囓囕囖囘囙囜団囥囦囧囨囩囪囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國圌圍圎圏圐圑�".split("");
			for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
			D[136] = "����������������������������������������������������������������園圓圔圕圖圗團圙圚圛圝圞圠圡圢圤圥圦圧圫圱圲圴圵圶圷圸圼圽圿坁坃坄坅坆坈坉坋坒坓坔坕坖坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀�垁垇垈垉垊垍垎垏垐垑垔垕垖垗垘垙垚垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹垺垻垼垽垾垿埀埁埄埅埆埇埈埉埊埌埍埐埑埓埖埗埛埜埞埡埢埣埥埦埧埨埩埪埫埬埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥堦堧堨堩堫堬堭堮堯報堲堳場堶堷堸堹堺堻堼堽�".split("");
			for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
			D[137] = "����������������������������������������������������������������堾堿塀塁塂塃塅塆塇塈塉塊塋塎塏塐塒塓塕塖塗塙塚塛塜塝塟塠塡塢塣塤塦塧塨塩塪塭塮塯塰塱塲塳塴塵塶塷塸塹塺塻塼塽塿墂墄墆墇墈墊墋墌�墍墎墏墐墑墔墕墖増墘墛墜墝墠墡墢墣墤墥墦墧墪墫墬墭墮墯墰墱墲墳墴墵墶墷墸墹墺墻墽墾墿壀壂壃壄壆壇壈壉壊壋壌壍壎壏壐壒壓壔壖壗壘壙壚壛壜壝壞壟壠壡壢壣壥壦壧壨壩壪壭壯壱売壴壵壷壸壺壻壼壽壾壿夀夁夃夅夆夈変夊夋夌夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻�".split("");
			for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
			D[138] = "����������������������������������������������������������������夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛奜奝奞奟奡奣奤奦奧奨奩奪奫奬奭奮奯奰奱奲奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦�妧妬妭妰妱妳妴妵妶妷妸妺妼妽妿姀姁姂姃姄姅姇姈姉姌姍姎姏姕姖姙姛姞姟姠姡姢姤姦姧姩姪姫姭姮姯姰姱姲姳姴姵姶姷姸姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪娫娬娭娮娯娰娳娵娷娸娹娺娻娽娾娿婁婂婃婄婅婇婈婋婌婍婎婏婐婑婒婓婔婖婗婘婙婛婜婝婞婟婠�".split("");
			for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
			D[139] = "����������������������������������������������������������������婡婣婤婥婦婨婩婫婬婭婮婯婰婱婲婳婸婹婻婼婽婾媀媁媂媃媄媅媆媇媈媉媊媋媌媍媎媏媐媑媓媔媕媖媗媘媙媜媝媞媟媠媡媢媣媤媥媦媧媨媩媫媬�媭媮媯媰媱媴媶媷媹媺媻媼媽媿嫀嫃嫄嫅嫆嫇嫈嫊嫋嫍嫎嫏嫐嫑嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬嫭嫮嫯嫰嫲嫳嫴嫵嫶嫷嫸嫹嫺嫻嫼嫽嫾嫿嬀嬁嬂嬃嬄嬅嬆嬇嬈嬊嬋嬌嬍嬎嬏嬐嬑嬒嬓嬔嬕嬘嬙嬚嬛嬜嬝嬞嬟嬠嬡嬢嬣嬤嬥嬦嬧嬨嬩嬪嬫嬬嬭嬮嬯嬰嬱嬳嬵嬶嬸嬹嬺嬻嬼嬽嬾嬿孁孂孃孄孅孆孇�".split("");
			for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
			D[140] = "����������������������������������������������������������������孈孉孊孋孌孍孎孏孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏�寑寔寕寖寗寘寙寚寛寜寠寢寣實寧審寪寫寬寭寯寱寲寳寴寵寶寷寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧屨屩屪屫屬屭屰屲屳屴屵屶屷屸屻屼屽屾岀岃岄岅岆岇岉岊岋岎岏岒岓岕岝岞岟岠岡岤岥岦岧岨�".split("");
			for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
			D[141] = "����������������������������������������������������������������岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅峆峇峈峉峊峌峍峎峏峐峑峓峔峕峖峗峘峚峛峜峝峞峟峠峢峣峧峩峫峬峮峯峱峲峳峴峵島峷峸峹峺峼峽峾峿崀�崁崄崅崈崉崊崋崌崍崏崐崑崒崓崕崗崘崙崚崜崝崟崠崡崢崣崥崨崪崫崬崯崰崱崲崳崵崶崷崸崹崺崻崼崿嵀嵁嵂嵃嵄嵅嵆嵈嵉嵍嵎嵏嵐嵑嵒嵓嵔嵕嵖嵗嵙嵚嵜嵞嵟嵠嵡嵢嵣嵤嵥嵦嵧嵨嵪嵭嵮嵰嵱嵲嵳嵵嵶嵷嵸嵹嵺嵻嵼嵽嵾嵿嶀嶁嶃嶄嶅嶆嶇嶈嶉嶊嶋嶌嶍嶎嶏嶐嶑嶒嶓嶔嶕嶖嶗嶘嶚嶛嶜嶞嶟嶠�".split("");
			for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
			D[142] = "����������������������������������������������������������������嶡嶢嶣嶤嶥嶦嶧嶨嶩嶪嶫嶬嶭嶮嶯嶰嶱嶲嶳嶴嶵嶶嶸嶹嶺嶻嶼嶽嶾嶿巀巁巂巃巄巆巇巈巉巊巋巌巎巏巐巑巒巓巔巕巖巗巘巙巚巜巟巠巣巤巪巬巭�巰巵巶巸巹巺巻巼巿帀帄帇帉帊帋帍帎帒帓帗帞帟帠帡帢帣帤帥帨帩帪師帬帯帰帲帳帴帵帶帹帺帾帿幀幁幃幆幇幈幉幊幋幍幎幏幐幑幒幓幖幗幘幙幚幜幝幟幠幣幤幥幦幧幨幩幪幫幬幭幮幯幰幱幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨庩庪庫庬庮庯庰庱庲庴庺庻庼庽庿廀廁廂廃廄廅�".split("");
			for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
			D[143] = "����������������������������������������������������������������廆廇廈廋廌廍廎廏廐廔廕廗廘廙廚廜廝廞廟廠廡廢廣廤廥廦廧廩廫廬廭廮廯廰廱廲廳廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤�弨弫弬弮弰弲弳弴張弶強弸弻弽弾弿彁彂彃彄彅彆彇彈彉彊彋彌彍彎彏彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢徣徤徥徦徧復徫徬徯徰徱徲徳徴徶徸徹徺徻徾徿忀忁忂忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇�".split("");
			for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
			D[144] = "����������������������������������������������������������������怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰怱怲怳怴怶怷怸怹怺怽怾恀恄恅恆恇恈恉恊恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀�悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽悾悿惀惁惂惃惄惇惈惉惌惍惎惏惐惒惓惔惖惗惙惛惞惡惢惣惤惥惪惱惲惵惷惸惻惼惽惾惿愂愃愄愅愇愊愋愌愐愑愒愓愔愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬愭愮愯愰愱愲愳愴愵愶愷愸愹愺愻愼愽愾慀慁慂慃慄慅慆�".split("");
			for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
			D[145] = "����������������������������������������������������������������慇慉態慍慏慐慒慓慔慖慗慘慙慚慛慜慞慟慠慡慣慤慥慦慩慪慫慬慭慮慯慱慲慳慴慶慸慹慺慻慼慽慾慿憀憁憂憃憄憅憆憇憈憉憊憌憍憏憐憑憒憓憕�憖憗憘憙憚憛憜憞憟憠憡憢憣憤憥憦憪憫憭憮憯憰憱憲憳憴憵憶憸憹憺憻憼憽憿懀懁懃懄懅懆懇應懌懍懎懏懐懓懕懖懗懘懙懚懛懜懝懞懟懠懡懢懣懤懥懧懨懩懪懫懬懭懮懯懰懱懲懳懴懶懷懸懹懺懻懼懽懾戀戁戂戃戄戅戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸戹戺戻戼扂扄扅扆扊�".split("");
			for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
			D[146] = "����������������������������������������������������������������扏扐払扖扗扙扚扜扝扞扟扠扡扢扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋抌抍抎抏抐抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁�拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳挴挵挶挷挸挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖捗捘捙捚捛捜捝捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙掚掛掜掝掞掟採掤掦掫掯掱掲掵掶掹掻掽掿揀�".split("");
			for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
			D[147] = "����������������������������������������������������������������揁揂揃揅揇揈揊揋揌揑揓揔揕揗揘揙揚換揜揝揟揢揤揥揦揧揨揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆搇搈搉搊損搎搑搒搕搖搗搘搙搚搝搟搢搣搤�搥搧搨搩搫搮搯搰搱搲搳搵搶搷搸搹搻搼搾摀摂摃摉摋摌摍摎摏摐摑摓摕摖摗摙摚摛摜摝摟摠摡摢摣摤摥摦摨摪摫摬摮摯摰摱摲摳摴摵摶摷摻摼摽摾摿撀撁撃撆撈撉撊撋撌撍撎撏撐撓撔撗撘撚撛撜撝撟撠撡撢撣撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆擇擈擉擊擋擌擏擑擓擔擕擖擙據�".split("");
			for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
			D[148] = "����������������������������������������������������������������擛擜擝擟擠擡擣擥擧擨擩擪擫擬擭擮擯擰擱擲擳擴擵擶擷擸擹擺擻擼擽擾擿攁攂攃攄攅攆攇攈攊攋攌攍攎攏攐攑攓攔攕攖攗攙攚攛攜攝攞攟攠攡�攢攣攤攦攧攨攩攪攬攭攰攱攲攳攷攺攼攽敀敁敂敃敄敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數敹敺敻敼敽敾敿斀斁斂斃斄斅斆斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱斲斳斴斵斶斷斸斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘旙旚旛旜旝旞旟旡旣旤旪旫�".split("");
			for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
			D[149] = "����������������������������������������������������������������旲旳旴旵旸旹旻旼旽旾旿昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷昸昹昺昻昽昿晀時晄晅晆晇晈晉晊晍晎晐晑晘�晙晛晜晝晞晠晢晣晥晧晩晪晫晬晭晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘暙暚暛暜暞暟暠暡暢暣暤暥暦暩暪暫暬暭暯暰暱暲暳暵暶暷暸暺暻暼暽暿曀曁曂曃曄曅曆曇曈曉曊曋曌曍曎曏曐曑曒曓曔曕曖曗曘曚曞曟曠曡曢曣曤曥曧曨曪曫曬曭曮曯曱曵曶書曺曻曽朁朂會�".split("");
			for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
			D[150] = "����������������������������������������������������������������朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠朡朢朣朤朥朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗杘杙杚杛杝杢杣杤杦杧杫杬杮東杴杶�杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹枺枻枼枽枾枿柀柂柅柆柇柈柉柊柋柌柍柎柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵柶柷柸柹柺査柼柾栁栂栃栄栆栍栐栒栔栕栘栙栚栛栜栞栟栠栢栣栤栥栦栧栨栫栬栭栮栯栰栱栴栵栶栺栻栿桇桋桍桏桒桖桗桘桙桚桛�".split("");
			for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
			D[151] = "����������������������������������������������������������������桜桝桞桟桪桬桭桮桯桰桱桲桳桵桸桹桺桻桼桽桾桿梀梂梄梇梈梉梊梋梌梍梎梐梑梒梔梕梖梘梙梚梛梜條梞梟梠梡梣梤梥梩梪梫梬梮梱梲梴梶梷梸�梹梺梻梼梽梾梿棁棃棄棅棆棇棈棊棌棎棏棐棑棓棔棖棗棙棛棜棝棞棟棡棢棤棥棦棧棨棩棪棫棬棭棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆椇椈椉椊椌椏椑椓椔椕椖椗椘椙椚椛検椝椞椡椢椣椥椦椧椨椩椪椫椬椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃楄楅楆楇楈楉楊楋楌楍楎楏楐楑楒楓楕楖楘楙楛楜楟�".split("");
			for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
			D[152] = "����������������������������������������������������������������楡楢楤楥楧楨楩楪楬業楯楰楲楳楴極楶楺楻楽楾楿榁榃榅榊榋榌榎榏榐榑榒榓榖榗榙榚榝榞榟榠榡榢榣榤榥榦榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽�榾榿槀槂槃槄槅槆槇槈槉構槍槏槑槒槓槕槖槗様槙槚槜槝槞槡槢槣槤槥槦槧槨槩槪槫槬槮槯槰槱槳槴槵槶槷槸槹槺槻槼槾樀樁樂樃樄樅樆樇樈樉樋樌樍樎樏樐樑樒樓樔樕樖標樚樛樜樝樞樠樢樣樤樥樦樧権樫樬樭樮樰樲樳樴樶樷樸樹樺樻樼樿橀橁橂橃橅橆橈橉橊橋橌橍橎橏橑橒橓橔橕橖橗橚�".split("");
			for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
			D[153] = "����������������������������������������������������������������橜橝橞機橠橢橣橤橦橧橨橩橪橫橬橭橮橯橰橲橳橴橵橶橷橸橺橻橽橾橿檁檂檃檅檆檇檈檉檊檋檌檍檏檒檓檔檕檖檘檙檚檛檜檝檞檟檡檢檣檤檥檦�檧檨檪檭檮檯檰檱檲檳檴檵檶檷檸檹檺檻檼檽檾檿櫀櫁櫂櫃櫄櫅櫆櫇櫈櫉櫊櫋櫌櫍櫎櫏櫐櫑櫒櫓櫔櫕櫖櫗櫘櫙櫚櫛櫜櫝櫞櫟櫠櫡櫢櫣櫤櫥櫦櫧櫨櫩櫪櫫櫬櫭櫮櫯櫰櫱櫲櫳櫴櫵櫶櫷櫸櫹櫺櫻櫼櫽櫾櫿欀欁欂欃欄欅欆欇欈欉權欋欌欍欎欏欐欑欒欓欔欕欖欗欘欙欚欛欜欝欞欟欥欦欨欩欪欫欬欭欮�".split("");
			for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
			D[154] = "����������������������������������������������������������������欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍歎歏歐歑歒歓歔歕歖歗歘歚歛歜歝歞歟歠歡歨歩歫歬歭歮歯歰歱歲歳歴歵歶歷歸歺歽歾歿殀殅殈�殌殎殏殐殑殔殕殗殘殙殜殝殞殟殠殢殣殤殥殦殧殨殩殫殬殭殮殯殰殱殲殶殸殹殺殻殼殽殾毀毃毄毆毇毈毉毊毌毎毐毑毘毚毜毝毞毟毠毢毣毤毥毦毧毨毩毬毭毮毰毱毲毴毶毷毸毺毻毼毾毿氀氁氂氃氄氈氉氊氋氌氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋汌汍汎汏汑汒汓汖汘�".split("");
			for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
			D[155] = "����������������������������������������������������������������汙汚汢汣汥汦汧汫汬汭汮汯汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘�泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟洠洡洢洣洤洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽浾浿涀涁涃涄涆涇涊涋涍涏涐涒涖涗涘涙涚涜涢涥涬涭涰涱涳涴涶涷涹涺涻涼涽涾淁淂淃淈淉淊�".split("");
			for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
			D[156] = "����������������������������������������������������������������淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽淾淿渀渁渂渃渄渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵�渶渷渹渻渼渽渾渿湀湁湂湅湆湇湈湉湊湋湌湏湐湑湒湕湗湙湚湜湝湞湠湡湢湣湤湥湦湧湨湩湪湬湭湯湰湱湲湳湴湵湶湷湸湹湺湻湼湽満溁溂溄溇溈溊溋溌溍溎溑溒溓溔溕準溗溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪滫滬滭滮滯�".split("");
			for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
			D[157] = "����������������������������������������������������������������滰滱滲滳滵滶滷滸滺滻滼滽滾滿漀漁漃漄漅漇漈漊漋漌漍漎漐漑漒漖漗漘漙漚漛漜漝漞漟漡漢漣漥漦漧漨漬漮漰漲漴漵漷漸漹漺漻漼漽漿潀潁潂�潃潄潅潈潉潊潌潎潏潐潑潒潓潔潕潖潗潙潚潛潝潟潠潡潣潤潥潧潨潩潪潫潬潯潰潱潳潵潶潷潹潻潽潾潿澀澁澂澃澅澆澇澊澋澏澐澑澒澓澔澕澖澗澘澙澚澛澝澞澟澠澢澣澤澥澦澨澩澪澫澬澭澮澯澰澱澲澴澵澷澸澺澻澼澽澾澿濁濃濄濅濆濇濈濊濋濌濍濎濏濐濓濔濕濖濗濘濙濚濛濜濝濟濢濣濤濥�".split("");
			for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
			D[158] = "����������������������������������������������������������������濦濧濨濩濪濫濬濭濰濱濲濳濴濵濶濷濸濹濺濻濼濽濾濿瀀瀁瀂瀃瀄瀅瀆瀇瀈瀉瀊瀋瀌瀍瀎瀏瀐瀒瀓瀔瀕瀖瀗瀘瀙瀜瀝瀞瀟瀠瀡瀢瀤瀥瀦瀧瀨瀩瀪�瀫瀬瀭瀮瀯瀰瀱瀲瀳瀴瀶瀷瀸瀺瀻瀼瀽瀾瀿灀灁灂灃灄灅灆灇灈灉灊灋灍灎灐灑灒灓灔灕灖灗灘灙灚灛灜灝灟灠灡灢灣灤灥灦灧灨灩灪灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞炟炠炡炢炣炤炥炦炧炨炩炪炰炲炴炵炶為炾炿烄烅烆烇烉烋烌烍烎烏烐烑烒烓烔烕烖烗烚�".split("");
			for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
			D[159] = "����������������������������������������������������������������烜烝烞烠烡烢烣烥烪烮烰烱烲烳烴烵烶烸烺烻烼烾烿焀焁焂焃焄焅焆焇焈焋焌焍焎焏焑焒焔焗焛焜焝焞焟焠無焢焣焤焥焧焨焩焪焫焬焭焮焲焳焴�焵焷焸焹焺焻焼焽焾焿煀煁煂煃煄煆煇煈煉煋煍煏煐煑煒煓煔煕煖煗煘煙煚煛煝煟煠煡煢煣煥煩煪煫煬煭煯煰煱煴煵煶煷煹煻煼煾煿熀熁熂熃熅熆熇熈熉熋熌熍熎熐熑熒熓熕熖熗熚熛熜熝熞熡熢熣熤熥熦熧熩熪熫熭熮熯熰熱熲熴熶熷熸熺熻熼熽熾熿燀燁燂燄燅燆燇燈燉燊燋燌燍燏燐燑燒燓�".split("");
			for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
			D[160] = "����������������������������������������������������������������燖燗燘燙燚燛燜燝燞營燡燢燣燤燦燨燩燪燫燬燭燯燰燱燲燳燴燵燶燷燸燺燻燼燽燾燿爀爁爂爃爄爅爇爈爉爊爋爌爍爎爏爐爑爒爓爔爕爖爗爘爙爚�爛爜爞爟爠爡爢爣爤爥爦爧爩爫爭爮爯爲爳爴爺爼爾牀牁牂牃牄牅牆牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅犆犇犈犉犌犎犐犑犓犔犕犖犗犘犙犚犛犜犝犞犠犡犢犣犤犥犦犧犨犩犪犫犮犱犲犳犵犺犻犼犽犾犿狀狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛�".split("");
			for(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}
			D[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split("");
			for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
			D[162] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split("");
			for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
			D[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
			for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
			D[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
			for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
			D[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
			for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
			D[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������︵︶︹︺︿﹀︽︾﹁﹂﹃﹄��︻︼︷︸︱�︳︴����������".split("");
			for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
			D[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
			for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
			D[168] = "����������������������������������������������������������������ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳▁▂▃▄▅▆▇�█▉▊▋▌▍▎▏▓▔▕▼▽◢◣◤◥☉⊕〒〝〞�����������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ�ńň�ɡ����ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split("");
			for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
			D[169] = "����������������������������������������������������������������〡〢〣〤〥〦〧〨〩㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤�℡㈱�‐���ー゛゜ヽヾ〆ゝゞ﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡�﹢﹣﹤﹥﹦﹨﹩﹪﹫�������������〇�������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split("");
			for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
			D[170] = "����������������������������������������������������������������狜狝狟狢狣狤狥狦狧狪狫狵狶狹狽狾狿猀猂猄猅猆猇猈猉猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀獁獂獃獄獅獆獇獈�獉獊獋獌獎獏獑獓獔獕獖獘獙獚獛獜獝獞獟獡獢獣獤獥獦獧獨獩獪獫獮獰獱�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
			D[171] = "����������������������������������������������������������������獲獳獴獵獶獷獸獹獺獻獼獽獿玀玁玂玃玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣玤玥玦玧玨玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃珄珅珆珇�珋珌珎珒珓珔珕珖珗珘珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳珴珵珶珷�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
			D[172] = "����������������������������������������������������������������珸珹珺珻珼珽現珿琀琁琂琄琇琈琋琌琍琎琑琒琓琔琕琖琗琘琙琜琝琞琟琠琡琣琤琧琩琫琭琯琱琲琷琸琹琺琻琽琾琿瑀瑂瑃瑄瑅瑆瑇瑈瑉瑊瑋瑌瑍�瑎瑏瑐瑑瑒瑓瑔瑖瑘瑝瑠瑡瑢瑣瑤瑥瑦瑧瑨瑩瑪瑫瑬瑮瑯瑱瑲瑳瑴瑵瑸瑹瑺�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
			D[173] = "����������������������������������������������������������������瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑璒璓璔璕璖璗璘璙璚璛璝璟璠璡璢璣璤璥璦璪璫璬璭璮璯環璱璲璳璴璵璶璷璸璹璻璼璽璾璿瓀瓁瓂瓃瓄瓅瓆瓇�瓈瓉瓊瓋瓌瓍瓎瓏瓐瓑瓓瓔瓕瓖瓗瓘瓙瓚瓛瓝瓟瓡瓥瓧瓨瓩瓪瓫瓬瓭瓰瓱瓲�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
			D[174] = "����������������������������������������������������������������瓳瓵瓸瓹瓺瓻瓼瓽瓾甀甁甂甃甅甆甇甈甉甊甋甌甎甐甒甔甕甖甗甛甝甞甠甡產産甤甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘�畝畞畟畠畡畢畣畤畧畨畩畫畬畭畮畯異畱畳畵當畷畺畻畼畽畾疀疁疂疄疅疇�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
			D[175] = "����������������������������������������������������������������疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦疧疨疩疪疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇�瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
			D[176] = "����������������������������������������������������������������癅癆癇癈癉癊癋癎癏癐癑癒癓癕癗癘癙癚癛癝癟癠癡癢癤癥癦癧癨癩癪癬癭癮癰癱癲癳癴癵癶癷癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛�皜皝皞皟皠皡皢皣皥皦皧皨皩皪皫皬皭皯皰皳皵皶皷皸皹皺皻皼皽皾盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split("");
			for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
			D[177] = "����������������������������������������������������������������盄盇盉盋盌盓盕盙盚盜盝盞盠盡盢監盤盦盧盨盩盪盫盬盭盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎眏眐眑眒眓眔眕眖眗眘眛眜眝眞眡眣眤眥眧眪眫�眬眮眰眱眲眳眴眹眻眽眾眿睂睄睅睆睈睉睊睋睌睍睎睏睒睓睔睕睖睗睘睙睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split("");
			for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
			D[178] = "����������������������������������������������������������������睝睞睟睠睤睧睩睪睭睮睯睰睱睲睳睴睵睶睷睸睺睻睼瞁瞂瞃瞆瞇瞈瞉瞊瞋瞏瞐瞓瞔瞕瞖瞗瞘瞙瞚瞛瞜瞝瞞瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶瞷瞸瞹瞺�瞼瞾矀矁矂矃矄矅矆矇矈矉矊矋矌矎矏矐矑矒矓矔矕矖矘矙矚矝矞矟矠矡矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split("");
			for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
			D[179] = "����������������������������������������������������������������矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃砄砅砆砇砈砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚�硛硜硞硟硠硡硢硣硤硥硦硧硨硩硯硰硱硲硳硴硵硶硸硹硺硻硽硾硿碀碁碂碃场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split("");
			for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
			D[180] = "����������������������������������������������������������������碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨碩碪碫碬碭碮碯碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚磛磜磝磞磟磠磡磢磣�磤磥磦磧磩磪磫磭磮磯磰磱磳磵磶磸磹磻磼磽磾磿礀礂礃礄礆礇礈礉礊礋礌础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split("");
			for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
			D[181] = "����������������������������������������������������������������礍礎礏礐礑礒礔礕礖礗礘礙礚礛礜礝礟礠礡礢礣礥礦礧礨礩礪礫礬礭礮礯礰礱礲礳礵礶礷礸礹礽礿祂祃祄祅祇祊祋祌祍祎祏祐祑祒祔祕祘祙祡祣�祤祦祩祪祫祬祮祰祱祲祳祴祵祶祹祻祼祽祾祿禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split("");
			for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
			D[182] = "����������������������������������������������������������������禓禔禕禖禗禘禙禛禜禝禞禟禠禡禢禣禤禥禦禨禩禪禫禬禭禮禯禰禱禲禴禵禶禷禸禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙秚秛秜秝秞秠秡秢秥秨秪�秬秮秱秲秳秴秵秶秷秹秺秼秾秿稁稄稅稇稈稉稊稌稏稐稑稒稓稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split("");
			for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
			D[183] = "����������������������������������������������������������������稝稟稡稢稤稥稦稧稨稩稪稫稬稭種稯稰稱稲稴稵稶稸稺稾穀穁穂穃穄穅穇穈穉穊穋穌積穎穏穐穒穓穔穕穖穘穙穚穛穜穝穞穟穠穡穢穣穤穥穦穧穨�穩穪穫穬穭穮穯穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split("");
			for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
			D[184] = "����������������������������������������������������������������窣窤窧窩窪窫窮窯窰窱窲窴窵窶窷窸窹窺窻窼窽窾竀竁竂竃竄竅竆竇竈竉竊竌竍竎竏竐竑竒竓竔竕竗竘竚竛竜竝竡竢竤竧竨竩竪竫竬竮竰竱竲竳�竴竵競竷竸竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split("");
			for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
			D[185] = "����������������������������������������������������������������笯笰笲笴笵笶笷笹笻笽笿筀筁筂筃筄筆筈筊筍筎筓筕筗筙筜筞筟筡筣筤筥筦筧筨筩筪筫筬筭筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆箇箈箉箊箋箌箎箏�箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹箺箻箼箽箾箿節篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split("");
			for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
			D[186] = "����������������������������������������������������������������篅篈築篊篋篍篎篏篐篒篔篕篖篗篘篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲篳篴篵篶篸篹篺篻篽篿簀簁簂簃簄簅簆簈簉簊簍簎簐簑簒簓簔簕簗簘簙�簚簛簜簝簞簠簡簢簣簤簥簨簩簫簬簭簮簯簰簱簲簳簴簵簶簷簹簺簻簼簽簾籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split("");
			for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
			D[187] = "����������������������������������������������������������������籃籄籅籆籇籈籉籊籋籌籎籏籐籑籒籓籔籕籖籗籘籙籚籛籜籝籞籟籠籡籢籣籤籥籦籧籨籩籪籫籬籭籮籯籰籱籲籵籶籷籸籹籺籾籿粀粁粂粃粄粅粆粇�粈粊粋粌粍粎粏粐粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴粵粶粷粸粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split("");
			for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
			D[188] = "����������������������������������������������������������������粿糀糂糃糄糆糉糋糎糏糐糑糒糓糔糘糚糛糝糞糡糢糣糤糥糦糧糩糪糫糬糭糮糰糱糲糳糴糵糶糷糹糺糼糽糾糿紀紁紂紃約紅紆紇紈紉紋紌納紎紏紐�紑紒紓純紕紖紗紘紙級紛紜紝紞紟紡紣紤紥紦紨紩紪紬紭紮細紱紲紳紴紵紶肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split("");
			for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
			D[189] = "����������������������������������������������������������������紷紸紹紺紻紼紽紾紿絀絁終絃組絅絆絇絈絉絊絋経絍絎絏結絑絒絓絔絕絖絗絘絙絚絛絜絝絞絟絠絡絢絣絤絥給絧絨絩絪絫絬絭絯絰統絲絳絴絵絶�絸絹絺絻絼絽絾絿綀綁綂綃綄綅綆綇綈綉綊綋綌綍綎綏綐綑綒經綔綕綖綗綘健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split("");
			for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
			D[190] = "����������������������������������������������������������������継続綛綜綝綞綟綠綡綢綣綤綥綧綨綩綪綫綬維綯綰綱網綳綴綵綶綷綸綹綺綻綼綽綾綿緀緁緂緃緄緅緆緇緈緉緊緋緌緍緎総緐緑緒緓緔緕緖緗緘緙�線緛緜緝緞緟締緡緢緣緤緥緦緧編緩緪緫緬緭緮緯緰緱緲緳練緵緶緷緸緹緺尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split("");
			for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
			D[191] = "����������������������������������������������������������������緻緼緽緾緿縀縁縂縃縄縅縆縇縈縉縊縋縌縍縎縏縐縑縒縓縔縕縖縗縘縙縚縛縜縝縞縟縠縡縢縣縤縥縦縧縨縩縪縫縬縭縮縯縰縱縲縳縴縵縶縷縸縹�縺縼總績縿繀繂繃繄繅繆繈繉繊繋繌繍繎繏繐繑繒繓織繕繖繗繘繙繚繛繜繝俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split("");
			for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
			D[192] = "����������������������������������������������������������������繞繟繠繡繢繣繤繥繦繧繨繩繪繫繬繭繮繯繰繱繲繳繴繵繶繷繸繹繺繻繼繽繾繿纀纁纃纄纅纆纇纈纉纊纋續纍纎纏纐纑纒纓纔纕纖纗纘纙纚纜纝纞�纮纴纻纼绖绤绬绹缊缐缞缷缹缻缼缽缾缿罀罁罃罆罇罈罉罊罋罌罍罎罏罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split("");
			for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
			D[193] = "����������������������������������������������������������������罖罙罛罜罝罞罠罣罤罥罦罧罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂羃羄羅羆羇羈羉羋羍羏羐羑羒羓羕羖羗羘羙羛羜羠羢羣羥羦羨義羪羫羬羭羮羱�羳羴羵羶羷羺羻羾翀翂翃翄翆翇翈翉翋翍翏翐翑習翓翖翗翙翚翛翜翝翞翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split("");
			for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
			D[194] = "����������������������������������������������������������������翤翧翨翪翫翬翭翯翲翴翵翶翷翸翹翺翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫耬耭耮耯耰耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗�聙聛聜聝聞聟聠聡聢聣聤聥聦聧聨聫聬聭聮聯聰聲聳聴聵聶職聸聹聺聻聼聽隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split("");
			for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
			D[195] = "����������������������������������������������������������������聾肁肂肅肈肊肍肎肏肐肑肒肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇胈胉胊胋胏胐胑胒胓胔胕胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋�脌脕脗脙脛脜脝脟脠脡脢脣脤脥脦脧脨脩脪脫脭脮脰脳脴脵脷脹脺脻脼脽脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split("");
			for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
			D[196] = "����������������������������������������������������������������腀腁腂腃腄腅腇腉腍腎腏腒腖腗腘腛腜腝腞腟腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃膄膅膆膇膉膋膌膍膎膐膒膓膔膕膖膗膙膚膞膟膠膡膢膤膥�膧膩膫膬膭膮膯膰膱膲膴膵膶膷膸膹膼膽膾膿臄臅臇臈臉臋臍臎臏臐臑臒臓摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split("");
			for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
			D[197] = "����������������������������������������������������������������臔臕臖臗臘臙臚臛臜臝臞臟臠臡臢臤臥臦臨臩臫臮臯臰臱臲臵臶臷臸臹臺臽臿舃與興舉舊舋舎舏舑舓舕舖舗舘舙舚舝舠舤舥舦舧舩舮舲舺舼舽舿�艀艁艂艃艅艆艈艊艌艍艎艐艑艒艓艔艕艖艗艙艛艜艝艞艠艡艢艣艤艥艦艧艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split("");
			for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
			D[198] = "����������������������������������������������������������������艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸�苺苼苽苾苿茀茊茋茍茐茒茓茖茘茙茝茞茟茠茡茢茣茤茥茦茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split("");
			for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
			D[199] = "����������������������������������������������������������������茾茿荁荂荄荅荈荊荋荌荍荎荓荕荖荗荘荙荝荢荰荱荲荳荴荵荶荹荺荾荿莀莁莂莃莄莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡莢莣莤莥莦莧莬莭莮�莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split("");
			for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
			D[200] = "����������������������������������������������������������������菮華菳菴菵菶菷菺菻菼菾菿萀萂萅萇萈萉萊萐萒萓萔萕萖萗萙萚萛萞萟萠萡萢萣萩萪萫萬萭萮萯萰萲萳萴萵萶萷萹萺萻萾萿葀葁葂葃葄葅葇葈葉�葊葋葌葍葎葏葐葒葓葔葕葖葘葝葞葟葠葢葤葥葦葧葨葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split("");
			for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
			D[201] = "����������������������������������������������������������������葽葾葿蒀蒁蒃蒄蒅蒆蒊蒍蒏蒐蒑蒒蒓蒔蒕蒖蒘蒚蒛蒝蒞蒟蒠蒢蒣蒤蒥蒦蒧蒨蒩蒪蒫蒬蒭蒮蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗�蓘蓙蓚蓛蓜蓞蓡蓢蓤蓧蓨蓩蓪蓫蓭蓮蓯蓱蓲蓳蓴蓵蓶蓷蓸蓹蓺蓻蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split("");
			for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
			D[202] = "����������������������������������������������������������������蔃蔄蔅蔆蔇蔈蔉蔊蔋蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢蔣蔤蔥蔦蔧蔨蔩蔪蔭蔮蔯蔰蔱蔲蔳蔴蔵蔶蔾蔿蕀蕁蕂蕄蕅蕆蕇蕋蕌蕍蕎蕏蕐蕑蕒蕓蕔蕕�蕗蕘蕚蕛蕜蕝蕟蕠蕡蕢蕣蕥蕦蕧蕩蕪蕫蕬蕭蕮蕯蕰蕱蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split("");
			for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
			D[203] = "����������������������������������������������������������������薂薃薆薈薉薊薋薌薍薎薐薑薒薓薔薕薖薗薘薙薚薝薞薟薠薡薢薣薥薦薧薩薫薬薭薱薲薳薴薵薶薸薺薻薼薽薾薿藀藂藃藄藅藆藇藈藊藋藌藍藎藑藒�藔藖藗藘藙藚藛藝藞藟藠藡藢藣藥藦藧藨藪藫藬藭藮藯藰藱藲藳藴藵藶藷藸恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split("");
			for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
			D[204] = "����������������������������������������������������������������藹藺藼藽藾蘀蘁蘂蘃蘄蘆蘇蘈蘉蘊蘋蘌蘍蘎蘏蘐蘒蘓蘔蘕蘗蘘蘙蘚蘛蘜蘝蘞蘟蘠蘡蘢蘣蘤蘥蘦蘨蘪蘫蘬蘭蘮蘯蘰蘱蘲蘳蘴蘵蘶蘷蘹蘺蘻蘽蘾蘿虀�虁虂虃虄虅虆虇虈虉虊虋虌虒虓處虖虗虘虙虛虜虝號虠虡虣虤虥虦虧虨虩虪獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split("");
			for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
			D[205] = "����������������������������������������������������������������虭虯虰虲虳虴虵虶虷虸蚃蚄蚅蚆蚇蚈蚉蚎蚏蚐蚑蚒蚔蚖蚗蚘蚙蚚蚛蚞蚟蚠蚡蚢蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻蚼蚽蚾蚿蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜�蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split("");
			for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
			D[206] = "����������������������������������������������������������������蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀蝁蝂蝃蝄蝅蝆蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚蝛蝜蝝蝞蝟蝡蝢蝦蝧蝨蝩蝪蝫蝬蝭蝯蝱蝲蝳蝵�蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎螏螐螑螒螔螕螖螘螙螚螛螜螝螞螠螡螢螣螤巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split("");
			for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
			D[207] = "����������������������������������������������������������������螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁蟂蟃蟄蟅蟇蟈蟉蟌蟍蟎蟏蟐蟔蟕蟖蟗蟘蟙蟚蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯蟰蟱蟲蟳蟴蟵蟶蟷蟸�蟺蟻蟼蟽蟿蠀蠁蠂蠄蠅蠆蠇蠈蠉蠋蠌蠍蠎蠏蠐蠑蠒蠔蠗蠘蠙蠚蠜蠝蠞蠟蠠蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split("");
			for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
			D[208] = "����������������������������������������������������������������蠤蠥蠦蠧蠨蠩蠪蠫蠬蠭蠮蠯蠰蠱蠳蠴蠵蠶蠷蠸蠺蠻蠽蠾蠿衁衂衃衆衇衈衉衊衋衎衏衐衑衒術衕衖衘衚衛衜衝衞衟衠衦衧衪衭衯衱衳衴衵衶衸衹衺�衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗袘袙袚袛袝袞袟袠袡袣袥袦袧袨袩袪小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split("");
			for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
			D[209] = "����������������������������������������������������������������袬袮袯袰袲袳袴袵袶袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚裛補裝裞裠裡裦裧裩裪裫裬裭裮裯裲裵裶裷裺裻製裿褀褁褃褄褅褆複褈�褉褋褌褍褎褏褑褔褕褖褗褘褜褝褞褟褠褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split("");
			for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
			D[210] = "����������������������������������������������������������������褸褹褺褻褼褽褾褿襀襂襃襅襆襇襈襉襊襋襌襍襎襏襐襑襒襓襔襕襖襗襘襙襚襛襜襝襠襡襢襣襤襥襧襨襩襪襫襬襭襮襯襰襱襲襳襴襵襶襷襸襹襺襼�襽襾覀覂覄覅覇覈覉覊見覌覍覎規覐覑覒覓覔覕視覗覘覙覚覛覜覝覞覟覠覡摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split("");
			for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
			D[211] = "����������������������������������������������������������������覢覣覤覥覦覧覨覩親覫覬覭覮覯覰覱覲観覴覵覶覷覸覹覺覻覼覽覾覿觀觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴觵觶觷觸觹觺�觻觼觽觾觿訁訂訃訄訅訆計訉訊訋訌訍討訏訐訑訒訓訔訕訖託記訙訚訛訜訝印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split("");
			for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
			D[212] = "����������������������������������������������������������������訞訟訠訡訢訣訤訥訦訧訨訩訪訫訬設訮訯訰許訲訳訴訵訶訷訸訹診註証訽訿詀詁詂詃詄詅詆詇詉詊詋詌詍詎詏詐詑詒詓詔評詖詗詘詙詚詛詜詝詞�詟詠詡詢詣詤詥試詧詨詩詪詫詬詭詮詯詰話該詳詴詵詶詷詸詺詻詼詽詾詿誀浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split("");
			for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
			D[213] = "����������������������������������������������������������������誁誂誃誄誅誆誇誈誋誌認誎誏誐誑誒誔誕誖誗誘誙誚誛誜誝語誟誠誡誢誣誤誥誦誧誨誩說誫説読誮誯誰誱課誳誴誵誶誷誸誹誺誻誼誽誾調諀諁諂�諃諄諅諆談諈諉諊請諌諍諎諏諐諑諒諓諔諕論諗諘諙諚諛諜諝諞諟諠諡諢諣铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split("");
			for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
			D[214] = "����������������������������������������������������������������諤諥諦諧諨諩諪諫諬諭諮諯諰諱諲諳諴諵諶諷諸諹諺諻諼諽諾諿謀謁謂謃謄謅謆謈謉謊謋謌謍謎謏謐謑謒謓謔謕謖謗謘謙謚講謜謝謞謟謠謡謢謣�謤謥謧謨謩謪謫謬謭謮謯謰謱謲謳謴謵謶謷謸謹謺謻謼謽謾謿譀譁譂譃譄譅帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split("");
			for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
			D[215] = "����������������������������������������������������������������譆譇譈證譊譋譌譍譎譏譐譑譒譓譔譕譖譗識譙譚譛譜譝譞譟譠譡譢譣譤譥譧譨譩譪譫譭譮譯議譱譲譳譴譵譶護譸譹譺譻譼譽譾譿讀讁讂讃讄讅讆�讇讈讉變讋讌讍讎讏讐讑讒讓讔讕讖讗讘讙讚讛讜讝讞讟讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split("");
			for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
			D[216] = "����������������������������������������������������������������谸谹谺谻谼谽谾谿豀豂豃豄豅豈豊豋豍豎豏豐豑豒豓豔豖豗豘豙豛豜豝豞豟豠豣豤豥豦豧豨豩豬豭豮豯豰豱豲豴豵豶豷豻豼豽豾豿貀貁貃貄貆貇�貈貋貍貎貏貐貑貒貓貕貖貗貙貚貛貜貝貞貟負財貢貣貤貥貦貧貨販貪貫責貭亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split("");
			for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
			D[217] = "����������������������������������������������������������������貮貯貰貱貲貳貴貵貶買貸貹貺費貼貽貾貿賀賁賂賃賄賅賆資賈賉賊賋賌賍賎賏賐賑賒賓賔賕賖賗賘賙賚賛賜賝賞賟賠賡賢賣賤賥賦賧賨賩質賫賬�賭賮賯賰賱賲賳賴賵賶賷賸賹賺賻購賽賾賿贀贁贂贃贄贅贆贇贈贉贊贋贌贍佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split("");
			for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
			D[218] = "����������������������������������������������������������������贎贏贐贑贒贓贔贕贖贗贘贙贚贛贜贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸赹赺赻赼赽赾赿趀趂趃趆趇趈趉趌趍趎趏趐趒趓趕趖趗趘趙趚趛趜趝趞趠趡�趢趤趥趦趧趨趩趪趫趬趭趮趯趰趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split("");
			for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
			D[219] = "����������������������������������������������������������������跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾跿踀踁踂踃踄踆踇踈踋踍踎踐踑踒踓踕踖踗踘踙踚踛踜踠踡踤踥踦踧踨踫踭踰踲踳踴踶踷踸踻踼踾�踿蹃蹅蹆蹌蹍蹎蹏蹐蹓蹔蹕蹖蹗蹘蹚蹛蹜蹝蹞蹟蹠蹡蹢蹣蹤蹥蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split("");
			for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
			D[220] = "����������������������������������������������������������������蹳蹵蹷蹸蹹蹺蹻蹽蹾躀躂躃躄躆躈躉躊躋躌躍躎躑躒躓躕躖躗躘躙躚躛躝躟躠躡躢躣躤躥躦躧躨躩躪躭躮躰躱躳躴躵躶躷躸躹躻躼躽躾躿軀軁軂�軃軄軅軆軇軈軉車軋軌軍軏軐軑軒軓軔軕軖軗軘軙軚軛軜軝軞軟軠軡転軣軤堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split("");
			for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
			D[221] = "����������������������������������������������������������������軥軦軧軨軩軪軫軬軭軮軯軰軱軲軳軴軵軶軷軸軹軺軻軼軽軾軿輀輁輂較輄輅輆輇輈載輊輋輌輍輎輏輐輑輒輓輔輕輖輗輘輙輚輛輜輝輞輟輠輡輢輣�輤輥輦輧輨輩輪輫輬輭輮輯輰輱輲輳輴輵輶輷輸輹輺輻輼輽輾輿轀轁轂轃轄荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split("");
			for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
			D[222] = "����������������������������������������������������������������轅轆轇轈轉轊轋轌轍轎轏轐轑轒轓轔轕轖轗轘轙轚轛轜轝轞轟轠轡轢轣轤轥轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆�迉迊迋迌迍迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split("");
			for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
			D[223] = "����������������������������������������������������������������這逜連逤逥逧逨逩逪逫逬逰週進逳逴逷逹逺逽逿遀遃遅遆遈遉遊運遌過達違遖遙遚遜遝遞遟遠遡遤遦遧適遪遫遬遯遰遱遲遳遶遷選遹遺遻遼遾邁�還邅邆邇邉邊邌邍邎邏邐邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split("");
			for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
			D[224] = "����������������������������������������������������������������郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅鄆鄇鄈鄉鄊鄋鄌鄍鄎鄏鄐鄑鄒鄓鄔鄕鄖鄗鄘鄚鄛鄜�鄝鄟鄠鄡鄤鄥鄦鄧鄨鄩鄪鄫鄬鄭鄮鄰鄲鄳鄴鄵鄶鄷鄸鄺鄻鄼鄽鄾鄿酀酁酂酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split("");
			for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
			D[225] = "����������������������������������������������������������������酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀醁醂醃醄醆醈醊醎醏醓醔醕醖醗醘醙醜醝醞醟醠醡醤醥醦醧醨醩醫醬醰醱醲醳醶醷醸醹醻�醼醽醾醿釀釁釂釃釄釅釆釈釋釐釒釓釔釕釖釗釘釙釚釛針釞釟釠釡釢釣釤釥帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split("");
			for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
			D[226] = "����������������������������������������������������������������釦釧釨釩釪釫釬釭釮釯釰釱釲釳釴釵釶釷釸釹釺釻釼釽釾釿鈀鈁鈂鈃鈄鈅鈆鈇鈈鈉鈊鈋鈌鈍鈎鈏鈐鈑鈒鈓鈔鈕鈖鈗鈘鈙鈚鈛鈜鈝鈞鈟鈠鈡鈢鈣鈤�鈥鈦鈧鈨鈩鈪鈫鈬鈭鈮鈯鈰鈱鈲鈳鈴鈵鈶鈷鈸鈹鈺鈻鈼鈽鈾鈿鉀鉁鉂鉃鉄鉅狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split("");
			for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
			D[227] = "����������������������������������������������������������������鉆鉇鉈鉉鉊鉋鉌鉍鉎鉏鉐鉑鉒鉓鉔鉕鉖鉗鉘鉙鉚鉛鉜鉝鉞鉟鉠鉡鉢鉣鉤鉥鉦鉧鉨鉩鉪鉫鉬鉭鉮鉯鉰鉱鉲鉳鉵鉶鉷鉸鉹鉺鉻鉼鉽鉾鉿銀銁銂銃銄銅�銆銇銈銉銊銋銌銍銏銐銑銒銓銔銕銖銗銘銙銚銛銜銝銞銟銠銡銢銣銤銥銦銧恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split("");
			for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
			D[228] = "����������������������������������������������������������������銨銩銪銫銬銭銯銰銱銲銳銴銵銶銷銸銹銺銻銼銽銾銿鋀鋁鋂鋃鋄鋅鋆鋇鋉鋊鋋鋌鋍鋎鋏鋐鋑鋒鋓鋔鋕鋖鋗鋘鋙鋚鋛鋜鋝鋞鋟鋠鋡鋢鋣鋤鋥鋦鋧鋨�鋩鋪鋫鋬鋭鋮鋯鋰鋱鋲鋳鋴鋵鋶鋷鋸鋹鋺鋻鋼鋽鋾鋿錀錁錂錃錄錅錆錇錈錉洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split("");
			for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
			D[229] = "����������������������������������������������������������������錊錋錌錍錎錏錐錑錒錓錔錕錖錗錘錙錚錛錜錝錞錟錠錡錢錣錤錥錦錧錨錩錪錫錬錭錮錯錰錱録錳錴錵錶錷錸錹錺錻錼錽錿鍀鍁鍂鍃鍄鍅鍆鍇鍈鍉�鍊鍋鍌鍍鍎鍏鍐鍑鍒鍓鍔鍕鍖鍗鍘鍙鍚鍛鍜鍝鍞鍟鍠鍡鍢鍣鍤鍥鍦鍧鍨鍩鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split("");
			for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
			D[230] = "����������������������������������������������������������������鍬鍭鍮鍯鍰鍱鍲鍳鍴鍵鍶鍷鍸鍹鍺鍻鍼鍽鍾鍿鎀鎁鎂鎃鎄鎅鎆鎇鎈鎉鎊鎋鎌鎍鎎鎐鎑鎒鎓鎔鎕鎖鎗鎘鎙鎚鎛鎜鎝鎞鎟鎠鎡鎢鎣鎤鎥鎦鎧鎨鎩鎪鎫�鎬鎭鎮鎯鎰鎱鎲鎳鎴鎵鎶鎷鎸鎹鎺鎻鎼鎽鎾鎿鏀鏁鏂鏃鏄鏅鏆鏇鏈鏉鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split("");
			for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
			D[231] = "����������������������������������������������������������������鏎鏏鏐鏑鏒鏓鏔鏕鏗鏘鏙鏚鏛鏜鏝鏞鏟鏠鏡鏢鏣鏤鏥鏦鏧鏨鏩鏪鏫鏬鏭鏮鏯鏰鏱鏲鏳鏴鏵鏶鏷鏸鏹鏺鏻鏼鏽鏾鏿鐀鐁鐂鐃鐄鐅鐆鐇鐈鐉鐊鐋鐌鐍�鐎鐏鐐鐑鐒鐓鐔鐕鐖鐗鐘鐙鐚鐛鐜鐝鐞鐟鐠鐡鐢鐣鐤鐥鐦鐧鐨鐩鐪鐫鐬鐭鐮纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split("");
			for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
			D[232] = "����������������������������������������������������������������鐯鐰鐱鐲鐳鐴鐵鐶鐷鐸鐹鐺鐻鐼鐽鐿鑀鑁鑂鑃鑄鑅鑆鑇鑈鑉鑊鑋鑌鑍鑎鑏鑐鑑鑒鑓鑔鑕鑖鑗鑘鑙鑚鑛鑜鑝鑞鑟鑠鑡鑢鑣鑤鑥鑦鑧鑨鑩鑪鑬鑭鑮鑯�鑰鑱鑲鑳鑴鑵鑶鑷鑸鑹鑺鑻鑼鑽鑾鑿钀钁钂钃钄钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split("");
			for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
			D[233] = "����������������������������������������������������������������锧锳锽镃镈镋镕镚镠镮镴镵長镸镹镺镻镼镽镾門閁閂閃閄閅閆閇閈閉閊開閌閍閎閏閐閑閒間閔閕閖閗閘閙閚閛閜閝閞閟閠閡関閣閤閥閦閧閨閩閪�閫閬閭閮閯閰閱閲閳閴閵閶閷閸閹閺閻閼閽閾閿闀闁闂闃闄闅闆闇闈闉闊闋椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split("");
			for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
			D[234] = "����������������������������������������������������������������闌闍闎闏闐闑闒闓闔闕闖闗闘闙闚闛關闝闞闟闠闡闢闣闤闥闦闧闬闿阇阓阘阛阞阠阣阤阥阦阧阨阩阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗�陘陙陚陜陝陞陠陣陥陦陫陭陮陯陰陱陳陸陹険陻陼陽陾陿隀隁隂隃隄隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split("");
			for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
			D[235] = "����������������������������������������������������������������隌階隑隒隓隕隖隚際隝隞隟隠隡隢隣隤隥隦隨隩險隫隬隭隮隯隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖雗雘雙雚雛雜雝雞雟雡離難雤雥雦雧雫�雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗霘霙霚霛霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split("");
			for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
			D[236] = "����������������������������������������������������������������霡霢霣霤霥霦霧霨霩霫霬霮霯霱霳霴霵霶霷霺霻霼霽霿靀靁靂靃靄靅靆靇靈靉靊靋靌靍靎靏靐靑靔靕靗靘靚靜靝靟靣靤靦靧靨靪靫靬靭靮靯靰靱�靲靵靷靸靹靺靻靽靾靿鞀鞁鞂鞃鞄鞆鞇鞈鞉鞊鞌鞎鞏鞐鞓鞕鞖鞗鞙鞚鞛鞜鞝臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split("");
			for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
			D[237] = "����������������������������������������������������������������鞞鞟鞡鞢鞤鞥鞦鞧鞨鞩鞪鞬鞮鞰鞱鞳鞵鞶鞷鞸鞹鞺鞻鞼鞽鞾鞿韀韁韂韃韄韅韆韇韈韉韊韋韌韍韎韏韐韑韒韓韔韕韖韗韘韙韚韛韜韝韞韟韠韡韢韣�韤韥韨韮韯韰韱韲韴韷韸韹韺韻韼韽韾響頀頁頂頃頄項順頇須頉頊頋頌頍頎怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split("");
			for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
			D[238] = "����������������������������������������������������������������頏預頑頒頓頔頕頖頗領頙頚頛頜頝頞頟頠頡頢頣頤頥頦頧頨頩頪頫頬頭頮頯頰頱頲頳頴頵頶頷頸頹頺頻頼頽頾頿顀顁顂顃顄顅顆顇顈顉顊顋題額�顎顏顐顑顒顓顔顕顖顗願顙顚顛顜顝類顟顠顡顢顣顤顥顦顧顨顩顪顫顬顭顮睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split("");
			for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
			D[239] = "����������������������������������������������������������������顯顰顱顲顳顴颋颎颒颕颙颣風颩颪颫颬颭颮颯颰颱颲颳颴颵颶颷颸颹颺颻颼颽颾颿飀飁飂飃飄飅飆飇飈飉飊飋飌飍飏飐飔飖飗飛飜飝飠飡飢飣飤�飥飦飩飪飫飬飭飮飯飰飱飲飳飴飵飶飷飸飹飺飻飼飽飾飿餀餁餂餃餄餅餆餇铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split("");
			for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
			D[240] = "����������������������������������������������������������������餈餉養餋餌餎餏餑餒餓餔餕餖餗餘餙餚餛餜餝餞餟餠餡餢餣餤餥餦餧館餩餪餫餬餭餯餰餱餲餳餴餵餶餷餸餹餺餻餼餽餾餿饀饁饂饃饄饅饆饇饈饉�饊饋饌饍饎饏饐饑饒饓饖饗饘饙饚饛饜饝饞饟饠饡饢饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split("");
			for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
			D[241] = "����������������������������������������������������������������馌馎馚馛馜馝馞馟馠馡馢馣馤馦馧馩馪馫馬馭馮馯馰馱馲馳馴馵馶馷馸馹馺馻馼馽馾馿駀駁駂駃駄駅駆駇駈駉駊駋駌駍駎駏駐駑駒駓駔駕駖駗駘�駙駚駛駜駝駞駟駠駡駢駣駤駥駦駧駨駩駪駫駬駭駮駯駰駱駲駳駴駵駶駷駸駹瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split("");
			for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
			D[242] = "����������������������������������������������������������������駺駻駼駽駾駿騀騁騂騃騄騅騆騇騈騉騊騋騌騍騎騏騐騑騒験騔騕騖騗騘騙騚騛騜騝騞騟騠騡騢騣騤騥騦騧騨騩騪騫騬騭騮騯騰騱騲騳騴騵騶騷騸�騹騺騻騼騽騾騿驀驁驂驃驄驅驆驇驈驉驊驋驌驍驎驏驐驑驒驓驔驕驖驗驘驙颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split("");
			for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
			D[243] = "����������������������������������������������������������������驚驛驜驝驞驟驠驡驢驣驤驥驦驧驨驩驪驫驲骃骉骍骎骔骕骙骦骩骪骫骬骭骮骯骲骳骴骵骹骻骽骾骿髃髄髆髇髈髉髊髍髎髏髐髒體髕髖髗髙髚髛髜�髝髞髠髢髣髤髥髧髨髩髪髬髮髰髱髲髳髴髵髶髷髸髺髼髽髾髿鬀鬁鬂鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split("");
			for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
			D[244] = "����������������������������������������������������������������鬇鬉鬊鬋鬌鬍鬎鬐鬑鬒鬔鬕鬖鬗鬘鬙鬚鬛鬜鬝鬞鬠鬡鬢鬤鬥鬦鬧鬨鬩鬪鬫鬬鬭鬮鬰鬱鬳鬴鬵鬶鬷鬸鬹鬺鬽鬾鬿魀魆魊魋魌魎魐魒魓魕魖魗魘魙魚�魛魜魝魞魟魠魡魢魣魤魥魦魧魨魩魪魫魬魭魮魯魰魱魲魳魴魵魶魷魸魹魺魻簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split("");
			for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
			D[245] = "����������������������������������������������������������������魼魽魾魿鮀鮁鮂鮃鮄鮅鮆鮇鮈鮉鮊鮋鮌鮍鮎鮏鮐鮑鮒鮓鮔鮕鮖鮗鮘鮙鮚鮛鮜鮝鮞鮟鮠鮡鮢鮣鮤鮥鮦鮧鮨鮩鮪鮫鮬鮭鮮鮯鮰鮱鮲鮳鮴鮵鮶鮷鮸鮹鮺�鮻鮼鮽鮾鮿鯀鯁鯂鯃鯄鯅鯆鯇鯈鯉鯊鯋鯌鯍鯎鯏鯐鯑鯒鯓鯔鯕鯖鯗鯘鯙鯚鯛酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split("");
			for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
			D[246] = "����������������������������������������������������������������鯜鯝鯞鯟鯠鯡鯢鯣鯤鯥鯦鯧鯨鯩鯪鯫鯬鯭鯮鯯鯰鯱鯲鯳鯴鯵鯶鯷鯸鯹鯺鯻鯼鯽鯾鯿鰀鰁鰂鰃鰄鰅鰆鰇鰈鰉鰊鰋鰌鰍鰎鰏鰐鰑鰒鰓鰔鰕鰖鰗鰘鰙鰚�鰛鰜鰝鰞鰟鰠鰡鰢鰣鰤鰥鰦鰧鰨鰩鰪鰫鰬鰭鰮鰯鰰鰱鰲鰳鰴鰵鰶鰷鰸鰹鰺鰻觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split("");
			for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
			D[247] = "����������������������������������������������������������������鰼鰽鰾鰿鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺�鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾鲿鳀鳁鳂鳈鳉鳑鳒鳚鳛鳠鳡鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split("");
			for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
			D[248] = "����������������������������������������������������������������鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡�鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
			D[249] = "����������������������������������������������������������������鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁�鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
			D[250] = "����������������������������������������������������������������鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡�鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
			D[251] = "����������������������������������������������������������������鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽麀�麁麃麄麅麆麉麊麌麍麎麏麐麑麔麕麖麗麘麙麚麛麜麞麠麡麢麣麤麥麧麨麩麪�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
			D[252] = "����������������������������������������������������������������麫麬麭麮麯麰麱麲麳麵麶麷麹麺麼麿黀黁黂黃黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰黱黲黳黴黵黶黷黸黺黽黿鼀鼁鼂鼃鼄鼅�鼆鼇鼈鼉鼊鼌鼏鼑鼒鼔鼕鼖鼘鼚鼛鼜鼝鼞鼟鼡鼣鼤鼥鼦鼧鼨鼩鼪鼫鼭鼮鼰鼱�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
			D[253] = "����������������������������������������������������������������鼲鼳鼴鼵鼶鼸鼺鼼鼿齀齁齂齃齅齆齇齈齉齊齋齌齍齎齏齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸�齹齺齻齼齽齾龁龂龍龎龏龐龑龒龓龔龕龖龗龘龜龝龞龡龢龣龤龥郎凉秊裏隣�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}
			D[254] = "����������������������������������������������������������������兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[254].length; ++j) if(D[254][j].charCodeAt(0) !== 0xFFFD) { e[D[254][j]] = 65024 + j; d[65024 + j] = D[254][j];}
			return {"enc": e, "dec": d }; })();
			cptable[949] = (function(){ var d = [], e = {}, D = [], j;
			D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
			D[129] = "�����������������������������������������������������������������갂갃갅갆갋갌갍갎갏갘갞갟갡갢갣갥갦갧갨갩갪갫갮갲갳갴������갵갶갷갺갻갽갾갿걁걂걃걄걅걆걇걈걉걊걌걎걏걐걑걒걓걕������걖걗걙걚걛걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯걲걳걵걶걹걻걼걽걾걿겂겇겈겍겎겏겑겒겓겕겖겗겘겙겚겛겞겢겣겤겥겦겧겫겭겮겱겲겳겴겵겶겷겺겾겿곀곂곃곅곆곇곉곊곋곍곎곏곐곑곒곓곔곖곘곙곚곛곜곝곞곟곢곣곥곦곩곫곭곮곲곴곷곸곹곺곻곾곿괁괂괃괅괇괈괉괊괋괎괐괒괓�".split("");
			for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
			D[130] = "�����������������������������������������������������������������괔괕괖괗괙괚괛괝괞괟괡괢괣괤괥괦괧괨괪괫괮괯괰괱괲괳������괶괷괹괺괻괽괾괿굀굁굂굃굆굈굊굋굌굍굎굏굑굒굓굕굖굗������굙굚굛굜굝굞굟굠굢굤굥굦굧굨굩굪굫굮굯굱굲굷굸굹굺굾궀궃궄궅궆궇궊궋궍궎궏궑궒궓궔궕궖궗궘궙궚궛궞궟궠궡궢궣궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궸궹궺궻궼궽궾궿귂귃귅귆귇귉귊귋귌귍귎귏귒귔귕귖귗귘귙귚귛귝귞귟귡귢귣귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷�".split("");
			for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
			D[131] = "�����������������������������������������������������������������귺귻귽귾긂긃긄긅긆긇긊긌긎긏긐긑긒긓긕긖긗긘긙긚긛긜������긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯긲긳긵긶긹긻긼������긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗깘깙깚깛깞깢깣깤깦깧깪깫깭깮깯깱깲깳깴깵깶깷깺깾깿꺀꺁꺂꺃꺆꺇꺈꺉꺊꺋꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺿껁껂껃껅껆껇껈껉껊껋껎껒껓껔껕껖껗껚껛껝껞껟껠껡껢껣껤껥�".split("");
			for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
			D[132] = "�����������������������������������������������������������������껦껧껩껪껬껮껯껰껱껲껳껵껶껷껹껺껻껽껾껿꼀꼁꼂꼃꼄꼅������꼆꼉꼊꼋꼌꼎꼏꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣������꼤꼥꼦꼧꼨꼩꼪꼫꼮꼯꼱꼳꼵꼶꼷꼸꼹꼺꼻꼾꽀꽄꽅꽆꽇꽊꽋꽌꽍꽎꽏꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽞꽟꽠꽡꽢꽣꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽺꽻꽼꽽꽾꽿꾁꾂꾃꾅꾆꾇꾉꾊꾋꾌꾍꾎꾏꾒꾓꾔꾖꾗꾘꾙꾚꾛꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾺꾻꾽꾾�".split("");
			for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
			D[133] = "�����������������������������������������������������������������꾿꿁꿂꿃꿄꿅꿆꿊꿌꿏꿐꿑꿒꿓꿕꿖꿗꿘꿙꿚꿛꿝꿞꿟꿠꿡������꿢꿣꿤꿥꿦꿧꿪꿫꿬꿭꿮꿯꿲꿳꿵꿶꿷꿹꿺꿻꿼꿽꿾꿿뀂뀃������뀅뀆뀇뀈뀉뀊뀋뀍뀎뀏뀑뀒뀓뀕뀖뀗뀘뀙뀚뀛뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿끀끁끂끃끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끾끿낁낂낃낅낆낇낈낉낊낋낎낐낒낓낔낕낖낗낛낝낞낣낤�".split("");
			for(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}
			D[134] = "�����������������������������������������������������������������낥낦낧낪낰낲낶낷낹낺낻낽낾낿냀냁냂냃냆냊냋냌냍냎냏냒������냓냕냖냗냙냚냛냜냝냞냟냡냢냣냤냦냧냨냩냪냫냬냭냮냯냰������냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇넊넍넎넏넑넔넕넖넗넚넞넟넠넡넢넦넧넩넪넫넭넮넯넰넱넲넳넶넺넻넼넽넾넿녂녃녅녆녇녉녊녋녌녍녎녏녒녓녖녗녙녚녛녝녞녟녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷녺녻녽녾녿놁놃놄놅놆놇놊놌놎놏놐놑놕놖놗놙놚놛놝�".split("");
			for(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}
			D[135] = "�����������������������������������������������������������������놞놟놠놡놢놣놤놥놦놧놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸������놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇍뇎뇏뇑뇒뇓뇕������뇖뇗뇘뇙뇚뇛뇞뇠뇡뇢뇣뇤뇥뇦뇧뇪뇫뇭뇮뇯뇱뇲뇳뇴뇵뇶뇷뇸뇺뇼뇾뇿눀눁눂눃눆눇눉눊눍눎눏눐눑눒눓눖눘눚눛눜눝눞눟눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눵눶눷눸눹눺눻눽눾눿뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉙뉚뉛뉝뉞뉟뉡뉢뉣뉤뉥뉦뉧뉪뉫뉬뉭뉮�".split("");
			for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
			D[136] = "�����������������������������������������������������������������뉯뉰뉱뉲뉳뉶뉷뉸뉹뉺뉻뉽뉾뉿늀늁늂늃늆늇늈늊늋늌늍늎������늏늒늓늕늖늗늛늜늝늞늟늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷������늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇닊닋닍닎닏닑닓닔닕닖닗닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉댊댋댌댍댎댏댒댖댗댘댙댚댛댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓덗덙덚덝덠덡덢덣�".split("");
			for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
			D[137] = "�����������������������������������������������������������������덦덨덪덬덭덯덲덳덵덶덷덹덺덻덼덽덾덿뎂뎆뎇뎈뎉뎊뎋뎍������뎎뎏뎑뎒뎓뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎢뎣뎤뎥뎦뎧뎩뎪뎫뎭������뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됑됒됓됔됕됖됗됙됚됛됝됞됟됡됢됣됤됥됦됧됪됬됭됮됯됰됱됲됳됵됶됷됸됹됺됻됼됽됾됿둀둁둂둃둄�".split("");
			for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
			D[138] = "�����������������������������������������������������������������둅둆둇둈둉둊둋둌둍둎둏둒둓둕둖둗둙둚둛둜둝둞둟둢둤둦������둧둨둩둪둫둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒁뒂������뒃뒄뒅뒆뒇뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒞뒟뒠뒡뒢뒣뒥뒦뒧뒩뒪뒫뒭뒮뒯뒰뒱뒲뒳뒴뒶뒸뒺뒻뒼뒽뒾뒿듁듂듃듅듆듇듉듊듋듌듍듎듏듑듒듓듔듖듗듘듙듚듛듞듟듡듢듥듧듨듩듪듫듮듰듲듳듴듵듶듷듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓딖딗딙딚딝�".split("");
			for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
			D[139] = "�����������������������������������������������������������������딞딟딠딡딢딣딦딫딬딭딮딯딲딳딵딶딷딹딺딻딼딽딾딿땂땆������땇땈땉땊땎땏땑땒땓땕땖땗땘땙땚땛땞땢땣땤땥땦땧땨땩땪������땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떢떣떥떦떧떩떬떭떮떯떲떶떷떸떹떺떾떿뗁뗂뗃뗅뗆뗇뗈뗉뗊뗋뗎뗒뗓뗔뗕뗖뗗뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿�".split("");
			for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
			D[140] = "�����������������������������������������������������������������똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏똒똓똕똖똗똙똚똛똜똝������똞똟똠똡똢똣똤똦똧똨똩똪똫똭똮똯똰똱똲똳똵똶똷똸똹똺������똻똼똽똾똿뙀뙁뙂뙃뙄뙅뙆뙇뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙥뙦뙧뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚞뚟뚡뚢뚣뚥뚦뚧뚨뚩뚪뚭뚮뚯뚰뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂�".split("");
			for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
			D[141] = "�����������������������������������������������������������������뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛕뛖뛗뛘뛙뛚뛛뛜뛝������뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛱뛲뛳뛵뛶뛷뛹뛺������뛻뛼뛽뛾뛿뜂뜃뜄뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜪뜫뜭뜮뜱뜲뜳뜴뜵뜶뜷뜺뜼뜽뜾뜿띀띁띂띃띅띆띇띉띊띋띍띎띏띐띑띒띓띖띗띘띙띚띛띜띝띞띟띡띢띣띥띦띧띩띪띫띬띭띮띯띲띴띶띷띸띹띺띻띾띿랁랂랃랅랆랇랈랉랊랋랎랓랔랕랚랛랝랞�".split("");
			for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
			D[142] = "�����������������������������������������������������������������랟랡랢랣랤랥랦랧랪랮랯랰랱랲랳랶랷랹랺랻랼랽랾랿럀럁������럂럃럄럅럆럈럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝������럞럟럠럡럢럣럤럥럦럧럨럩럪럫럮럯럱럲럳럵럶럷럸럹럺럻럾렂렃렄렅렆렊렋렍렎렏렑렒렓렔렕렖렗렚렜렞렟렠렡렢렣렦렧렩렪렫렭렮렯렰렱렲렳렶렺렻렼렽렾렿롁롂롃롅롆롇롈롉롊롋롌롍롎롏롐롒롔롕롖롗롘롙롚롛롞롟롡롢롣롥롦롧롨롩롪롫롮롰롲롳롴롵롶롷롹롺롻롽롾롿뢀뢁뢂뢃뢄�".split("");
			for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
			D[143] = "�����������������������������������������������������������������뢅뢆뢇뢈뢉뢊뢋뢌뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟������뢠뢡뢢뢣뢤뢥뢦뢧뢩뢪뢫뢬뢭뢮뢯뢱뢲뢳뢵뢶뢷뢹뢺뢻뢼뢽������뢾뢿룂룄룆룇룈룉룊룋룍룎룏룑룒룓룕룖룗룘룙룚룛룜룞룠룢룣룤룥룦룧룪룫룭룮룯룱룲룳룴룵룶룷룺룼룾룿뤀뤁뤂뤃뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤙뤚뤛뤜뤝뤞뤟뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤾뤿륁륂륃륅륆륇륈륉륊륋륍륎륐륒륓륔륕륖륗�".split("");
			for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
			D[144] = "�����������������������������������������������������������������륚륛륝륞륟륡륢륣륤륥륦륧륪륬륮륯륰륱륲륳륶륷륹륺륻륽������륾륿릀릁릂릃릆릈릋릌릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞������릟릠릡릢릣릤릥릦릧릨릩릪릫릮릯릱릲릳릵릶릷릸릹릺릻릾맀맂맃맄맅맆맇맊맋맍맓맔맕맖맗맚맜맟맠맢맦맧맩맪맫맭맮맯맰맱맲맳맶맻맼맽맾맿먂먃먄먅먆먇먉먊먋먌먍먎먏먐먑먒먓먔먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷먺먻먽먾먿멁멃멄멅멆�".split("");
			for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
			D[145] = "�����������������������������������������������������������������멇멊멌멏멐멑멒멖멗멙멚멛멝멞멟멠멡멢멣멦멪멫멬멭멮멯������멲멳멵멶멷멹멺멻멼멽멾멿몀몁몂몆몈몉몊몋몍몎몏몐몑몒������몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧몪몭몮몯몱몳몴몵몶몷몺몼몾몿뫀뫁뫂뫃뫅뫆뫇뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫽뫾뫿묁묂묃묅묆묇묈묉묊묋묌묎묐묒묓묔묕묖묗묙묚묛묝묞묟묡묢묣묤묥묦묧�".split("");
			for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
			D[146] = "�����������������������������������������������������������������묨묪묬묭묮묯묰묱묲묳묷묹묺묿뭀뭁뭂뭃뭆뭈뭊뭋뭌뭎뭑뭒������뭓뭕뭖뭗뭙뭚뭛뭜뭝뭞뭟뭠뭢뭤뭥뭦뭧뭨뭩뭪뭫뭭뭮뭯뭰뭱������뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮉뮊뮋뮍뮎뮏뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮥뮦뮧뮩뮪뮫뮭뮮뮯뮰뮱뮲뮳뮵뮶뮸뮹뮺뮻뮼뮽뮾뮿믁믂믃믅믆믇믉믊믋믌믍믎믏믑믒믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷믺믻믽믾밁�".split("");
			for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
			D[147] = "�����������������������������������������������������������������밃밄밅밆밇밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵������밶밷밹밺밻밼밽밾밿뱂뱆뱇뱈뱊뱋뱎뱏뱑뱒뱓뱔뱕뱖뱗뱘뱙������뱚뱛뱜뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃벆벇벉벊벍벏벐벑벒벓벖벘벛벜벝벞벟벢벣벥벦벩벪벫벬벭벮벯벲벶벷벸벹벺벻벾벿볁볂볃볅볆볇볈볉볊볋볌볎볒볓볔볖볗볙볚볛볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳볷볹볺볻볽�".split("");
			for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
			D[148] = "�����������������������������������������������������������������볾볿봀봁봂봃봆봈봊봋봌봍봎봏봑봒봓봕봖봗봘봙봚봛봜봝������봞봟봠봡봢봣봥봦봧봨봩봪봫봭봮봯봰봱봲봳봴봵봶봷봸봹������봺봻봼봽봾봿뵁뵂뵃뵄뵅뵆뵇뵊뵋뵍뵎뵏뵑뵒뵓뵔뵕뵖뵗뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵥뵦뵧뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿붂붃붅붆붋붌붍붎붏붒붔붖붗붘붛붝붞붟붠붡붢붣붥붦붧붨붩붪붫붬붭붮붯붱붲붳붴붵붶붷붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑�".split("");
			for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
			D[149] = "�����������������������������������������������������������������뷒뷓뷖뷗뷙뷚뷛뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷪뷫뷬뷭뷮뷯뷱������뷲뷳뷵뷶뷷뷹뷺뷻뷼뷽뷾뷿븁븂븄븆븇븈븉븊븋븎븏븑븒븓������븕븖븗븘븙븚븛븞븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿빀빁빂빃빆빇빉빊빋빍빏빐빑빒빓빖빘빜빝빞빟빢빣빥빦빧빩빫빬빭빮빯빲빶빷빸빹빺빾빿뺁뺂뺃뺅뺆뺇뺈뺉뺊뺋뺎뺒뺓뺔뺕뺖뺗뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷�".split("");
			for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
			D[150] = "�����������������������������������������������������������������뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻒뻓������뻕뻖뻙뻚뻛뻜뻝뻞뻟뻡뻢뻦뻧뻨뻩뻪뻫뻭뻮뻯뻰뻱뻲뻳뻴뻵������뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼂뼃뼄뼅뼆뼇뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼚뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽂뽃뽅뽆뽇뽉뽊뽋뽌뽍뽎뽏뽒뽓뽔뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂�".split("");
			for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
			D[151] = "�����������������������������������������������������������������뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾕뾖뾗뾘뾙뾚뾛뾜뾝������뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾱뾲뾳뾴뾵뾶뾷뾸������뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿆뿇뿈뿉뿊뿋뿎뿏뿑뿒뿓뿕뿖뿗뿘뿙뿚뿛뿝뿞뿠뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀽쀾쀿�".split("");
			for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
			D[152] = "�����������������������������������������������������������������쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁒쁓쁔쁕쁖쁗쁙쁚쁛������쁝쁞쁟쁡쁢쁣쁤쁥쁦쁧쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹������쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삒삓삕삖삗삙삚삛삜삝삞삟삢삤삦삧삨삩삪삫삮삱삲삷삸삹삺삻삾샂샃샄샆샇샊샋샍샎샏샑샒샓샔샕샖샗샚샞샟샠샡샢샣샦샧샩샪샫샭샮샯샰샱샲샳샶샸샺샻샼샽샾샿섁섂섃섅섆섇섉섊섋섌섍섎섏섑섒섓섔섖섗섘섙섚섛섡섢섥섨섩섪섫섮�".split("");
			for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
			D[153] = "�����������������������������������������������������������������섲섳섴섵섷섺섻섽섾섿셁셂셃셄셅셆셇셊셎셏셐셑셒셓셖셗������셙셚셛셝셞셟셠셡셢셣셦셪셫셬셭셮셯셱셲셳셵셶셷셹셺셻������셼셽셾셿솀솁솂솃솄솆솇솈솉솊솋솏솑솒솓솕솗솘솙솚솛솞솠솢솣솤솦솧솪솫솭솮솯솱솲솳솴솵솶솷솸솹솺솻솼솾솿쇀쇁쇂쇃쇅쇆쇇쇉쇊쇋쇍쇎쇏쇐쇑쇒쇓쇕쇖쇙쇚쇛쇜쇝쇞쇟쇡쇢쇣쇥쇦쇧쇩쇪쇫쇬쇭쇮쇯쇲쇴쇵쇶쇷쇸쇹쇺쇻쇾쇿숁숂숃숅숆숇숈숉숊숋숎숐숒숓숔숕숖숗숚숛숝숞숡숢숣�".split("");
			for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
			D[154] = "�����������������������������������������������������������������숤숥숦숧숪숬숮숰숳숵숶숷숸숹숺숻숼숽숾숿쉀쉁쉂쉃쉄쉅������쉆쉇쉉쉊쉋쉌쉍쉎쉏쉒쉓쉕쉖쉗쉙쉚쉛쉜쉝쉞쉟쉡쉢쉣쉤쉦������쉧쉨쉩쉪쉫쉮쉯쉱쉲쉳쉵쉶쉷쉸쉹쉺쉻쉾슀슂슃슄슅슆슇슊슋슌슍슎슏슑슒슓슔슕슖슗슙슚슜슞슟슠슡슢슣슦슧슩슪슫슮슯슰슱슲슳슶슸슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛싞싟싡싢싥싦싧싨싩싪싮싰싲싳싴싵싷싺싽싾싿쌁쌂쌃쌄쌅쌆쌇쌊쌋쌎쌏�".split("");
			for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
			D[155] = "�����������������������������������������������������������������쌐쌑쌒쌖쌗쌙쌚쌛쌝쌞쌟쌠쌡쌢쌣쌦쌧쌪쌫쌬쌭쌮쌯쌰쌱쌲������쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썆썇썈썉썊썋썌썍������썎썏썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧썪썫썭썮썯썱썳썴썵썶썷썺썻썾썿쎀쎁쎂쎃쎅쎆쎇쎉쎊쎋쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏚�".split("");
			for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
			D[156] = "�����������������������������������������������������������������쏛쏝쏞쏡쏣쏤쏥쏦쏧쏪쏫쏬쏮쏯쏰쏱쏲쏳쏶쏷쏹쏺쏻쏼쏽쏾������쏿쐀쐁쐂쐃쐄쐅쐆쐇쐉쐊쐋쐌쐍쐎쐏쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚������쐛쐜쐝쐞쐟쐠쐡쐢쐣쐥쐦쐧쐨쐩쐪쐫쐭쐮쐯쐱쐲쐳쐵쐶쐷쐸쐹쐺쐻쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑦쑧쑩쑪쑫쑭쑮쑯쑰쑱쑲쑳쑶쑷쑸쑺쑻쑼쑽쑾쑿쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒕쒖쒗쒘쒙쒚쒛쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩�".split("");
			for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
			D[157] = "�����������������������������������������������������������������쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒹쒺쒻쒽쒾쒿쓀쓁쓂쓃쓄쓅������쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟������쓠쓡쓢쓣쓤쓥쓦쓧쓨쓪쓫쓬쓭쓮쓯쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂씃씄씅씆씇씈씉씊씋씍씎씏씑씒씓씕씖씗씘씙씚씛씝씞씟씠씡씢씣씤씥씦씧씪씫씭씮씯씱씲씳씴씵씶씷씺씼씾씿앀앁앂앃앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩앪앫앬앭앮앯앲앶앷앸앹앺앻앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔�".split("");
			for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
			D[158] = "�����������������������������������������������������������������얖얙얚얛얝얞얟얡얢얣얤얥얦얧얨얪얫얬얭얮얯얰얱얲얳얶������얷얺얿엀엁엂엃엋엍엏엒엓엕엖엗엙엚엛엜엝엞엟엢엤엦엧������엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑옒옓옔옕옖옗옚옝옞옟옠옡옢옣옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉왊왋왌왍왎왏왒왖왗왘왙왚왛왞왟왡왢왣왤왥왦왧왨왩왪왫왭왮왰왲왳왴왵왶왷왺왻왽왾왿욁욂욃욄욅욆욇욊욌욎욏욐욑욒욓욖욗욙욚욛욝욞욟욠욡욢욣욦�".split("");
			for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
			D[159] = "�����������������������������������������������������������������욨욪욫욬욭욮욯욲욳욵욶욷욻욼욽욾욿웂웄웆웇웈웉웊웋웎������웏웑웒웓웕웖웗웘웙웚웛웞웟웢웣웤웥웦웧웪웫웭웮웯웱웲������웳웴웵웶웷웺웻웼웾웿윀윁윂윃윆윇윉윊윋윍윎윏윐윑윒윓윖윘윚윛윜윝윞윟윢윣윥윦윧윩윪윫윬윭윮윯윲윴윶윸윹윺윻윾윿읁읂읃읅읆읇읈읉읋읎읐읙읚읛읝읞읟읡읢읣읤읥읦읧읩읪읬읭읮읯읰읱읲읳읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛잜잝잞잟잢잧잨잩잪잫잮잯잱잲잳잵잶잷�".split("");
			for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
			D[160] = "�����������������������������������������������������������������잸잹잺잻잾쟂쟃쟄쟅쟆쟇쟊쟋쟍쟏쟑쟒쟓쟔쟕쟖쟗쟙쟚쟛쟜������쟞쟟쟠쟡쟢쟣쟥쟦쟧쟩쟪쟫쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺������쟻쟼쟽쟾쟿젂젃젅젆젇젉젋젌젍젎젏젒젔젗젘젙젚젛젞젟젡젢젣젥젦젧젨젩젪젫젮젰젲젳젴젵젶젷젹젺젻젽젾젿졁졂졃졄졅졆졇졊졋졎졏졐졑졒졓졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯졲졳졵졶졷졹졻졼졽졾졿좂좄좈좉좊좎좏좐좑좒좓좕좖좗좘좙좚좛좜좞좠좢좣좤�".split("");
			for(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}
			D[161] = "�����������������������������������������������������������������좥좦좧좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좾좿죀죁������죂죃죅죆죇죉죊죋죍죎죏죐죑죒죓죖죘죚죛죜죝죞죟죢죣죥������죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죶죷죸죹죺죻죾죿줁줂줃줇줈줉줊줋줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈〉《》「」『』【】±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢�".split("");
			for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
			D[162] = "�����������������������������������������������������������������줐줒줓줔줕줖줗줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫������줭줮줯줰줱줲줳줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇������쥈쥉쥊쥋쥌쥍쥎쥏쥒쥓쥕쥖쥗쥙쥚쥛쥜쥝쥞쥟쥢쥤쥥쥦쥧쥨쥩쥪쥫쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®������������������������".split("");
			for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
			D[163] = "�����������������������������������������������������������������쥱쥲쥳쥵쥶쥷쥸쥹쥺쥻쥽쥾쥿즀즁즂즃즄즅즆즇즊즋즍즎즏������즑즒즓즔즕즖즗즚즜즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮������즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿짂짃짅짆짉짋짌짍짎짏짒짔짗짘짛！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￦］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
			for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
			D[164] = "�����������������������������������������������������������������짞짟짡짣짥짦짨짩짪짫짮짲짳짴짵짶짷짺짻짽짾짿쨁쨂쨃쨄������쨅쨆쨇쨊쨎쨏쨐쨑쨒쨓쨕쨖쨗쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥������쨦쨧쨨쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ�".split("");
			for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
			D[165] = "�����������������������������������������������������������������쩇쩈쩉쩊쩋쩎쩏쩑쩒쩓쩕쩖쩗쩘쩙쩚쩛쩞쩢쩣쩤쩥쩦쩧쩩쩪������쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩾쩿쪀쪁쪂쪃쪅쪆������쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ�����ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������".split("");
			for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
			D[166] = "�����������������������������������������������������������������쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪾쪿쫁쫂쫃쫅������쫆쫇쫈쫉쫊쫋쫎쫐쫒쫔쫕쫖쫗쫚쫛쫜쫝쫞쫟쫡쫢쫣쫤쫥쫦쫧������쫨쫩쫪쫫쫭쫮쫯쫰쫱쫲쫳쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃╄╅╆╇╈╉╊���������������������������".split("");
			for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
			D[167] = "�����������������������������������������������������������������쬋쬌쬍쬎쬏쬑쬒쬓쬕쬖쬗쬙쬚쬛쬜쬝쬞쬟쬢쬣쬤쬥쬦쬧쬨쬩������쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭂쭃쭄������쭅쭆쭇쭊쭋쭍쭎쭏쭑쭒쭓쭔쭕쭖쭗쭚쭛쭜쭞쭟쭠쭡쭢쭣쭥쭦쭧쭨쭩쭪쭫쭬㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎀㎁㎂㎃㎄㎺㎻㎼㎽㎾㎿㎐㎑㎒㎓㎔Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆����������������".split("");
			for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
			D[168] = "�����������������������������������������������������������������쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈������쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮝쮞쮟쮠쮡쮢쮣������쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄ÆÐªĦ�Ĳ�ĿŁØŒºÞŦŊ�㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮½⅓⅔¼¾⅛⅜⅝⅞�".split("");
			for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
			D[169] = "�����������������������������������������������������������������쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟������쯠쯡쯢쯣쯥쯦쯨쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼������쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찎찏찑찒찓찕찖찗찘찙찚찛찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂¹²³⁴ⁿ₁₂₃₄�".split("");
			for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
			D[170] = "�����������������������������������������������������������������찥찦찪찫찭찯찱찲찳찴찵찶찷찺찿챀챁챂챃챆챇챉챊챋챍챎������챏챐챑챒챓챖챚챛챜챝챞챟챡챢챣챥챧챩챪챫챬챭챮챯챱챲������챳챴챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
			for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
			D[171] = "�����������������������������������������������������������������첔첕첖첗첚첛첝첞첟첡첢첣첤첥첦첧첪첮첯첰첱첲첳첶첷첹������첺첻첽첾첿쳀쳁쳂쳃쳆쳈쳊쳋쳌쳍쳎쳏쳑쳒쳓쳕쳖쳗쳘쳙쳚������쳛쳜쳝쳞쳟쳠쳡쳢쳣쳥쳦쳧쳨쳩쳪쳫쳭쳮쳯쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
			for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
			D[172] = "�����������������������������������������������������������������쳾쳿촀촂촃촄촅촆촇촊촋촍촎촏촑촒촓촔촕촖촗촚촜촞촟촠������촡촢촣촥촦촧촩촪촫촭촮촯촰촱촲촳촴촵촶촷촸촺촻촼촽촾������촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛쵝쵞쵟АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
			for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
			D[173] = "�����������������������������������������������������������������쵡쵢쵣쵥쵦쵧쵨쵩쵪쵫쵮쵰쵲쵳쵴쵵쵶쵷쵹쵺쵻쵼쵽쵾쵿춀������춁춂춃춄춅춆춇춉춊춋춌춍춎춏춐춑춒춓춖춗춙춚춛춝춞춟������춠춡춢춣춦춨춪춫춬춭춮춯춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췅�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
			D[174] = "�����������������������������������������������������������������췆췇췈췉췊췋췍췎췏췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡������췢췣췤췥췦췧췩췪췫췭췮췯췱췲췳췴췵췶췷췺췼췾췿츀츁츂������츃츅츆츇츉츊츋츍츎츏츐츑츒츓츕츖츗츘츚츛츜츝츞츟츢츣츥츦츧츩츪츫�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
			D[175] = "�����������������������������������������������������������������츬츭츮츯츲츴츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉������칊칋칌칍칎칏칐칑칒칓칔칕칖칗칚칛칝칞칢칣칤칥칦칧칪칬������칮칯칰칱칲칳칶칷칹칺칻칽칾칿캀캁캂캃캆캈캊캋캌캍캎캏캒캓캕캖캗캙�����������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
			D[176] = "�����������������������������������������������������������������캚캛캜캝캞캟캢캦캧캨캩캪캫캮캯캰캱캲캳캴캵캶캷캸캹캺������캻캼캽캾캿컀컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕������컖컗컘컙컚컛컜컝컞컟컠컡컢컣컦컧컩컪컭컮컯컰컱컲컳컶컺컻컼컽컾컿가각간갇갈갉갊감갑값갓갔강갖갗같갚갛개객갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆�".split("");
			for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
			D[177] = "�����������������������������������������������������������������켂켃켅켆켇켉켊켋켌켍켎켏켒켔켖켗켘켙켚켛켝켞켟켡켢켣������켥켦켧켨켩켪켫켮켲켳켴켵켶켷켹켺켻켼켽켾켿콀콁콂콃콄������콅콆콇콈콉콊콋콌콍콎콏콐콑콒콓콖콗콙콚콛콝콞콟콠콡콢콣콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸�".split("");
			for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
			D[178] = "�����������������������������������������������������������������콭콮콯콲콳콵콶콷콹콺콻콼콽콾콿쾁쾂쾃쾄쾆쾇쾈쾉쾊쾋쾍������쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾢쾣쾤쾥쾦쾧쾩������쾪쾫쾬쾭쾮쾯쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿅쿆쿇쿈쿉쿊쿋깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙�".split("");
			for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
			D[179] = "�����������������������������������������������������������������쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿢쿣쿥쿦쿧쿩������쿪쿫쿬쿭쿮쿯쿲쿴쿶쿷쿸쿹쿺쿻쿽쿾쿿퀁퀂퀃퀅퀆퀇퀈퀉퀊������퀋퀌퀍퀎퀏퀐퀒퀓퀔퀕퀖퀗퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫났낭낮낯낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝�".split("");
			for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
			D[180] = "�����������������������������������������������������������������퀮퀯퀰퀱퀲퀳퀶퀷퀹퀺퀻퀽퀾퀿큀큁큂큃큆큈큊큋큌큍큎큏������큑큒큓큕큖큗큙큚큛큜큝큞큟큡큢큣큤큥큦큧큨큩큪큫큮큯������큱큲큳큵큶큷큸큹큺큻큾큿킀킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫달닭닮닯닳담답닷닸당닺닻닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥�".split("");
			for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
			D[181] = "�����������������������������������������������������������������킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣킦킧킩킪킫킭킮킯킰킱킲������킳킶킸킺킻킼킽킾킿탂탃탅탆탇탊탋탌탍탎탏탒탖탗탘탙탚������탛탞탟탡탢탣탥탦탧탨탩탪탫탮탲탳탴탵탶탷탹탺탻탼탽탾탿턀턁턂턃턄덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸�".split("");
			for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
			D[182] = "�����������������������������������������������������������������턅턆턇턈턉턊턋턌턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟������턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯턲턳턵턶턷턹턻턼턽턾������턿텂텆텇텈텉텊텋텎텏텑텒텓텕텖텗텘텙텚텛텞텠텢텣텤텥텦텧텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗�".split("");
			for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
			D[183] = "�����������������������������������������������������������������텮텯텰텱텲텳텴텵텶텷텸텹텺텻텽텾텿톀톁톂톃톅톆톇톉톊������톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟톢톣톥톦톧������톩톪톫톬톭톮톯톲톴톶톷톸톹톻톽톾톿퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩�".split("");
			for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
			D[184] = "�����������������������������������������������������������������퇐퇑퇒퇓퇔퇕퇖퇗퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪������퇫퇬퇭퇮퇯퇰퇱퇲퇳퇵퇶퇷퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆������툈툊툋툌툍툎툏툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많맏말맑맒맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼�".split("");
			for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
			D[185] = "�����������������������������������������������������������������툪툫툮툯툱툲툳툵툶툷툸툹툺툻툾퉀퉂퉃퉄퉅퉆퉇퉉퉊퉋퉌������퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉝퉞퉟퉠퉡퉢퉣퉥퉦퉧퉨������퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바박밖밗반받발밝밞밟밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗�".split("");
			for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
			D[186] = "�����������������������������������������������������������������튍튎튏튒튓튔튖튗튘튙튚튛튝튞튟튡튢튣튥튦튧튨튩튪튫튭������튮튯튰튲튳튴튵튶튷튺튻튽튾틁틃틄틅틆틇틊틌틍틎틏틐틑������틒틓틕틖틗틙틚틛틝틞틟틠틡틢틣틦틧틨틩틪틫틬틭틮틯틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤�".split("");
			for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
			D[187] = "�����������������������������������������������������������������틻틼틽틾틿팂팄팆팇팈팉팊팋팏팑팒팓팕팗팘팙팚팛팞팢팣������팤팦팧팪팫팭팮팯팱팲팳팴팵팶팷팺팾팿퍀퍁퍂퍃퍆퍇퍈퍉������퍊퍋퍌퍍퍎퍏퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤�".split("");
			for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
			D[188] = "�����������������������������������������������������������������퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍾퍿펁펂펃펅펆펇������펈펉펊펋펎펒펓펔펕펖펗펚펛펝펞펟펡펢펣펤펥펦펧펪펬펮������펯펰펱펲펳펵펶펷펹펺펻펽펾펿폀폁폂폃폆폇폊폋폌폍폎폏폑폒폓폔폕폖샥샨샬샴샵샷샹섀섄섈섐섕서석섞섟선섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭�".split("");
			for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
			D[189] = "�����������������������������������������������������������������폗폙폚폛폜폝폞폟폠폢폤폥폦폧폨폩폪폫폮폯폱폲폳폵폶폷������폸폹폺폻폾퐀퐂퐃퐄퐅퐆퐇퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖������퐗퐘퐙퐚퐛퐜퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰�".split("");
			for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
			D[190] = "�����������������������������������������������������������������퐸퐹퐺퐻퐼퐽퐾퐿푁푂푃푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓������푔푕푖푗푘푙푚푛푝푞푟푡푢푣푥푦푧푨푩푪푫푬푮푰푱푲������푳푴푵푶푷푺푻푽푾풁풃풄풅풆풇풊풌풎풏풐풑풒풓풕풖풗풘풙풚풛풜풝쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄업없엇었엉엊엌엎�".split("");
			for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
			D[191] = "�����������������������������������������������������������������풞풟풠풡풢풣풤풥풦풧풨풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸������풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓍퓎퓏퓑퓒퓓퓕������퓖퓗퓘퓙퓚퓛퓝퓞퓠퓡퓢퓣퓤퓥퓦퓧퓩퓪퓫퓭퓮퓯퓱퓲퓳퓴퓵퓶퓷퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염엽엾엿였영옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨�".split("");
			for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
			D[192] = "�����������������������������������������������������������������퓾퓿픀픁픂픃픅픆픇픉픊픋픍픎픏픐픑픒픓픖픘픙픚픛픜픝������픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷������픸픹픺픻픾픿핁핂핃핅핆핇핈핉핊핋핎핐핒핓핔핕핖핗핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응읒읓읔읕읖읗의읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊�".split("");
			for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
			D[193] = "�����������������������������������������������������������������핤핦핧핪핬핮핯핰핱핲핳핶핷핹핺핻핽핾핿햀햁햂햃햆햊햋������햌햍햎햏햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤햦햧������햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓�".split("");
			for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
			D[194] = "�����������������������������������������������������������������헊헋헍헎헏헑헓헔헕헖헗헚헜헞헟헠헡헢헣헦헧헩헪헫헭헮������헯헰헱헲헳헶헸헺헻헼헽헾헿혂혃혅혆혇혉혊혋혌혍혎혏혒������혖혗혘혙혚혛혝혞혟혡혢혣혥혦혧혨혩혪혫혬혮혯혰혱혲혳혴혵혶혷혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻�".split("");
			for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
			D[195] = "�����������������������������������������������������������������혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝홞홟홠홡������홢홣홤홥홦홨홪홫홬홭홮홯홲홳홵홶홷홸홹홺홻홼홽홾홿횀������횁횂횄횆횇횈횉횊횋횎횏횑횒횓횕횖횗횘횙횚횛횜횞횠횢횣횤횥횦횧횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층�".split("");
			for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
			D[196] = "�����������������������������������������������������������������횫횭횮횯횱횲횳횴횵횶횷횸횺횼횽횾횿훀훁훂훃훆훇훉훊훋������훍훎훏훐훒훓훕훖훘훚훛훜훝훞훟훡훢훣훥훦훧훩훪훫훬훭������훮훯훱훲훳훴훶훷훸훹훺훻훾훿휁휂휃휅휆휇휈휉휊휋휌휍휎휏휐휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼�".split("");
			for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
			D[197] = "�����������������������������������������������������������������휕휖휗휚휛휝휞휟휡휢휣휤휥휦휧휪휬휮휯휰휱휲휳휶휷휹������휺휻휽휾휿흀흁흂흃흅흆흈흊흋흌흍흎흏흒흓흕흚흛흜흝흞������흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵흶흷흸흹흺흻흾흿힀힂힃힄힅힆힇힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜�".split("");
			for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
			D[198] = "�����������������������������������������������������������������힍힎힏힑힒힓힔힕힖힗힚힜힞힟힠힡힢힣������������������������������������������������������������������������������퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁�".split("");
			for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
			D[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠�".split("");
			for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
			D[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝�".split("");
			for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
			D[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕�".split("");
			for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
			D[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢�".split("");
			for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
			D[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械�".split("");
			for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
			D[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜�".split("");
			for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
			D[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾�".split("");
			for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
			D[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴�".split("");
			for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
			D[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣�".split("");
			for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
			D[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩羅蘿螺裸邏那樂洛烙珞落諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉�".split("");
			for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
			D[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������納臘蠟衲囊娘廊朗浪狼郎乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧老蘆虜路露駑魯鷺碌祿綠菉錄鹿論壟弄濃籠聾膿農惱牢磊腦賂雷尿壘屢樓淚漏累縷陋嫩訥杻紐勒肋凜凌稜綾能菱陵尼泥匿溺多茶�".split("");
			for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
			D[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃�".split("");
			for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
			D[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅�".split("");
			for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
			D[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣�".split("");
			for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
			D[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼�".split("");
			for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
			D[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬�".split("");
			for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
			D[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅�".split("");
			for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
			D[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文�".split("");
			for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
			D[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑�".split("");
			for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
			D[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖�".split("");
			for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
			D[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦�".split("");
			for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
			D[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥�".split("");
			for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
			D[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索�".split("");
			for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
			D[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署�".split("");
			for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
			D[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬�".split("");
			for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
			D[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁�".split("");
			for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
			D[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧�".split("");
			for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
			D[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁�".split("");
			for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
			D[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額�".split("");
			for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
			D[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬�".split("");
			for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
			D[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒�".split("");
			for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
			D[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳�".split("");
			for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
			D[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療�".split("");
			for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
			D[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓�".split("");
			for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
			D[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜�".split("");
			for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
			D[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼�".split("");
			for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
			D[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄�".split("");
			for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
			D[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長�".split("");
			for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
			D[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱�".split("");
			for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
			D[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖�".split("");
			for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
			D[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫�".split("");
			for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
			D[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只�".split("");
			for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
			D[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯�".split("");
			for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
			D[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策�".split("");
			for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
			D[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢�".split("");
			for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
			D[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃�".split("");
			for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
			D[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託�".split("");
			for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
			D[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑�".split("");
			for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
			D[248] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃�".split("");
			for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
			D[249] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航�".split("");
			for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
			D[250] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型�".split("");
			for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
			D[251] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵�".split("");
			for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
			D[252] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆�".split("");
			for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
			D[253] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰�".split("");
			for(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}
			return {"enc": e, "dec": d }; })();
			cptable[950] = (function(){ var d = [], e = {}, D = [], j;
			D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
			D[161] = "����������������������������������������������������������������　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚����������������������������������﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢﹣﹤﹥﹦～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／�".split("");
			for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
			D[162] = "����������������������������������������������������������������＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁▂▃▄▅▆▇█▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭����������������������������������╮╰╯═╞╪╡◢◣◥◤╱╲╳０１２３４５６７８９ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ〡〢〣〤〥〦〧〨〩十卄卅ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖ�".split("");
			for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
			D[163] = "����������������������������������������������������������������ｗｘｙｚΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ����������������������������������ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ˙ˉˊˇˋ���������������������������������€������������������������������".split("");
			for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
			D[164] = "����������������������������������������������������������������一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才����������������������������������丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙�".split("");
			for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
			D[165] = "����������������������������������������������������������������世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外����������������������������������央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全�".split("");
			for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
			D[166] = "����������������������������������������������������������������共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年����������������������������������式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣�".split("");
			for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
			D[167] = "����������������������������������������������������������������作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍����������������������������������均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠�".split("");
			for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
			D[168] = "����������������������������������������������������������������杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒����������������������������������芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵�".split("");
			for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
			D[169] = "����������������������������������������������������������������咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居����������������������������������屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊�".split("");
			for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
			D[170] = "����������������������������������������������������������������昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠����������������������������������炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附�".split("");
			for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
			D[171] = "����������������������������������������������������������������陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品����������������������������������哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷�".split("");
			for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
			D[172] = "����������������������������������������������������������������拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗����������������������������������活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄�".split("");
			for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
			D[173] = "����������������������������������������������������������������耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥����������������������������������迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪�".split("");
			for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
			D[174] = "����������������������������������������������������������������哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙����������������������������������恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓�".split("");
			for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
			D[175] = "����������������������������������������������������������������浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷����������������������������������砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃�".split("");
			for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
			D[176] = "����������������������������������������������������������������虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡����������������������������������陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀�".split("");
			for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
			D[177] = "����������������������������������������������������������������娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽����������������������������������情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺�".split("");
			for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
			D[178] = "����������������������������������������������������������������毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶����������������������������������瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼�".split("");
			for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
			D[179] = "����������������������������������������������������������������莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途����������������������������������部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠�".split("");
			for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
			D[180] = "����������������������������������������������������������������婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍����������������������������������插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋�".split("");
			for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
			D[181] = "����������������������������������������������������������������溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘����������������������������������窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁�".split("");
			for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
			D[182] = "����������������������������������������������������������������詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑����������������������������������間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼�".split("");
			for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
			D[183] = "����������������������������������������������������������������媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業����������������������������������楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督�".split("");
			for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
			D[184] = "����������������������������������������������������������������睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫����������������������������������腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊�".split("");
			for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
			D[185] = "����������������������������������������������������������������辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴����������������������������������飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇�".split("");
			for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
			D[186] = "����������������������������������������������������������������愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢����������������������������������滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬�".split("");
			for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
			D[187] = "����������������������������������������������������������������罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤����������������������������������說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜�".split("");
			for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
			D[188] = "����������������������������������������������������������������劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂����������������������������������慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃�".split("");
			for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
			D[189] = "����������������������������������������������������������������瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯����������������������������������翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞�".split("");
			for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
			D[190] = "����������������������������������������������������������������輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉����������������������������������鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡�".split("");
			for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
			D[191] = "����������������������������������������������������������������濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊����������������������������������縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚�".split("");
			for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
			D[192] = "����������������������������������������������������������������錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇����������������������������������嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬�".split("");
			for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
			D[193] = "����������������������������������������������������������������瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪����������������������������������薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁�".split("");
			for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
			D[194] = "����������������������������������������������������������������駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘����������������������������������癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦�".split("");
			for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
			D[195] = "����������������������������������������������������������������鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸����������������������������������獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類�".split("");
			for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
			D[196] = "����������������������������������������������������������������願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼����������������������������������纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴�".split("");
			for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
			D[197] = "����������������������������������������������������������������護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬����������������������������������禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒�".split("");
			for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
			D[198] = "����������������������������������������������������������������讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲���������������������������������������������������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
			D[201] = "����������������������������������������������������������������乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕����������������������������������氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋�".split("");
			for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
			D[202] = "����������������������������������������������������������������汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘����������������������������������吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇�".split("");
			for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
			D[203] = "����������������������������������������������������������������杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓����������������������������������芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢�".split("");
			for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
			D[204] = "����������������������������������������������������������������坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋����������������������������������怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲�".split("");
			for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
			D[205] = "����������������������������������������������������������������泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺����������������������������������矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏�".split("");
			for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
			D[206] = "����������������������������������������������������������������哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛����������������������������������峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺�".split("");
			for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
			D[207] = "����������������������������������������������������������������柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂����������������������������������洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀�".split("");
			for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
			D[208] = "����������������������������������������������������������������穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪����������������������������������苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱�".split("");
			for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
			D[209] = "����������������������������������������������������������������唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧����������������������������������恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤�".split("");
			for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
			D[210] = "����������������������������������������������������������������毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸����������������������������������牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐�".split("");
			for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
			D[211] = "����������������������������������������������������������������笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢����������������������������������荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐�".split("");
			for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
			D[212] = "����������������������������������������������������������������酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅����������������������������������唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏�".split("");
			for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
			D[213] = "����������������������������������������������������������������崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟����������������������������������捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉�".split("");
			for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
			D[214] = "����������������������������������������������������������������淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏����������������������������������痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟�".split("");
			for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
			D[215] = "����������������������������������������������������������������耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷����������������������������������蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪�".split("");
			for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
			D[216] = "����������������������������������������������������������������釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷����������������������������������堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔�".split("");
			for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
			D[217] = "����������������������������������������������������������������惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒����������������������������������晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞�".split("");
			for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
			D[218] = "����������������������������������������������������������������湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖����������������������������������琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥�".split("");
			for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
			D[219] = "����������������������������������������������������������������罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳����������������������������������菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺�".split("");
			for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
			D[220] = "����������������������������������������������������������������軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈����������������������������������隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆�".split("");
			for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
			D[221] = "����������������������������������������������������������������媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤����������������������������������搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼�".split("");
			for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
			D[222] = "����������������������������������������������������������������毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓����������������������������������煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓�".split("");
			for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
			D[223] = "����������������������������������������������������������������稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯����������������������������������腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤�".split("");
			for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
			D[224] = "����������������������������������������������������������������觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿����������������������������������遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠�".split("");
			for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
			D[225] = "����������������������������������������������������������������凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠����������������������������������寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉�".split("");
			for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
			D[226] = "����������������������������������������������������������������榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊����������������������������������漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓�".split("");
			for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
			D[227] = "����������������������������������������������������������������禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞����������������������������������耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻�".split("");
			for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
			D[228] = "����������������������������������������������������������������裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍����������������������������������銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘�".split("");
			for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
			D[229] = "����������������������������������������������������������������噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉����������������������������������憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒�".split("");
			for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
			D[230] = "����������������������������������������������������������������澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙����������������������������������獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟�".split("");
			for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
			D[231] = "����������������������������������������������������������������膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢����������������������������������蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧�".split("");
			for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
			D[232] = "����������������������������������������������������������������踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓����������������������������������銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮�".split("");
			for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
			D[233] = "����������������������������������������������������������������噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺����������������������������������憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸�".split("");
			for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
			D[234] = "����������������������������������������������������������������澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙����������������������������������瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘�".split("");
			for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
			D[235] = "����������������������������������������������������������������蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠����������������������������������諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌�".split("");
			for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
			D[236] = "����������������������������������������������������������������錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕����������������������������������魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎�".split("");
			for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
			D[237] = "����������������������������������������������������������������檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶����������������������������������瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞�".split("");
			for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
			D[238] = "����������������������������������������������������������������蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞����������������������������������謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜�".split("");
			for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
			D[239] = "����������������������������������������������������������������鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰����������������������������������鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶�".split("");
			for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
			D[240] = "����������������������������������������������������������������璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒����������������������������������臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧�".split("");
			for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
			D[241] = "����������������������������������������������������������������蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪����������������������������������鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰�".split("");
			for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
			D[242] = "����������������������������������������������������������������徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛����������������������������������礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕�".split("");
			for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
			D[243] = "����������������������������������������������������������������譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦����������������������������������鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲�".split("");
			for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
			D[244] = "����������������������������������������������������������������嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩����������������������������������禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿�".split("");
			for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
			D[245] = "����������������������������������������������������������������鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛����������������������������������鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥�".split("");
			for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
			D[246] = "����������������������������������������������������������������蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺����������������������������������騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚�".split("");
			for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
			D[247] = "����������������������������������������������������������������糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊����������������������������������驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾�".split("");
			for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
			D[248] = "����������������������������������������������������������������讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏����������������������������������齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚�".split("");
			for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
			D[249] = "����������������������������������������������������������������纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊����������������������������������龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓�".split("");
			for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
			return {"enc": e, "dec": d }; })();
			cptable[1250] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1251] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1252] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1253] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1254] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1255] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹ�ֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1256] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1257] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[1258] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[10000] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[10006] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[10007] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[10008] = (function(){ var d = [], e = {}, D = [], j;
			D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������������������������������������������������������������".split("");
			for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
			D[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。・ˉˇ¨〃々―～�…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split("");
			for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
			D[162] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split("");
			for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
			D[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
			for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
			D[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
			for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
			D[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
			for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
			D[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω���������������������������������������".split("");
			for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
			D[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
			for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
			D[168] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüê����������ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split("");
			for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
			D[169] = "��������������������������������������������������������������������������������������������������������������������������������������������������������������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split("");
			for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
			D[176] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split("");
			for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
			D[177] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split("");
			for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
			D[178] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split("");
			for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
			D[179] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split("");
			for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
			D[180] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split("");
			for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
			D[181] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split("");
			for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
			D[182] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split("");
			for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
			D[183] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split("");
			for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
			D[184] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split("");
			for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
			D[185] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split("");
			for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
			D[186] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split("");
			for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
			D[187] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split("");
			for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
			D[188] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split("");
			for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
			D[189] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split("");
			for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
			D[190] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split("");
			for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
			D[191] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split("");
			for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
			D[192] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split("");
			for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
			D[193] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split("");
			for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
			D[194] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split("");
			for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
			D[195] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split("");
			for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
			D[196] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split("");
			for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
			D[197] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split("");
			for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
			D[198] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split("");
			for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
			D[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split("");
			for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
			D[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split("");
			for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
			D[201] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split("");
			for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
			D[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split("");
			for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
			D[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split("");
			for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
			D[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split("");
			for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
			D[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split("");
			for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
			D[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split("");
			for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
			D[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split("");
			for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
			D[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split("");
			for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
			D[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split("");
			for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
			D[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split("");
			for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
			D[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split("");
			for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
			D[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split("");
			for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
			D[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split("");
			for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
			D[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split("");
			for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
			D[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split("");
			for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
			D[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split("");
			for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
			D[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split("");
			for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
			D[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split("");
			for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
			D[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split("");
			for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
			D[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split("");
			for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
			D[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split("");
			for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
			D[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split("");
			for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
			D[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split("");
			for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
			D[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split("");
			for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
			D[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split("");
			for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
			D[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split("");
			for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
			D[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split("");
			for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
			D[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split("");
			for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
			D[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split("");
			for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
			D[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split("");
			for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
			D[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split("");
			for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
			D[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split("");
			for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
			D[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split("");
			for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
			D[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split("");
			for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
			D[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split("");
			for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
			D[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split("");
			for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
			D[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split("");
			for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
			D[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split("");
			for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
			D[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split("");
			for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
			D[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split("");
			for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
			D[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split("");
			for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
			D[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split("");
			for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
			D[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split("");
			for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
			D[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split("");
			for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
			D[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split("");
			for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
			D[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split("");
			for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
			D[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split("");
			for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
			return {"enc": e, "dec": d }; })();
			cptable[10029] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[10079] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[10081] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			cptable[28591] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
			// eslint-disable-next-line no-undef
			if (module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = cptable;
			/*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */
			/* vim: set ft=javascript: */
			/*jshint newcap: false */
			(function(root, factory) {
			  if(typeof cptable === "undefined") {
			    if(typeof commonjsRequire !== "undefined"){
			      var cpt = cptable;
			      if (module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = factory(cpt);
			      else root.cptable = factory(cpt);
			    } else throw new Error("cptable not found");
			  } else cptable = factory(cptable);
			  /*eslint-enable */
			  /*jshint ignore:end */
			}(commonjsGlobal, function(cpt){
			  /*global module, Buffer */
			  var magic = {
			    "1200":"utf16le",
			    "1201":"utf16be",
			    "12000":"utf32le",
			    "12001":"utf32be",
			    "16969":"utf64le",
			    "20127":"ascii",
			    "65000":"utf7",
			    "65001":"utf8"
			  };

			  var sbcs_cache = [874,1250,1251,1252,1253,1254,1255,1256,10000];
			  var dbcs_cache = [932,936,949,950];
			  var magic_cache = [65001];
			  var magic_decode = {};
			  var magic_encode = {};
			  var cpdcache = {};
			  var cpecache = {};

			  var sfcc = function sfcc(x) { return String.fromCharCode(x); };
			  var cca = function cca(x) { return x.charCodeAt(0); };

			  var has_buf = (typeof Buffer !== 'undefined');
			  var Buffer_from = function(){};
			  if(has_buf) {
			    var nbfs = !Buffer.from;
			    if(!nbfs) try { Buffer.from("foo", "utf8"); } catch(e) { nbfs = true; }
			    Buffer_from = nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);
			    // $FlowIgnore
			    if(!Buffer.allocUnsafe) Buffer.allocUnsafe = function(n) { return new Buffer(n); };

			    var mdl = 1024, mdb = Buffer.allocUnsafe(mdl);
			    var make_EE = function make_EE(E){
			      var EE = Buffer.allocUnsafe(65536);
			      for(var i = 0; i < 65536;++i) EE[i] = 0;
			      var keys = Object.keys(E), len = keys.length;
			      for(var ee = 0, e = keys[ee]; ee < len; ++ee) {
			        if(!(e = keys[ee])) continue;
			        EE[e.charCodeAt(0)] = E[e];
			      }
			      return EE;
			    };
			    var sbcs_encode = function make_sbcs_encode(cp) {
			      var EE = make_EE(cpt[cp].enc);
			      return function sbcs_e(data, ofmt) {
			        var len = data.length;
			        var out, i=0, j=0, D=0, w=0;
			        if(typeof data === 'string') {
			          out = Buffer.allocUnsafe(len);
			          for(i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)];
			        } else if(Buffer.isBuffer(data)) {
			          out = Buffer.allocUnsafe(2*len);
			          j = 0;
			          for(i = 0; i < len; ++i) {
			            D = data[i];
			            if(D < 128) out[j++] = EE[D];
			            else if(D < 224) { out[j++] = EE[((D&31)<<6)+(data[i+1]&63)]; ++i; }
			            else if(D < 240) { out[j++] = EE[((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63)]; i+=2; }
			            else {
			              w = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3;
			              if(w < 65536) out[j++] = EE[w];
			              else { w -= 65536; out[j++] = EE[0xD800 + ((w>>10)&1023)]; out[j++] = EE[0xDC00 + (w&1023)]; }
			            }
			          }
			          out = out.slice(0,j);
			        } else {
			          out = Buffer.allocUnsafe(len);
			          for(i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)];
			        }
			        if(!ofmt || ofmt === 'buf') return out;
			        if(ofmt !== 'arr') return out.toString('binary');
			        return [].slice.call(out);
			      };
			    };
			    var sbcs_decode = function make_sbcs_decode(cp) {
			      var D = cpt[cp].dec;
			      var DD = Buffer.allocUnsafe(131072), d=0, c="";
			      for(d=0;d<D.length;++d) {
			        if(!(c=D[d])) continue;
			        var w = c.charCodeAt(0);
			        DD[2*d] = w&255; DD[2*d+1] = w>>8;
			      }
			      return function sbcs_d(data) {
			        var len = data.length, i=0, j=0;
			        if(2 * len > mdl) { mdl = 2 * len; mdb = Buffer.allocUnsafe(mdl); }
			        if(Buffer.isBuffer(data)) {
			          for(i = 0; i < len; i++) {
			            j = 2*data[i];
			            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
			          }
			        } else if(typeof data === "string") {
			          for(i = 0; i < len; i++) {
			            j = 2*data.charCodeAt(i);
			            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
			          }
			        } else {
			          for(i = 0; i < len; i++) {
			            j = 2*data[i];
			            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
			          }
			        }
			        return mdb.slice(0, 2 * len).toString('ucs2');
			      };
			    };
			    var dbcs_encode = function make_dbcs_encode(cp) {
			      var E = cpt[cp].enc;
			      var EE = Buffer.allocUnsafe(131072);
			      for(var i = 0; i < 131072; ++i) EE[i] = 0;
			      var keys = Object.keys(E);
			      for(var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {
			        if(!(e = keys[ee])) continue;
			        var f = e.charCodeAt(0);
			        EE[2*f] = E[e] & 255; EE[2*f+1] = E[e]>>8;
			      }
			      return function dbcs_e(data, ofmt) {
			        var len = data.length, out = Buffer.allocUnsafe(2*len), i=0, j=0, jj=0, k=0, D=0;
			        if(typeof data === 'string') {
			          for(i = k = 0; i < len; ++i) {
			            j = data.charCodeAt(i)*2;
			            out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
			          }
			          out = out.slice(0,k);
			        } else if(Buffer.isBuffer(data)) {
			          for(i = k = 0; i < len; ++i) {
			            D = data[i];
			            if(D < 128) j = D;
			            else if(D < 224) { j = ((D&31)<<6)+(data[i+1]&63); ++i; }
			            else if(D < 240) { j = ((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63); i+=2; }
			            else { j = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3; }
			            if(j<65536) { j*=2; out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j]; }
			            else { jj = j-65536;
			              j=2*(0xD800 + ((jj>>10)&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
			              j=2*(0xDC00 + (jj&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
			            }
			          }
			          out = out.slice(0,k);
			        } else {
			          for(i = k = 0; i < len; i++) {
			            j = data[i].charCodeAt(0)*2;
			            out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
			          }
			        }
			        if(!ofmt || ofmt === 'buf') return out;
			        if(ofmt !== 'arr') return out.toString('binary');
			        return [].slice.call(out);
			      };
			    };
			    var dbcs_decode = function make_dbcs_decode(cp) {
			      var D = cpt[cp].dec;
			      var DD = Buffer.allocUnsafe(131072), d=0, c, w=0, j=0, i=0;
			      for(i = 0; i < 65536; ++i) { DD[2*i] = 0xFF; DD[2*i+1] = 0xFD;}
			      for(d = 0; d < D.length; ++d) {
			        if(!(c=D[d])) continue;
			        w = c.charCodeAt(0);
			        j = 2*d;
			        DD[j] = w&255; DD[j+1] = w>>8;
			      }
			      return function dbcs_d(data) {
			        var len = data.length, out = Buffer.allocUnsafe(2*len), i=0, j=0, k=0;
			        if(Buffer.isBuffer(data)) {
			          for(i = 0; i < len; i++) {
			            j = 2*data[i];
			            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }
			            out[k++] = DD[j]; out[k++] = DD[j+1];
			          }
			        } else if(typeof data === "string") {
			          for(i = 0; i < len; i++) {
			            j = 2*data.charCodeAt(i);
			            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data.charCodeAt(i)<<8)+data.charCodeAt(i+1)); ++i; }
			            out[k++] = DD[j]; out[k++] = DD[j+1];
			          }
			        } else {
			          for(i = 0; i < len; i++) {
			            j = 2*data[i];
			            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }
			            out[k++] = DD[j]; out[k++] = DD[j+1];
			          }
			        }
			        return out.slice(0,k).toString('ucs2');
			      };
			    };
			    magic_decode[65001] = function utf8_d(data) {
			      if(typeof data === "string") return utf8_d(data.split("").map(cca));
			      var len = data.length, w = 0, ww = 0;
			      if(4 * len > mdl) { mdl = 4 * len; mdb = Buffer.allocUnsafe(mdl); }
			      var i = 0;
			      if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;
			      for(var j = 1, k = 0, D = 0; i < len; i+=j) {
			        j = 1; D = data[i];
			        if(D < 128) w = D;
			        else if(D < 224) { w=(D&31)*64+(data[i+1]&63); j=2; }
			        else if(D < 240) { w=((D&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }
			        else { w=(D&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }
			        if(w < 65536) { mdb[k++] = w&255; mdb[k++] = w>>8; }
			        else {
			          w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);
			          mdb[k++] = ww&255; mdb[k++] = ww>>>8; mdb[k++] = w&255; mdb[k++] = (w>>>8)&255;
			        }
			      }
			      return mdb.slice(0,k).toString('ucs2');
			    };
			    magic_encode[65001] = function utf8_e(data, ofmt) {
			      if(has_buf && Buffer.isBuffer(data)) {
			        if(!ofmt || ofmt === 'buf') return data;
			        if(ofmt !== 'arr') return data.toString('binary');
			        return [].slice.call(data);
			      }
			      var len = data.length, w = 0, ww = 0, j = 0;
			      var direct = typeof data === "string";
			      if(4 * len > mdl) { mdl = 4 * len; mdb = Buffer.allocUnsafe(mdl); }
			      for(var i = 0; i < len; ++i) {
			        w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
			        if(w <= 0x007F) mdb[j++] = w;
			        else if(w <= 0x07FF) {
			          mdb[j++] = 192 + (w >> 6);
			          mdb[j++] = 128 + (w&63);
			        } else if(w >= 0xD800 && w <= 0xDFFF) {
			          w -= 0xD800; ++i;
			          ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 0xDC00 + (w << 10);
			          mdb[j++] = 240 + ((ww>>>18) & 0x07);
			          mdb[j++] = 144 + ((ww>>>12) & 0x3F);
			          mdb[j++] = 128 + ((ww>>>6) & 0x3F);
			          mdb[j++] = 128 + (ww & 0x3F);
			        } else {
			          mdb[j++] = 224 + (w >> 12);
			          mdb[j++] = 128 + ((w >> 6)&63);
			          mdb[j++] = 128 + (w&63);
			        }
			      }
			      if(!ofmt || ofmt === 'buf') return mdb.slice(0,j);
			      if(ofmt !== 'arr') return mdb.slice(0,j).toString('binary');
			      return [].slice.call(mdb, 0, j);
			    };
			  }

			  var encache = function encache() {
			    if(has_buf) {
			      if(cpdcache[sbcs_cache[0]]) return;
			      var i=0, s=0;
			      for(i = 0; i < sbcs_cache.length; ++i) {
			        s = sbcs_cache[i];
			        if(cpt[s]) {
			          cpdcache[s] = sbcs_decode(s);
			          cpecache[s] = sbcs_encode(s);
			        }
			      }
			      for(i = 0; i < dbcs_cache.length; ++i) {
			        s = dbcs_cache[i];
			        if(cpt[s]) {
			          cpdcache[s] = dbcs_decode(s);
			          cpecache[s] = dbcs_encode(s);
			        }
			      }
			      for(i = 0; i < magic_cache.length; ++i) {
			        s = magic_cache[i];
			        if(magic_decode[s]) cpdcache[s] = magic_decode[s];
			        if(magic_encode[s]) cpecache[s] = magic_encode[s];
			      }
			    }
			  };
			  var null_enc = function(data, ofmt) { return ""; };
			  var cp_decache = function cp_decache(cp) { delete cpdcache[cp]; delete cpecache[cp]; };
			  var decache = function decache() {
			    if(has_buf) {
			      if(!cpdcache[sbcs_cache[0]]) return;
			      sbcs_cache.forEach(cp_decache);
			      dbcs_cache.forEach(cp_decache);
			      magic_cache.forEach(cp_decache);
			    }
			    last_enc = null_enc; last_cp = 0;
			  };
			  var cache = {
			    encache: encache,
			    decache: decache,
			    sbcs: sbcs_cache,
			    dbcs: dbcs_cache
			  };

			  encache();

			  var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
			  var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
			  var last_enc = null_enc, last_cp = 0;
			  var encode = function encode(cp, data, ofmt) {
			    if(cp === last_cp && last_enc) { return last_enc(data, ofmt); }
			    if(cpecache[cp]) { last_enc = cpecache[last_cp=cp]; return last_enc(data, ofmt); }
			    if(has_buf && Buffer.isBuffer(data)) data = data.toString('utf8');
			    var len = data.length;
			    var out = has_buf ? Buffer.allocUnsafe(4*len) : [], w=0, i=0, j = 0, ww=0;
			    var C = cpt[cp], E, M = "";
			    var isstr = typeof data === 'string';
			    if(C && (E=C.enc)) for(i = 0; i < len; ++i, ++j) {
			      w = E[isstr? data.charAt(i) : data[i]];
			      if(w > 255) {
			        out[j] = w>>8;
			        out[++j] = w&255;
			      } else out[j] = w&255;
			    }
			    else if((M=magic[cp])) switch(M) {
			      case "utf8":
			        if(has_buf && isstr) { out = Buffer_from(data, M); j = out.length; break; }
			        for(i = 0; i < len; ++i, ++j) {
			          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
			          if(w <= 0x007F) out[j] = w;
			          else if(w <= 0x07FF) {
			            out[j]   = 192 + (w >> 6);
			            out[++j] = 128 + (w&63);
			          } else if(w >= 0xD800 && w <= 0xDFFF) {
			            w -= 0xD800;
			            ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 0xDC00 + (w << 10);
			            out[j]   = 240 + ((ww>>>18) & 0x07);
			            out[++j] = 144 + ((ww>>>12) & 0x3F);
			            out[++j] = 128 + ((ww>>>6) & 0x3F);
			            out[++j] = 128 + (ww & 0x3F);
			          } else {
			            out[j]   = 224 + (w >> 12);
			            out[++j] = 128 + ((w >> 6)&63);
			            out[++j] = 128 + (w&63);
			          }
			        }
			        break;
			      case "ascii":
			        if(has_buf && typeof data === "string") { out = Buffer_from(data, M); j = out.length; break; }
			        for(i = 0; i < len; ++i, ++j) {
			          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
			          if(w <= 0x007F) out[j] = w;
			          else throw new Error("bad ascii " + w);
			        }
			        break;
			      case "utf16le":
			        if(has_buf && typeof data === "string") { out = Buffer_from(data, M); j = out.length; break; }
			        for(i = 0; i < len; ++i) {
			          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
			          out[j++] = w&255;
			          out[j++] = w>>8;
			        }
			        break;
			      case "utf16be":
			        for(i = 0; i < len; ++i) {
			          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
			          out[j++] = w>>8;
			          out[j++] = w&255;
			        }
			        break;
			      case "utf32le":
			        for(i = 0; i < len; ++i) {
			          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
			          if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);
			          out[j++] = w&255; w >>= 8;
			          out[j++] = w&255; w >>= 8;
			          out[j++] = w&255; w >>= 8;
			          out[j++] = w&255;
			        }
			        break;
			      case "utf32be":
			        for(i = 0; i < len; ++i) {
			          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
			          if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);
			          out[j+3] = w&255; w >>= 8;
			          out[j+2] = w&255; w >>= 8;
			          out[j+1] = w&255; w >>= 8;
			          out[j] = w&255;
			          j+=4;
			        }
			        break;
			      case "utf7":
			        for(i = 0; i < len; i++) {
			          var c = isstr ? data.charAt(i) : data[i].charAt(0);
			          if(c === "+") { out[j++] = 0x2b; out[j++] = 0x2d; continue; }
			          if(SetD.indexOf(c) > -1) { out[j++] = c.charCodeAt(0); continue; }
			          var tt = encode(1201, c);
			          out[j++] = 0x2b;
			          out[j++] = BM.charCodeAt(tt[0]>>2);
			          out[j++] = BM.charCodeAt(((tt[0]&0x03)<<4) + ((tt[1]||0)>>4));
			          out[j++] = BM.charCodeAt(((tt[1]&0x0F)<<2) + ((tt[2]||0)>>6));
			          out[j++] = 0x2d;
			        }
			        break;
			      default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
			    }
			    else throw new Error("Unrecognized CP: " + cp);
			    out = out.slice(0,j);
			    if(!has_buf) return (ofmt == 'str') ? (out).map(sfcc).join("") : out;
			    if(!ofmt || ofmt === 'buf') return out;
			    if(ofmt !== 'arr') return out.toString('binary');
			    return [].slice.call(out);
			  };
			  var decode = function decode(cp, data) {
			    var F; if((F=cpdcache[cp])) return F(data);
			    if(typeof data === "string") return decode(cp, data.split("").map(cca));
			    var len = data.length, out = new Array(len), s="", w=0, i=0, j=1, k=0, ww=0;
			    var C = cpt[cp], D, M="";
			    if(C && (D=C.dec)) {
			      for(i = 0; i < len; i+=j) {
			        j = 2;
			        s = D[(data[i]<<8)+ data[i+1]];
			        if(!s) {
			          j = 1;
			          s = D[data[i]];
			        }
			        if(!s) throw new Error('Unrecognized code: ' + data[i] + ' ' + data[i+j-1] + ' ' + i + ' ' + j + ' ' + D[data[i]]);
			        out[k++] = s;
			      }
			    }
			    else if((M=magic[cp])) switch(M) {
			      case "utf8":
			        if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;
			        for(; i < len; i+=j) {
			          j = 1;
			          if(data[i] < 128) w = data[i];
			          else if(data[i] < 224) { w=(data[i]&31)*64+(data[i+1]&63); j=2; }
			          else if(data[i] < 240) { w=((data[i]&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }
			          else { w=(data[i]&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }
			          if(w < 65536) { out[k++] = String.fromCharCode(w); }
			          else {
			            w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);
			            out[k++] = String.fromCharCode(ww); out[k++] = String.fromCharCode(w);
			          }
			        }
			        break;
			      case "ascii":
			        if(has_buf && Buffer.isBuffer(data)) return data.toString(M);
			        for(i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]);
			        k = len; break;
			      case "utf16le":
			        if(len >= 2 && data[0] == 0xFF) if(data[1] == 0xFE) i = 2;
			        if(has_buf && Buffer.isBuffer(data)) return data.toString(M);
			        j = 2;
			        for(; i+1 < len; i+=j) {
			          out[k++] = String.fromCharCode((data[i+1]<<8) + data[i]);
			        }
			        break;
			      case "utf16be":
			        if(len >= 2 && data[0] == 0xFE) if(data[1] == 0xFF) i = 2;
			        j = 2;
			        for(; i+1 < len; i+=j) {
			          out[k++] = String.fromCharCode((data[i]<<8) + data[i+1]);
			        }
			        break;
			      case "utf32le":
			        if(len >= 4 && data[0] == 0xFF) if(data[1] == 0xFE && data[2] === 0 && data[3] === 0) i = 4;
			        j = 4;
			        for(; i < len; i+=j) {
			          w = (data[i+3]<<24) + (data[i+2]<<16) + (data[i+1]<<8) + (data[i]);
			          if(w > 0xFFFF) {
			            w -= 0x10000;
			            out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));
			            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
			          }
			          else out[k++] = String.fromCharCode(w);
			        }
			        break;
			      case "utf32be":
			        if(len >= 4 && data[3] == 0xFF) if(data[2] == 0xFE && data[1] === 0 && data[0] === 0) i = 4;
			        j = 4;
			        for(; i < len; i+=j) {
			          w = (data[i]<<24) + (data[i+1]<<16) + (data[i+2]<<8) + (data[i+3]);
			          if(w > 0xFFFF) {
			            w -= 0x10000;
			            out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));
			            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
			          }
			          else out[k++] = String.fromCharCode(w);
			        }
			        break;
			      case "utf7":
			        if(len >= 4 && data[0] == 0x2B && data[1] == 0x2F && data[2] == 0x76) {
			          if(len >= 5 && data[3] == 0x38 && data[4] == 0x2D) i = 5;
			          else if(data[3] == 0x38 || data[3] == 0x39 || data[3] == 0x2B || data[3] == 0x2F) i = 4;
			        }
			        for(; i < len; i+=j) {
			          if(data[i] !== 0x2b) { j=1; out[k++] = String.fromCharCode(data[i]); continue; }
			          j=1;
			          if(data[i+1] === 0x2d) { j = 2; out[k++] = "+"; continue; }
			          // eslint-disable-next-line no-useless-escape
			          while(String.fromCharCode(data[i+j]).match(/[A-Za-z0-9+\/]/)) j++;
			          var dash = 0;
			          if(data[i+j] === 0x2d) { ++j; dash=1; }
			          var tt = [];
			          var o64 = "";
			          var c1=0, c2=0, c3=0;
			          var e1=0, e2=0, e3=0, e4=0;
			          for(var l = 1; l < j - dash;) {
			            e1 = BM.indexOf(String.fromCharCode(data[i+l++]));
			            e2 = BM.indexOf(String.fromCharCode(data[i+l++]));
			            c1 = e1 << 2 | e2 >> 4;
			            tt.push(c1);
			            e3 = BM.indexOf(String.fromCharCode(data[i+l++]));
			            if(e3 === -1) break;
			            c2 = (e2 & 15) << 4 | e3 >> 2;
			            tt.push(c2);
			            e4 = BM.indexOf(String.fromCharCode(data[i+l++]));
			            if(e4 === -1) break;
			            c3 = (e3 & 3) << 6 | e4;
			            if(e4 < 64) tt.push(c3);
			          }
			          o64 = decode(1201, tt);
			          for(l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l);
			        }
			        break;
			      default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
			    }
			    else throw new Error("Unrecognized CP: " + cp);
			    return out.slice(0,k).join("");
			  };
			  var hascp = function hascp(cp) { return !!(cpt[cp] || magic[cp]); };
			  cpt.utils = { decode: decode, encode: encode, hascp: hascp, magic: magic, cache:cache };
			  return cpt;
			})); 
		} (cpexcel));
		return cpexcel.exports;
	}

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };
	    
	// Alias for removeListener added in NodeJS 10.0
	// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
	EventEmitter.prototype.off = function(type, listener){
	    return this.removeListener(type, listener);
	};

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount$1.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount$1;
	function listenerCount$1(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var global$1 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString = {}.toString;

	var isArray$1 = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	kMaxLength();

	function kMaxLength () {
	  return Buffer$1.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$1(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$1 (arg, encodingOrOffset, length) {
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
	    return new Buffer$1(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer$1.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$1._augment = function (arr) {
	  arr.__proto__ = Buffer$1.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$1.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	  Buffer$1.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$1.__proto__ = Uint8Array;
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer$1[Symbol.species] === Buffer$1) ;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$1.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$1.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$1.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$1.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	Buffer$1.isBuffer = isBuffer;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$1.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$1.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$1.concat = function concat (list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$1.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$1.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$1.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$1.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$1.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer$1.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$1.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$1.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$1.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$1.compare(this, b) === 0
	};

	Buffer$1.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$1.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$1.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$1.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$1.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$1.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$1.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$1(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer$1(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var browser$1 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global$1.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (browser$1.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (browser$1.throwDeprecation) {
	        throw new Error(msg);
	      } else if (browser$1.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = browser$1.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isString(arg) {
	  return typeof arg === 'string';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return Buffer$1.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = Buffer$1.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var isBufferEncoding = Buffer$1.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer$1(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	Readable.ReadableState = ReadableState;

	var debug = debuglog('stream');
	inherits$1(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EventEmitter.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer$1.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EventEmitter.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer$1.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	Writable.WritableState = WritableState;
	inherits$1(Writable, EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: deprecate(function () {
	      return this.getBuffer();
	    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer$1.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$1(Duplex, Readable);

	var keys = Object.keys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	inherits$1(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

	inherits$1(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	inherits$1(Stream, EventEmitter);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform;
	Stream.PassThrough = PassThrough;

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;

	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EventEmitter.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EventEmitter.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	var _polyfillNode_stream = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Duplex: Duplex,
		PassThrough: PassThrough,
		Readable: Readable,
		Stream: Stream,
		Transform: Transform,
		Writable: Writable,
		default: Stream
	});

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_stream);

	var _polyfillNode_fs = {};

	var _polyfillNode_fs$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: _polyfillNode_fs
	});

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_fs$1);

	(function (module, exports) {
	  var XLSX = {};
	  function make_xlsx_lib(XLSX) {
	    XLSX.version = "0.20.0";
	    var current_codepage = 1200, current_ansi = 1252;
	    var $cptable;
	    var VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 10000];
	    var CS2CP = {
	      0: 1252,
	      1: 65001,
	      2: 65001,
	      77: 10000,
	      128: 932,
	      129: 949,
	      130: 1361,
	      134: 936,
	      136: 950,
	      161: 1253,
	      162: 1254,
	      163: 1258,
	      177: 1255,
	      178: 1256,
	      186: 1257,
	      204: 1251,
	      222: 874,
	      238: 1250,
	      255: 1252,
	      69: 6969
	    };
	    var set_ansi = function (cp) {
	      if (VALID_ANSI.indexOf(cp) == -1) return;
	      current_ansi = CS2CP[0] = cp;
	    };
	    function reset_ansi() {
	      set_ansi(1252);
	    }
	    var set_cp = function (cp) {
	      current_codepage = cp;
	      set_ansi(cp);
	    };
	    function reset_cp() {
	      set_cp(1200);
	      reset_ansi();
	    }
	    function char_codes(data) {
	      var o = [];
	      for (var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i);
	      return o;
	    }
	    function utf16leread(data) {
	      var o = [];
	      for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));
	      return o.join("");
	    }
	    function utf16lereadu(data) {
	      var o = [];
	      for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data[2 * i] + (data[2 * i + 1] << 8));
	      return o.join("");
	    }
	    function utf16beread(data) {
	      var o = [];
	      for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));
	      return o.join("");
	    }
	    var debom = function (data) {
	      var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
	      if (c1 == 255 && c2 == 254) return utf16leread(data.slice(2));
	      if (c1 == 254 && c2 == 255) return utf16beread(data.slice(2));
	      if (c1 == 65279) return data.slice(1);
	      return data;
	    };
	    var _getchar = function _gc1(x) {
	      return String.fromCharCode(x);
	    };
	    var _getansi = function _ga1(x) {
	      return String.fromCharCode(x);
	    };
	    function set_cptable(cptable) {
	      $cptable = cptable;
	      set_cp = function (cp) {
	        current_codepage = cp;
	        set_ansi(cp);
	      };
	      debom = function (data) {
	        if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) {
	          return $cptable.utils.decode(1200, char_codes(data.slice(2)));
	        }
	        return data;
	      };
	      _getchar = function _gc2(x) {
	        if (current_codepage === 1200) return String.fromCharCode(x);
	        return $cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0];
	      };
	      _getansi = function _ga2(x) {
	        return $cptable.utils.decode(current_ansi, [x])[0];
	      };
	      cpdoit();
	    }
	    var DENSE = null;
	    var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	    function Base64_encode(input) {
	      var o = "";
	      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
	      for (var i = 0; i < input.length; ) {
	        c1 = input.charCodeAt(i++);
	        e1 = c1 >> 2;
	        c2 = input.charCodeAt(i++);
	        e2 = (c1 & 3) << 4 | c2 >> 4;
	        c3 = input.charCodeAt(i++);
	        e3 = (c2 & 15) << 2 | c3 >> 6;
	        e4 = c3 & 63;
	        if (isNaN(c2)) {
	          e3 = e4 = 64;
	        } else if (isNaN(c3)) {
	          e4 = 64;
	        }
	        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
	      }
	      return o;
	    }
	    function Base64_encode_pass(input) {
	      var o = "";
	      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
	      for (var i = 0; i < input.length; ) {
	        c1 = input.charCodeAt(i++);
	        if (c1 > 255) c1 = 95;
	        e1 = c1 >> 2;
	        c2 = input.charCodeAt(i++);
	        if (c2 > 255) c2 = 95;
	        e2 = (c1 & 3) << 4 | c2 >> 4;
	        c3 = input.charCodeAt(i++);
	        if (c3 > 255) c3 = 95;
	        e3 = (c2 & 15) << 2 | c3 >> 6;
	        e4 = c3 & 63;
	        if (isNaN(c2)) {
	          e3 = e4 = 64;
	        } else if (isNaN(c3)) {
	          e4 = 64;
	        }
	        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
	      }
	      return o;
	    }
	    function Base64_encode_arr(input) {
	      var o = "";
	      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
	      for (var i = 0; i < input.length; ) {
	        c1 = input[i++];
	        e1 = c1 >> 2;
	        c2 = input[i++];
	        e2 = (c1 & 3) << 4 | c2 >> 4;
	        c3 = input[i++];
	        e3 = (c2 & 15) << 2 | c3 >> 6;
	        e4 = c3 & 63;
	        if (isNaN(c2)) {
	          e3 = e4 = 64;
	        } else if (isNaN(c3)) {
	          e4 = 64;
	        }
	        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
	      }
	      return o;
	    }
	    function Base64_decode(input) {
	      var o = "";
	      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
	      input = input.replace(/^data:([^\/]+\/[^\/]+)?;base64\,/, "").replace(/[^\w\+\/\=]/g, "");
	      for (var i = 0; i < input.length; ) {
	        e1 = Base64_map.indexOf(input.charAt(i++));
	        e2 = Base64_map.indexOf(input.charAt(i++));
	        c1 = e1 << 2 | e2 >> 4;
	        o += String.fromCharCode(c1);
	        e3 = Base64_map.indexOf(input.charAt(i++));
	        c2 = (e2 & 15) << 4 | e3 >> 2;
	        if (e3 !== 64) {
	          o += String.fromCharCode(c2);
	        }
	        e4 = Base64_map.indexOf(input.charAt(i++));
	        c3 = (e3 & 3) << 6 | e4;
	        if (e4 !== 64) {
	          o += String.fromCharCode(c3);
	        }
	      }
	      return o;
	    }
	    var has_buf = (function () {
	      return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
	    })();
	    var Buffer_from = (function () {
	      if (typeof Buffer !== "undefined") {
	        var nbfs = !Buffer.from;
	        if (!nbfs) try {
	          Buffer.from("foo", "utf8");
	        } catch (e) {
	          nbfs = true;
	        }
	        return nbfs ? function (buf, enc) {
	          return enc ? new Buffer(buf, enc) : new Buffer(buf);
	        } : Buffer.from.bind(Buffer);
	      }
	      return function () {};
	    })();
	    var buf_utf16le = (function () {
	      if (typeof Buffer === "undefined") return false;
	      var x = Buffer_from([65, 0]);
	      if (!x) return false;
	      var o = x.toString("utf16le");
	      return o.length == 1;
	    })();
	    function new_raw_buf(len) {
	      if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
	      return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
	    }
	    function new_unsafe_buf(len) {
	      if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
	      return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
	    }
	    var s2a = function s2a(s) {
	      if (has_buf) return Buffer_from(s, "binary");
	      return s.split("").map(function (x) {
	        return x.charCodeAt(0) & 255;
	      });
	    };
	    function s2ab(s) {
	      if (typeof ArrayBuffer === "undefined") return s2a(s);
	      var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
	      for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 255;
	      return buf;
	    }
	    function a2s(data) {
	      if (Array.isArray(data)) return data.map(function (c) {
	        return String.fromCharCode(c);
	      }).join("");
	      var o = [];
	      for (var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]);
	      return o.join("");
	    }
	    function a2u(data) {
	      if (typeof Uint8Array === "undefined") throw new Error("Unsupported");
	      return new Uint8Array(data);
	    }
	    function ab2a(data) {
	      if (typeof ArrayBuffer == "undefined") throw new Error("Unsupported");
	      if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
	      var o = new Array(data.length);
	      for (var i = 0; i < data.length; ++i) o[i] = data[i];
	      return o;
	    }
	    var bconcat = has_buf ? function (bufs) {
	      return Buffer.concat(bufs.map(function (buf) {
	        return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
	      }));
	    } : function (bufs) {
	      if (typeof Uint8Array !== "undefined") {
	        var i = 0, maxlen = 0;
	        for (i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;
	        var o = new Uint8Array(maxlen);
	        var len = 0;
	        for ((i = 0, maxlen = 0); i < bufs.length; (maxlen += len, ++i)) {
	          len = bufs[i].length;
	          if (bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen); else if (typeof bufs[i] == "string") o.set(new Uint8Array(s2a(bufs[i])), maxlen); else o.set(new Uint8Array(bufs[i]), maxlen);
	        }
	        return o;
	      }
	      return [].concat.apply([], bufs.map(function (buf) {
	        return Array.isArray(buf) ? buf : [].slice.call(buf);
	      }));
	    };
	    function utf8decode(content) {
	      var out = [], widx = 0, L = content.length + 250;
	      var o = new_raw_buf(content.length + 255);
	      for (var ridx = 0; ridx < content.length; ++ridx) {
	        var c = content.charCodeAt(ridx);
	        if (c < 128) o[widx++] = c; else if (c < 2048) {
	          o[widx++] = 192 | c >> 6 & 31;
	          o[widx++] = 128 | c & 63;
	        } else if (c >= 55296 && c < 57344) {
	          c = (c & 1023) + 64;
	          var d = content.charCodeAt(++ridx) & 1023;
	          o[widx++] = 240 | c >> 8 & 7;
	          o[widx++] = 128 | c >> 2 & 63;
	          o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;
	          o[widx++] = 128 | d & 63;
	        } else {
	          o[widx++] = 224 | c >> 12 & 15;
	          o[widx++] = 128 | c >> 6 & 63;
	          o[widx++] = 128 | c & 63;
	        }
	        if (widx > L) {
	          out.push(o.slice(0, widx));
	          widx = 0;
	          o = new_raw_buf(65535);
	          L = 65530;
	        }
	      }
	      out.push(o.slice(0, widx));
	      return bconcat(out);
	    }
	    var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
	    function _strrev(x) {
	      var o = "", i = x.length - 1;
	      while (i >= 0) o += x.charAt(i--);
	      return o;
	    }
	    function pad0(v, d) {
	      var t = "" + v;
	      return t.length >= d ? t : fill("0", d - t.length) + t;
	    }
	    function pad_(v, d) {
	      var t = "" + v;
	      return t.length >= d ? t : fill(" ", d - t.length) + t;
	    }
	    function rpad_(v, d) {
	      var t = "" + v;
	      return t.length >= d ? t : t + fill(" ", d - t.length);
	    }
	    function pad0r1(v, d) {
	      var t = "" + Math.round(v);
	      return t.length >= d ? t : fill("0", d - t.length) + t;
	    }
	    function pad0r2(v, d) {
	      var t = "" + v;
	      return t.length >= d ? t : fill("0", d - t.length) + t;
	    }
	    var p2_32 = Math.pow(2, 32);
	    function pad0r(v, d) {
	      if (v > p2_32 || v < -p2_32) return pad0r1(v, d);
	      var i = Math.round(v);
	      return pad0r2(i, d);
	    }
	    function SSF_isgeneral(s, i) {
	      i = i || 0;
	      return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
	    }
	    var days = [["Sun", "Sunday"], ["Mon", "Monday"], ["Tue", "Tuesday"], ["Wed", "Wednesday"], ["Thu", "Thursday"], ["Fri", "Friday"], ["Sat", "Saturday"]];
	    var months = [["J", "Jan", "January"], ["F", "Feb", "February"], ["M", "Mar", "March"], ["A", "Apr", "April"], ["M", "May", "May"], ["J", "Jun", "June"], ["J", "Jul", "July"], ["A", "Aug", "August"], ["S", "Sep", "September"], ["O", "Oct", "October"], ["N", "Nov", "November"], ["D", "Dec", "December"]];
	    function SSF_init_table(t) {
	      if (!t) t = {};
	      t[0] = "General";
	      t[1] = "0";
	      t[2] = "0.00";
	      t[3] = "#,##0";
	      t[4] = "#,##0.00";
	      t[9] = "0%";
	      t[10] = "0.00%";
	      t[11] = "0.00E+00";
	      t[12] = "# ?/?";
	      t[13] = "# ??/??";
	      t[14] = "m/d/yy";
	      t[15] = "d-mmm-yy";
	      t[16] = "d-mmm";
	      t[17] = "mmm-yy";
	      t[18] = "h:mm AM/PM";
	      t[19] = "h:mm:ss AM/PM";
	      t[20] = "h:mm";
	      t[21] = "h:mm:ss";
	      t[22] = "m/d/yy h:mm";
	      t[37] = "#,##0 ;(#,##0)";
	      t[38] = "#,##0 ;[Red](#,##0)";
	      t[39] = "#,##0.00;(#,##0.00)";
	      t[40] = "#,##0.00;[Red](#,##0.00)";
	      t[45] = "mm:ss";
	      t[46] = "[h]:mm:ss";
	      t[47] = "mmss.0";
	      t[48] = "##0.0E+0";
	      t[49] = "@";
	      t[56] = "\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"";
	      return t;
	    }
	    var table_fmt = {
	      0: "General",
	      1: "0",
	      2: "0.00",
	      3: "#,##0",
	      4: "#,##0.00",
	      9: "0%",
	      10: "0.00%",
	      11: "0.00E+00",
	      12: "# ?/?",
	      13: "# ??/??",
	      14: "m/d/yy",
	      15: "d-mmm-yy",
	      16: "d-mmm",
	      17: "mmm-yy",
	      18: "h:mm AM/PM",
	      19: "h:mm:ss AM/PM",
	      20: "h:mm",
	      21: "h:mm:ss",
	      22: "m/d/yy h:mm",
	      37: "#,##0 ;(#,##0)",
	      38: "#,##0 ;[Red](#,##0)",
	      39: "#,##0.00;(#,##0.00)",
	      40: "#,##0.00;[Red](#,##0.00)",
	      45: "mm:ss",
	      46: "[h]:mm:ss",
	      47: "mmss.0",
	      48: "##0.0E+0",
	      49: "@",
	      56: "\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \""
	    };
	    var SSF_default_map = {
	      5: 37,
	      6: 38,
	      7: 39,
	      8: 40,
	      23: 0,
	      24: 0,
	      25: 0,
	      26: 0,
	      27: 14,
	      28: 14,
	      29: 14,
	      30: 14,
	      31: 14,
	      50: 14,
	      51: 14,
	      52: 14,
	      53: 14,
	      54: 14,
	      55: 14,
	      56: 14,
	      57: 14,
	      58: 14,
	      59: 1,
	      60: 2,
	      61: 3,
	      62: 4,
	      67: 9,
	      68: 10,
	      69: 12,
	      70: 13,
	      71: 14,
	      72: 14,
	      73: 15,
	      74: 16,
	      75: 17,
	      76: 20,
	      77: 21,
	      78: 22,
	      79: 45,
	      80: 46,
	      81: 47,
	      82: 0
	    };
	    var SSF_default_str = {
	      5: "\"$\"#,##0_);\\(\"$\"#,##0\\)",
	      63: "\"$\"#,##0_);\\(\"$\"#,##0\\)",
	      6: "\"$\"#,##0_);[Red]\\(\"$\"#,##0\\)",
	      64: "\"$\"#,##0_);[Red]\\(\"$\"#,##0\\)",
	      7: "\"$\"#,##0.00_);\\(\"$\"#,##0.00\\)",
	      65: "\"$\"#,##0.00_);\\(\"$\"#,##0.00\\)",
	      8: "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)",
	      66: "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)",
	      41: "_(* #,##0_);_(* \\(#,##0\\);_(* \"-\"_);_(@_)",
	      42: "_(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"_);_(@_)",
	      43: "_(* #,##0.00_);_(* \\(#,##0.00\\);_(* \"-\"??_);_(@_)",
	      44: "_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)"
	    };
	    function SSF_frac(x, D, mixed) {
	      var sgn = x < 0 ? -1 : 1;
	      var B = x * sgn;
	      var P_2 = 0, P_1 = 1, P = 0;
	      var Q_2 = 1, Q_1 = 0, Q = 0;
	      var A = Math.floor(B);
	      while (Q_1 < D) {
	        A = Math.floor(B);
	        P = A * P_1 + P_2;
	        Q = A * Q_1 + Q_2;
	        if (B - A < 5e-8) break;
	        B = 1 / (B - A);
	        P_2 = P_1;
	        P_1 = P;
	        Q_2 = Q_1;
	        Q_1 = Q;
	      }
	      if (Q > D) {
	        if (Q_1 > D) {
	          Q = Q_2;
	          P = P_2;
	        } else {
	          Q = Q_1;
	          P = P_1;
	        }
	      }
	      if (!mixed) return [0, sgn * P, Q];
	      var q = Math.floor(sgn * P / Q);
	      return [q, sgn * P - q * Q, Q];
	    }
	    function SSF_parse_date_code(v, opts, b2) {
	      if (v > 2958465 || v < 0) return null;
	      var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0;
	      var dout = [];
	      var out = {
	        D: date,
	        T: time,
	        u: 86400 * (v - date) - time,
	        y: 0,
	        m: 0,
	        d: 0,
	        H: 0,
	        M: 0,
	        S: 0,
	        q: 0
	      };
	      if (Math.abs(out.u) < 0.000001) out.u = 0;
	      if (opts && opts.date1904) date += 1462;
	      if (out.u > 0.9999) {
	        out.u = 0;
	        if (++time == 86400) {
	          out.T = time = 0;
	          ++date;
	          ++out.D;
	        }
	      }
	      if (date === 60) {
	        dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
	        dow = 3;
	      } else if (date === 0) {
	        dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
	        dow = 6;
	      } else {
	        if (date > 60) --date;
	        var d = new Date(1900, 0, 1);
	        d.setDate(d.getDate() + date - 1);
	        dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
	        dow = d.getDay();
	        if (date < 60) dow = (dow + 6) % 7;
	        if (b2) dow = SSF_fix_hijri(d, dout);
	      }
	      out.y = dout[0];
	      out.m = dout[1];
	      out.d = dout[2];
	      out.S = time % 60;
	      time = Math.floor(time / 60);
	      out.M = time % 60;
	      time = Math.floor(time / 60);
	      out.H = time;
	      out.q = dow;
	      return out;
	    }
	    function SSF_strip_decimal(o) {
	      return o.indexOf(".") == -1 ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
	    }
	    function SSF_normalize_exp(o) {
	      if (o.indexOf("E") == -1) return o;
	      return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
	    }
	    function SSF_small_exp(v) {
	      var w = v < 0 ? 12 : 11;
	      var o = SSF_strip_decimal(v.toFixed(12));
	      if (o.length <= w) return o;
	      o = v.toPrecision(10);
	      if (o.length <= w) return o;
	      return v.toExponential(5);
	    }
	    function SSF_large_exp(v) {
	      var o = SSF_strip_decimal(v.toFixed(11));
	      return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
	    }
	    function SSF_general_num(v) {
	      var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;
	      if (V >= -4 && V <= -1) o = v.toPrecision(10 + V); else if (Math.abs(V) <= 9) o = SSF_small_exp(v); else if (V === 10) o = v.toFixed(10).substr(0, 12); else o = SSF_large_exp(v);
	      return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
	    }
	    function SSF_general(v, opts) {
	      switch (typeof v) {
	        case "string":
	          return v;
	        case "boolean":
	          return v ? "TRUE" : "FALSE";
	        case "number":
	          return (v | 0) === v ? v.toString(10) : SSF_general_num(v);
	        case "undefined":
	          return "";
	        case "object":
	          if (v == null) return "";
	          if (v instanceof Date) return SSF_format(14, datenum(v, opts && opts.date1904), opts);
	      }
	      throw new Error("unsupported value in General format: " + v);
	    }
	    function SSF_fix_hijri(date, o) {
	      o[0] -= 581;
	      var dow = date.getDay();
	      if (date < 60) dow = (dow + 6) % 7;
	      return dow;
	    }
	    function SSF_write_date(type, fmt, val, ss0) {
	      var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0;
	      switch (type) {
	        case 98:
	          y = val.y + 543;
	        case 121:
	          switch (fmt.length) {
	            case 1:
	            case 2:
	              out = y % 100;
	              outl = 2;
	              break;
	            default:
	              out = y % 10000;
	              outl = 4;
	              break;
	          }
	          break;
	        case 109:
	          switch (fmt.length) {
	            case 1:
	            case 2:
	              out = val.m;
	              outl = fmt.length;
	              break;
	            case 3:
	              return months[val.m - 1][1];
	            case 5:
	              return months[val.m - 1][0];
	            default:
	              return months[val.m - 1][2];
	          }
	          break;
	        case 100:
	          switch (fmt.length) {
	            case 1:
	            case 2:
	              out = val.d;
	              outl = fmt.length;
	              break;
	            case 3:
	              return days[val.q][0];
	            default:
	              return days[val.q][1];
	          }
	          break;
	        case 104:
	          switch (fmt.length) {
	            case 1:
	            case 2:
	              out = 1 + (val.H + 11) % 12;
	              outl = fmt.length;
	              break;
	            default:
	              throw "bad hour format: " + fmt;
	          }
	          break;
	        case 72:
	          switch (fmt.length) {
	            case 1:
	            case 2:
	              out = val.H;
	              outl = fmt.length;
	              break;
	            default:
	              throw "bad hour format: " + fmt;
	          }
	          break;
	        case 77:
	          switch (fmt.length) {
	            case 1:
	            case 2:
	              out = val.M;
	              outl = fmt.length;
	              break;
	            default:
	              throw "bad minute format: " + fmt;
	          }
	          break;
	        case 115:
	          if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000") throw "bad second format: " + fmt;
	          if (val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
	          if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100; else tt = ss0 === 1 ? 10 : 1;
	          ss = Math.round(tt * (val.S + val.u));
	          if (ss >= 60 * tt) ss = 0;
	          if (fmt === "s") return ss === 0 ? "0" : "" + ss / tt;
	          o = pad0(ss, 2 + ss0);
	          if (fmt === "ss") return o.substr(0, 2);
	          return "." + o.substr(2, fmt.length - 1);
	        case 90:
	          switch (fmt) {
	            case "[h]":
	            case "[hh]":
	              out = val.D * 24 + val.H;
	              break;
	            case "[m]":
	            case "[mm]":
	              out = (val.D * 24 + val.H) * 60 + val.M;
	              break;
	            case "[s]":
	            case "[ss]":
	              out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
	              break;
	            default:
	              throw "bad abstime format: " + fmt;
	          }
	          outl = fmt.length === 3 ? 1 : 2;
	          break;
	        case 101:
	          out = y;
	          outl = 1;
	          break;
	      }
	      var outstr = outl > 0 ? pad0(out, outl) : "";
	      return outstr;
	    }
	    function commaify(s) {
	      var w = 3;
	      if (s.length <= w) return s;
	      var j = s.length % w, o = s.substr(0, j);
	      for (; j != s.length; j += w) o += (o.length > 0 ? "," : "") + s.substr(j, w);
	      return o;
	    }
	    var pct1 = /%/g;
	    function write_num_pct(type, fmt, val) {
	      var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
	      return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
	    }
	    function write_num_cm(type, fmt, val) {
	      var idx = fmt.length - 1;
	      while (fmt.charCodeAt(idx - 1) === 44) --idx;
	      return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
	    }
	    function write_num_exp(fmt, val) {
	      var o;
	      var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
	      if (fmt.match(/^#+0.0E\+0$/)) {
	        if (val == 0) return "0.0E+0"; else if (val < 0) return "-" + write_num_exp(fmt, -val);
	        var period = fmt.indexOf(".");
	        if (period === -1) period = fmt.indexOf("E");
	        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
	        if (ee < 0) ee += period;
	        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
	        if (o.indexOf("e") === -1) {
	          var fakee = Math.floor(Math.log(val) * Math.LOG10E);
	          if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee); else o += "E+" + (fakee - ee);
	          while (o.substr(0, 2) === "0.") {
	            o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
	            o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
	          }
	          o = o.replace(/\+-/, "-");
	        }
	        o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $2, $3) {
	          return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
	        });
	      } else o = val.toExponential(idx);
	      if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
	      if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
	      return o.replace("e", "E");
	    }
	    var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
	    function write_num_f1(r, aval, sign) {
	      var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
	      var myn = rr - base * den, myd = den;
	      return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
	    }
	    function write_num_f2(r, aval, sign) {
	      return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
	    }
	    var dec1 = /^#*0*\.([0#]+)/;
	    var closeparen = /\).*[0#]/;
	    var phone = /\(###\) ###\\?-####/;
	    function hashq(str) {
	      var o = "", cc;
	      for (var i = 0; i != str.length; ++i) switch (cc = str.charCodeAt(i)) {
	        case 35:
	          break;
	        case 63:
	          o += " ";
	          break;
	        case 48:
	          o += "0";
	          break;
	        default:
	          o += String.fromCharCode(cc);
	      }
	      return o;
	    }
	    function rnd(val, d) {
	      var dd = Math.pow(10, d);
	      return "" + Math.round(val * dd) / dd;
	    }
	    function dec(val, d) {
	      var _frac = val - Math.floor(val), dd = Math.pow(10, d);
	      if (d < ("" + Math.round(_frac * dd)).length) return 0;
	      return Math.round(_frac * dd);
	    }
	    function carry(val, d) {
	      if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {
	        return 1;
	      }
	      return 0;
	    }
	    function flr(val) {
	      if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0);
	      return "" + Math.floor(val);
	    }
	    function write_num_flt(type, fmt, val) {
	      if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
	        var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
	        if (val >= 0) return write_num_flt("n", ffmt, val);
	        return "(" + write_num_flt("n", ffmt, -val) + ")";
	      }
	      if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
	      if (fmt.indexOf("%") !== -1) return write_num_pct(type, fmt, val);
	      if (fmt.indexOf("E") !== -1) return write_num_exp(fmt, val);
	      if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
	      var o;
	      var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
	      if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);
	      if (fmt.match(/^[#?]+$/)) {
	        o = pad0r(val, 0);
	        if (o === "0") o = "";
	        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
	      }
	      if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);
	      if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
	      if (r = fmt.match(dec1)) {
	        o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function ($$, $1) {
	          return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
	        });
	        return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
	      }
	      fmt = fmt.replace(/^#+([0.])/, "$1");
	      if (r = fmt.match(/^(0*)\.(#*)$/)) {
	        return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
	      }
	      if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0));
	      if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
	        return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
	      }
	      if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
	      if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
	        o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
	        ri = 0;
	        return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function (x) {
	          return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "";
	        }));
	      }
	      if (fmt.match(phone)) {
	        o = write_num_flt(type, "##########", val);
	        return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
	      }
	      var oa = "";
	      if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
	        ri = Math.min(r[4].length, 7);
	        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
	        o = "" + sign;
	        oa = write_num("n", r[1], ff[1]);
	        if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
	        o += oa + r[2] + "/" + r[3];
	        oa = rpad_(ff[2], ri);
	        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
	        o += oa;
	        return o;
	      }
	      if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
	        ri = Math.min(Math.max(r[1].length, r[4].length), 7);
	        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
	        return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
	      }
	      if (r = fmt.match(/^[#0?]+$/)) {
	        o = pad0r(val, 0);
	        if (fmt.length <= o.length) return o;
	        return hashq(fmt.substr(0, fmt.length - o.length)) + o;
	      }
	      if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
	        o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
	        ri = o.indexOf(".");
	        var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
	        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
	      }
	      if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
	        ri = dec(val, r[1].length);
	        return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function ($$) {
	          return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
	        }) + "." + pad0(ri, r[1].length);
	      }
	      switch (fmt) {
	        case "###,##0.00":
	          return write_num_flt(type, "#,##0.00", val);
	        case "###,###":
	        case "##,###":
	        case "#,###":
	          var x = commaify(pad0r(aval, 0));
	          return x !== "0" ? sign + x : "";
	        case "###,###.00":
	          return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
	        case "#,###.00":
	          return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
	      }
	      throw new Error("unsupported format |" + fmt + "|");
	    }
	    function write_num_cm2(type, fmt, val) {
	      var idx = fmt.length - 1;
	      while (fmt.charCodeAt(idx - 1) === 44) --idx;
	      return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
	    }
	    function write_num_pct2(type, fmt, val) {
	      var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
	      return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
	    }
	    function write_num_exp2(fmt, val) {
	      var o;
	      var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
	      if (fmt.match(/^#+0.0E\+0$/)) {
	        if (val == 0) return "0.0E+0"; else if (val < 0) return "-" + write_num_exp2(fmt, -val);
	        var period = fmt.indexOf(".");
	        if (period === -1) period = fmt.indexOf("E");
	        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
	        if (ee < 0) ee += period;
	        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
	        if (!o.match(/[Ee]/)) {
	          var fakee = Math.floor(Math.log(val) * Math.LOG10E);
	          if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee); else o += "E+" + (fakee - ee);
	          o = o.replace(/\+-/, "-");
	        }
	        o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $2, $3) {
	          return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
	        });
	      } else o = val.toExponential(idx);
	      if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
	      if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
	      return o.replace("e", "E");
	    }
	    function write_num_int(type, fmt, val) {
	      if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
	        var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
	        if (val >= 0) return write_num_int("n", ffmt, val);
	        return "(" + write_num_int("n", ffmt, -val) + ")";
	      }
	      if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
	      if (fmt.indexOf("%") !== -1) return write_num_pct2(type, fmt, val);
	      if (fmt.indexOf("E") !== -1) return write_num_exp2(fmt, val);
	      if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
	      var o;
	      var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
	      if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);
	      if (fmt.match(/^[#?]+$/)) {
	        o = "" + val;
	        if (val === 0) o = "";
	        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
	      }
	      if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);
	      if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
	      if (r = fmt.match(dec1)) {
	        o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
	        o = o.replace(/\.(\d*)$/, function ($$, $1) {
	          return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
	        });
	        return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
	      }
	      fmt = fmt.replace(/^#+([0.])/, "$1");
	      if (r = fmt.match(/^(0*)\.(#*)$/)) {
	        return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
	      }
	      if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval);
	      if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
	        return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r[1].length);
	      }
	      if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
	      if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
	        o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
	        ri = 0;
	        return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function (x) {
	          return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "";
	        }));
	      }
	      if (fmt.match(phone)) {
	        o = write_num_int(type, "##########", val);
	        return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
	      }
	      var oa = "";
	      if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
	        ri = Math.min(r[4].length, 7);
	        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
	        o = "" + sign;
	        oa = write_num("n", r[1], ff[1]);
	        if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
	        o += oa + r[2] + "/" + r[3];
	        oa = rpad_(ff[2], ri);
	        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
	        o += oa;
	        return o;
	      }
	      if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
	        ri = Math.min(Math.max(r[1].length, r[4].length), 7);
	        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
	        return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
	      }
	      if (r = fmt.match(/^[#0?]+$/)) {
	        o = "" + val;
	        if (fmt.length <= o.length) return o;
	        return hashq(fmt.substr(0, fmt.length - o.length)) + o;
	      }
	      if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
	        o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
	        ri = o.indexOf(".");
	        var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
	        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
	      }
	      if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
	        return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function ($$) {
	          return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
	        }) + "." + pad0(0, r[1].length);
	      }
	      switch (fmt) {
	        case "###,###":
	        case "##,###":
	        case "#,###":
	          var x = commaify("" + aval);
	          return x !== "0" ? sign + x : "";
	        default:
	          if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
	      }
	      throw new Error("unsupported format |" + fmt + "|");
	    }
	    function write_num(type, fmt, val) {
	      return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
	    }
	    function SSF_split_fmt(fmt) {
	      var out = [];
	      var in_str = false;
	      for (var i = 0, j = 0; i < fmt.length; ++i) switch (fmt.charCodeAt(i)) {
	        case 34:
	          in_str = !in_str;
	          break;
	        case 95:
	        case 42:
	        case 92:
	          ++i;
	          break;
	        case 59:
	          out[out.length] = fmt.substr(j, i - j);
	          j = i + 1;
	      }
	      out[out.length] = fmt.substr(j);
	      if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
	      return out;
	    }
	    var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
	    function fmt_is_date(fmt) {
	      var i = 0, c = "", o = "";
	      while (i < fmt.length) {
	        switch (c = fmt.charAt(i)) {
	          case "G":
	            if (SSF_isgeneral(fmt, i)) i += 6;
	            i++;
	            break;
	          case "\"":
	            for (; fmt.charCodeAt(++i) !== 34 && i < fmt.length; ) {}
	            ++i;
	            break;
	          case "\\":
	            i += 2;
	            break;
	          case "_":
	            i += 2;
	            break;
	          case "@":
	            ++i;
	            break;
	          case "B":
	          case "b":
	            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") return true;
	          case "M":
	          case "D":
	          case "Y":
	          case "H":
	          case "S":
	          case "E":
	          case "m":
	          case "d":
	          case "y":
	          case "h":
	          case "s":
	          case "e":
	          case "g":
	            return true;
	          case "A":
	          case "a":
	          case "上":
	            if (fmt.substr(i, 3).toUpperCase() === "A/P") return true;
	            if (fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
	            if (fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
	            ++i;
	            break;
	          case "[":
	            o = c;
	            while (fmt.charAt(i++) !== "]" && i < fmt.length) o += fmt.charAt(i);
	            if (o.match(SSF_abstime)) return true;
	            break;
	          case ".":
	          case "0":
	          case "#":
	            while (i < fmt.length && (("0#?.,E+-%").indexOf(c = fmt.charAt(++i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && ("0#").indexOf(fmt.charAt(i + 2)) > -1)) {}
	            break;
	          case "?":
	            while (fmt.charAt(++i) === c) {}
	            break;
	          case "*":
	            ++i;
	            if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
	            break;
	          case "(":
	          case ")":
	            ++i;
	            break;
	          case "1":
	          case "2":
	          case "3":
	          case "4":
	          case "5":
	          case "6":
	          case "7":
	          case "8":
	          case "9":
	            while (i < fmt.length && ("0123456789").indexOf(fmt.charAt(++i)) > -1) {}
	            break;
	          case " ":
	            ++i;
	            break;
	          default:
	            ++i;
	            break;
	        }
	      }
	      return false;
	    }
	    function eval_fmt(fmt, v, opts, flen) {
	      var out = [], o = "", i = 0, c = "", lst = "t", dt, j, cc;
	      var hr = "H";
	      while (i < fmt.length) {
	        switch (c = fmt.charAt(i)) {
	          case "G":
	            if (!SSF_isgeneral(fmt, i)) throw new Error("unrecognized character " + c + " in " + fmt);
	            out[out.length] = {
	              t: "G",
	              v: "General"
	            };
	            i += 7;
	            break;
	          case "\"":
	            for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length; ) o += String.fromCharCode(cc);
	            out[out.length] = {
	              t: "t",
	              v: o
	            };
	            ++i;
	            break;
	          case "\\":
	            var w = fmt.charAt(++i), t = w === "(" || w === ")" ? w : "t";
	            out[out.length] = {
	              t: t,
	              v: w
	            };
	            ++i;
	            break;
	          case "_":
	            out[out.length] = {
	              t: "t",
	              v: " "
	            };
	            i += 2;
	            break;
	          case "@":
	            out[out.length] = {
	              t: "T",
	              v: v
	            };
	            ++i;
	            break;
	          case "B":
	          case "b":
	            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") {
	              if (dt == null) {
	                dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === "2");
	                if (dt == null) return "";
	              }
	              out[out.length] = {
	                t: "X",
	                v: fmt.substr(i, 2)
	              };
	              lst = c;
	              i += 2;
	              break;
	            }
	          case "M":
	          case "D":
	          case "Y":
	          case "H":
	          case "S":
	          case "E":
	            c = c.toLowerCase();
	          case "m":
	          case "d":
	          case "y":
	          case "h":
	          case "s":
	          case "e":
	          case "g":
	            if (v < 0) return "";
	            if (dt == null) {
	              dt = SSF_parse_date_code(v, opts);
	              if (dt == null) return "";
	            }
	            o = c;
	            while (++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o += c;
	            if (c === "m" && lst.toLowerCase() === "h") c = "M";
	            if (c === "h") c = hr;
	            out[out.length] = {
	              t: c,
	              v: o
	            };
	            lst = c;
	            break;
	          case "A":
	          case "a":
	          case "上":
	            var q = {
	              t: c,
	              v: c
	            };
	            if (dt == null) dt = SSF_parse_date_code(v, opts);
	            if (fmt.substr(i, 3).toUpperCase() === "A/P") {
	              if (dt != null) q.v = dt.H >= 12 ? fmt.charAt(i + 2) : c;
	              q.t = "T";
	              hr = "h";
	              i += 3;
	            } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") {
	              if (dt != null) q.v = dt.H >= 12 ? "PM" : "AM";
	              q.t = "T";
	              i += 5;
	              hr = "h";
	            } else if (fmt.substr(i, 5).toUpperCase() === "上午/下午") {
	              if (dt != null) q.v = dt.H >= 12 ? "下午" : "上午";
	              q.t = "T";
	              i += 5;
	              hr = "h";
	            } else {
	              q.t = "t";
	              ++i;
	            }
	            if (dt == null && q.t === "T") return "";
	            out[out.length] = q;
	            lst = c;
	            break;
	          case "[":
	            o = c;
	            while (fmt.charAt(i++) !== "]" && i < fmt.length) o += fmt.charAt(i);
	            if (o.slice(-1) !== "]") throw "unterminated \"[\" block: |" + o + "|";
	            if (o.match(SSF_abstime)) {
	              if (dt == null) {
	                dt = SSF_parse_date_code(v, opts);
	                if (dt == null) return "";
	              }
	              out[out.length] = {
	                t: "Z",
	                v: o.toLowerCase()
	              };
	              lst = o.charAt(1);
	            } else if (o.indexOf("$") > -1) {
	              o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
	              if (!fmt_is_date(fmt)) out[out.length] = {
	                t: "t",
	                v: o
	              };
	            }
	            break;
	          case ".":
	            if (dt != null) {
	              o = c;
	              while (++i < fmt.length && (c = fmt.charAt(i)) === "0") o += c;
	              out[out.length] = {
	                t: "s",
	                v: o
	              };
	              break;
	            }
	          case "0":
	          case "#":
	            o = c;
	            while (++i < fmt.length && ("0#?.,E+-%").indexOf(c = fmt.charAt(i)) > -1) o += c;
	            out[out.length] = {
	              t: "n",
	              v: o
	            };
	            break;
	          case "?":
	            o = c;
	            while (fmt.charAt(++i) === c) o += c;
	            out[out.length] = {
	              t: c,
	              v: o
	            };
	            lst = c;
	            break;
	          case "*":
	            ++i;
	            if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
	            break;
	          case "(":
	          case ")":
	            out[out.length] = {
	              t: flen === 1 ? "t" : c,
	              v: c
	            };
	            ++i;
	            break;
	          case "1":
	          case "2":
	          case "3":
	          case "4":
	          case "5":
	          case "6":
	          case "7":
	          case "8":
	          case "9":
	            o = c;
	            while (i < fmt.length && ("0123456789").indexOf(fmt.charAt(++i)) > -1) o += fmt.charAt(i);
	            out[out.length] = {
	              t: "D",
	              v: o
	            };
	            break;
	          case " ":
	            out[out.length] = {
	              t: c,
	              v: c
	            };
	            ++i;
	            break;
	          case "$":
	            out[out.length] = {
	              t: "t",
	              v: "$"
	            };
	            ++i;
	            break;
	          default:
	            if ((",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP").indexOf(c) === -1) throw new Error("unrecognized character " + c + " in " + fmt);
	            out[out.length] = {
	              t: "t",
	              v: c
	            };
	            ++i;
	            break;
	        }
	      }
	      var bt = 0, ss0 = 0, ssm;
	      for ((i = out.length - 1, lst = "t"); i >= 0; --i) {
	        switch (out[i].t) {
	          case "h":
	          case "H":
	            out[i].t = hr;
	            lst = "h";
	            if (bt < 1) bt = 1;
	            break;
	          case "s":
	            if (ssm = out[i].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);
	            if (bt < 3) bt = 3;
	          case "d":
	          case "y":
	          case "M":
	          case "e":
	            lst = out[i].t;
	            break;
	          case "m":
	            if (lst === "s") {
	              out[i].t = "M";
	              if (bt < 2) bt = 2;
	            }
	            break;
	          case "X":
	            break;
	          case "Z":
	            if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
	            if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
	            if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
	        }
	      }
	      switch (bt) {
	        case 0:
	          break;
	        case 1:
	          if (dt.u >= 0.5) {
	            dt.u = 0;
	            ++dt.S;
	          }
	          if (dt.S >= 60) {
	            dt.S = 0;
	            ++dt.M;
	          }
	          if (dt.M >= 60) {
	            dt.M = 0;
	            ++dt.H;
	          }
	          break;
	        case 2:
	          if (dt.u >= 0.5) {
	            dt.u = 0;
	            ++dt.S;
	          }
	          if (dt.S >= 60) {
	            dt.S = 0;
	            ++dt.M;
	          }
	          break;
	      }
	      var nstr = "", jj;
	      for (i = 0; i < out.length; ++i) {
	        switch (out[i].t) {
	          case "t":
	          case "T":
	          case " ":
	          case "D":
	            break;
	          case "X":
	            out[i].v = "";
	            out[i].t = ";";
	            break;
	          case "d":
	          case "m":
	          case "y":
	          case "h":
	          case "H":
	          case "M":
	          case "s":
	          case "e":
	          case "b":
	          case "Z":
	            out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
	            out[i].t = "t";
	            break;
	          case "n":
	          case "?":
	            jj = i + 1;
	            while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
	              out[i].v += out[jj].v;
	              out[jj] = {
	                v: "",
	                t: ";"
	              };
	              ++jj;
	            }
	            nstr += out[i].v;
	            i = jj - 1;
	            break;
	          case "G":
	            out[i].t = "t";
	            out[i].v = SSF_general(v, opts);
	            break;
	        }
	      }
	      var vv = "", myv, ostr;
	      if (nstr.length > 0) {
	        if (nstr.charCodeAt(0) == 40) {
	          myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
	          ostr = write_num("n", nstr, myv);
	        } else {
	          myv = v < 0 && flen > 1 ? -v : v;
	          ostr = write_num("n", nstr, myv);
	          if (myv < 0 && out[0] && out[0].t == "t") {
	            ostr = ostr.substr(1);
	            out[0].v = "-" + out[0].v;
	          }
	        }
	        jj = ostr.length - 1;
	        var decpt = out.length;
	        for (i = 0; i < out.length; ++i) if (out[i] != null && out[i].t != "t" && out[i].v.indexOf(".") > -1) {
	          decpt = i;
	          break;
	        }
	        var lasti = out.length;
	        if (decpt === out.length && ostr.indexOf("E") === -1) {
	          for (i = out.length - 1; i >= 0; --i) {
	            if (out[i] == null || ("n?").indexOf(out[i].t) === -1) continue;
	            if (jj >= out[i].v.length - 1) {
	              jj -= out[i].v.length;
	              out[i].v = ostr.substr(jj + 1, out[i].v.length);
	            } else if (jj < 0) out[i].v = ""; else {
	              out[i].v = ostr.substr(0, jj + 1);
	              jj = -1;
	            }
	            out[i].t = "t";
	            lasti = i;
	          }
	          if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
	        } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
	          jj = ostr.indexOf(".") - 1;
	          for (i = decpt; i >= 0; --i) {
	            if (out[i] == null || ("n?").indexOf(out[i].t) === -1) continue;
	            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
	            vv = out[i].v.substr(j + 1);
	            for (; j >= 0; --j) {
	              if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
	            }
	            out[i].v = vv;
	            out[i].t = "t";
	            lasti = i;
	          }
	          if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
	          jj = ostr.indexOf(".") + 1;
	          for (i = decpt; i < out.length; ++i) {
	            if (out[i] == null || ("n?(").indexOf(out[i].t) === -1 && i !== decpt) continue;
	            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
	            vv = out[i].v.substr(0, j);
	            for (; j < out[i].v.length; ++j) {
	              if (jj < ostr.length) vv += ostr.charAt(jj++);
	            }
	            out[i].v = vv;
	            out[i].t = "t";
	            lasti = i;
	          }
	        }
	      }
	      for (i = 0; i < out.length; ++i) if (out[i] != null && ("n?").indexOf(out[i].t) > -1) {
	        myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v;
	        out[i].v = write_num(out[i].t, out[i].v, myv);
	        out[i].t = "t";
	      }
	      var retval = "";
	      for (i = 0; i !== out.length; ++i) if (out[i] != null) retval += out[i].v;
	      return retval;
	    }
	    var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
	    function chkcond(v, rr) {
	      if (rr == null) return false;
	      var thresh = parseFloat(rr[2]);
	      switch (rr[1]) {
	        case "=":
	          if (v == thresh) return true;
	          break;
	        case ">":
	          if (v > thresh) return true;
	          break;
	        case "<":
	          if (v < thresh) return true;
	          break;
	        case "<>":
	          if (v != thresh) return true;
	          break;
	        case ">=":
	          if (v >= thresh) return true;
	          break;
	        case "<=":
	          if (v <= thresh) return true;
	          break;
	      }
	      return false;
	    }
	    function choose_fmt(f, v) {
	      var fmt = SSF_split_fmt(f);
	      var l = fmt.length, lat = fmt[l - 1].indexOf("@");
	      if (l < 4 && lat > -1) --l;
	      if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
	      if (typeof v !== "number") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
	      switch (fmt.length) {
	        case 1:
	          fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
	          break;
	        case 2:
	          fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
	          break;
	        case 3:
	          fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
	          break;
	      }
	      var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
	      if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
	      if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
	        var m1 = fmt[0].match(cfregex2);
	        var m2 = fmt[1].match(cfregex2);
	        return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
	      }
	      return [l, ff];
	    }
	    function SSF_format(fmt, v, o) {
	      if (o == null) o = {};
	      var sfmt = "";
	      switch (typeof fmt) {
	        case "string":
	          if (fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF; else sfmt = fmt;
	          break;
	        case "number":
	          if (fmt == 14 && o.dateNF) sfmt = o.dateNF; else sfmt = (o.table != null ? o.table : table_fmt)[fmt];
	          if (sfmt == null) sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
	          if (sfmt == null) sfmt = SSF_default_str[fmt] || "General";
	          break;
	      }
	      if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);
	      if (v instanceof Date) v = datenum(v, o.date1904);
	      var f = choose_fmt(sfmt, v);
	      if (SSF_isgeneral(f[1])) return SSF_general(v, o);
	      if (v === true) v = "TRUE"; else if (v === false) v = "FALSE"; else if (v === "" || v == null) return "";
	      return eval_fmt(f[1], v, o, f[0]);
	    }
	    function SSF_load(fmt, idx) {
	      if (typeof idx != "number") {
	        idx = +idx || -1;
	        for (var i = 0; i < 392; ++i) {
	          if (table_fmt[i] == undefined) {
	            if (idx < 0) idx = i;
	            continue;
	          }
	          if (table_fmt[i] == fmt) {
	            idx = i;
	            break;
	          }
	        }
	        if (idx < 0) idx = 391;
	      }
	      table_fmt[idx] = fmt;
	      return idx;
	    }
	    function SSF_load_table(tbl) {
	      for (var i = 0; i != 392; ++i) if (tbl[i] !== undefined) SSF_load(tbl[i], i);
	    }
	    function make_ssf() {
	      table_fmt = SSF_init_table();
	    }
	    var SSF = {
	      format: SSF_format,
	      load: SSF_load,
	      _table: table_fmt,
	      load_table: SSF_load_table,
	      parse_date_code: SSF_parse_date_code,
	      is_date: fmt_is_date,
	      get_table: function get_table() {
	        return SSF._table = table_fmt;
	      }
	    };
	    var SSFImplicit = {
	      "5": "\"$\"#,##0_);\\(\"$\"#,##0\\)",
	      "6": "\"$\"#,##0_);[Red]\\(\"$\"#,##0\\)",
	      "7": "\"$\"#,##0.00_);\\(\"$\"#,##0.00\\)",
	      "8": "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)",
	      "23": "General",
	      "24": "General",
	      "25": "General",
	      "26": "General",
	      "27": "m/d/yy",
	      "28": "m/d/yy",
	      "29": "m/d/yy",
	      "30": "m/d/yy",
	      "31": "m/d/yy",
	      "32": "h:mm:ss",
	      "33": "h:mm:ss",
	      "34": "h:mm:ss",
	      "35": "h:mm:ss",
	      "36": "m/d/yy",
	      "41": "_(* #,##0_);_(* (#,##0);_(* \"-\"_);_(@_)",
	      "42": "_(\"$\"* #,##0_);_(\"$\"* (#,##0);_(\"$\"* \"-\"_);_(@_)",
	      "43": "_(* #,##0.00_);_(* (#,##0.00);_(* \"-\"??_);_(@_)",
	      "44": "_(\"$\"* #,##0.00_);_(\"$\"* (#,##0.00);_(\"$\"* \"-\"??_);_(@_)",
	      "50": "m/d/yy",
	      "51": "m/d/yy",
	      "52": "m/d/yy",
	      "53": "m/d/yy",
	      "54": "m/d/yy",
	      "55": "m/d/yy",
	      "56": "m/d/yy",
	      "57": "m/d/yy",
	      "58": "m/d/yy",
	      "59": "0",
	      "60": "0.00",
	      "61": "#,##0",
	      "62": "#,##0.00",
	      "63": "\"$\"#,##0_);\\(\"$\"#,##0\\)",
	      "64": "\"$\"#,##0_);[Red]\\(\"$\"#,##0\\)",
	      "65": "\"$\"#,##0.00_);\\(\"$\"#,##0.00\\)",
	      "66": "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)",
	      "67": "0%",
	      "68": "0.00%",
	      "69": "# ?/?",
	      "70": "# ??/??",
	      "71": "m/d/yy",
	      "72": "m/d/yy",
	      "73": "d-mmm-yy",
	      "74": "d-mmm",
	      "75": "mmm-yy",
	      "76": "h:mm",
	      "77": "h:mm:ss",
	      "78": "m/d/yy h:mm",
	      "79": "mm:ss",
	      "80": "[h]:mm:ss",
	      "81": "mmss.0"
	    };
	    var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
	    function dateNF_regex(dateNF) {
	      var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
	      fmt = fmt.replace(dateNFregex, "(\\d+)");
	      dateNFregex.lastIndex = 0;
	      return new RegExp("^" + fmt + "$");
	    }
	    function dateNF_fix(str, dateNF, match) {
	      var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
	      (dateNF.match(dateNFregex) || []).forEach(function (n, i) {
	        var v = parseInt(match[i + 1], 10);
	        switch (n.toLowerCase().charAt(0)) {
	          case "y":
	            Y = v;
	            break;
	          case "d":
	            d = v;
	            break;
	          case "h":
	            H = v;
	            break;
	          case "s":
	            S = v;
	            break;
	          case "m":
	            if (H >= 0) M = v; else m = v;
	            break;
	        }
	      });
	      dateNFregex.lastIndex = 0;
	      if (S >= 0 && M == -1 && m >= 0) {
	        M = m;
	        m = -1;
	      }
	      var datestr = ("" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
	      if (datestr.length == 7) datestr = "0" + datestr;
	      if (datestr.length == 8) datestr = "20" + datestr;
	      var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
	      if (H == -1 && M == -1 && S == -1) return datestr;
	      if (Y == -1 && m == -1 && d == -1) return timestr;
	      return datestr + "T" + timestr;
	    }
	    var bad_formats = {
	      "d.m": "d\\.m"
	    };
	    function SSF__load(fmt, idx) {
	      return SSF_load(bad_formats[fmt] || fmt, idx);
	    }
	    var CRC32 = (function () {
	      var CRC32 = {};
	      CRC32.version = "1.2.0";
	      function signed_crc_table() {
	        var c = 0, table = new Array(256);
	        for (var n = 0; n != 256; ++n) {
	          c = n;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
	          table[n] = c;
	        }
	        return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
	      }
	      var T0 = signed_crc_table();
	      function slice_by_16_tables(T) {
	        var c = 0, v = 0, n = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
	        for (n = 0; n != 256; ++n) table[n] = T[n];
	        for (n = 0; n != 256; ++n) {
	          v = T[n];
	          for (c = 256 + n; c < 4096; c += 256) v = table[c] = v >>> 8 ^ T[v & 255];
	        }
	        var out = [];
	        for (n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== "undefined" && typeof table.subarray == "function" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
	        return out;
	      }
	      var TT = slice_by_16_tables(T0);
	      var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
	      var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
	      var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
	      function crc32_bstr(bstr, seed) {
	        var C = seed ^ -1;
	        for (var i = 0, L = bstr.length; i < L; ) C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 255];
	        return ~C;
	      }
	      function crc32_buf(B, seed) {
	        var C = seed ^ -1, L = B.length - 15, i = 0;
	        for (; i < L; ) C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
	        L += 15;
	        while (i < L) C = C >>> 8 ^ T0[(C ^ B[i++]) & 255];
	        return ~C;
	      }
	      function crc32_str(str, seed) {
	        var C = seed ^ -1;
	        for (var i = 0, L = str.length, c = 0, d = 0; i < L; ) {
	          c = str.charCodeAt(i++);
	          if (c < 128) {
	            C = C >>> 8 ^ T0[(C ^ c) & 255];
	          } else if (c < 2048) {
	            C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 255];
	            C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
	          } else if (c >= 55296 && c < 57344) {
	            c = (c & 1023) + 64;
	            d = str.charCodeAt(i++) & 1023;
	            C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 255];
	            C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 255];
	            C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
	            C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 255];
	          } else {
	            C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 255];
	            C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 255];
	            C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
	          }
	        }
	        return ~C;
	      }
	      CRC32.table = T0;
	      CRC32.bstr = crc32_bstr;
	      CRC32.buf = crc32_buf;
	      CRC32.str = crc32_str;
	      return CRC32;
	    })();
	    var CFB = (function _CFB() {
	      var exports = {};
	      exports.version = "1.2.2";
	      function namecmp(l, r) {
	        var L = l.split("/"), R = r.split("/");
	        for (var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {
	          if (c = L[i].length - R[i].length) return c;
	          if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
	        }
	        return L.length - R.length;
	      }
	      function dirname(p) {
	        if (p.charAt(p.length - 1) == "/") return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
	        var c = p.lastIndexOf("/");
	        return c === -1 ? p : p.slice(0, c + 1);
	      }
	      function filename(p) {
	        if (p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
	        var c = p.lastIndexOf("/");
	        return c === -1 ? p : p.slice(c + 1);
	      }
	      function write_dos_date(buf, date) {
	        if (typeof date === "string") date = new Date(date);
	        var hms = date.getHours();
	        hms = hms << 6 | date.getMinutes();
	        hms = hms << 5 | date.getSeconds() >>> 1;
	        buf.write_shift(2, hms);
	        var ymd = date.getFullYear() - 1980;
	        ymd = ymd << 4 | date.getMonth() + 1;
	        ymd = ymd << 5 | date.getDate();
	        buf.write_shift(2, ymd);
	      }
	      function parse_dos_date(buf) {
	        var hms = buf.read_shift(2) & 65535;
	        var ymd = buf.read_shift(2) & 65535;
	        var val = new Date();
	        var d = ymd & 31;
	        ymd >>>= 5;
	        var m = ymd & 15;
	        ymd >>>= 4;
	        val.setMilliseconds(0);
	        val.setFullYear(ymd + 1980);
	        val.setMonth(m - 1);
	        val.setDate(d);
	        var S = hms & 31;
	        hms >>>= 5;
	        var M = hms & 63;
	        hms >>>= 6;
	        val.setHours(hms);
	        val.setMinutes(M);
	        val.setSeconds(S << 1);
	        return val;
	      }
	      function parse_extra_field(blob) {
	        prep_blob(blob, 0);
	        var o = {};
	        var flags = 0;
	        while (blob.l <= blob.length - 4) {
	          var type = blob.read_shift(2);
	          var sz = blob.read_shift(2), tgt = blob.l + sz;
	          var p = {};
	          switch (type) {
	            case 21589:
	              {
	                flags = blob.read_shift(1);
	                if (flags & 1) p.mtime = blob.read_shift(4);
	                if (sz > 5) {
	                  if (flags & 2) p.atime = blob.read_shift(4);
	                  if (flags & 4) p.ctime = blob.read_shift(4);
	                }
	                if (p.mtime) p.mt = new Date(p.mtime * 1000);
	              }
	              break;
	            case 1:
	              {
	                var sz1 = blob.read_shift(4), sz2 = blob.read_shift(4);
	                p.usz = sz2 * Math.pow(2, 32) + sz1;
	                sz1 = blob.read_shift(4);
	                sz2 = blob.read_shift(4);
	                p.csz = sz2 * Math.pow(2, 32) + sz1;
	              }
	              break;
	          }
	          blob.l = tgt;
	          o[type] = p;
	        }
	        return o;
	      }
	      var fs;
	      function get_fs() {
	        return fs || (fs = _fs);
	      }
	      function parse(file, options) {
	        if (file[0] == 80 && file[1] == 75) return parse_zip(file, options);
	        if ((file[0] | 32) == 109 && (file[1] | 32) == 105) return parse_mad(file, options);
	        if (file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
	        var mver = 3;
	        var ssz = 512;
	        var nmfs = 0;
	        var difat_sec_cnt = 0;
	        var dir_start = 0;
	        var minifat_start = 0;
	        var difat_start = 0;
	        var fat_addrs = [];
	        var blob = file.slice(0, 512);
	        prep_blob(blob, 0);
	        var mv = check_get_mver(blob);
	        mver = mv[0];
	        switch (mver) {
	          case 3:
	            ssz = 512;
	            break;
	          case 4:
	            ssz = 4096;
	            break;
	          case 0:
	            if (mv[1] == 0) return parse_zip(file, options);
	          default:
	            throw new Error("Major Version: Expected 3 or 4 saw " + mver);
	        }
	        if (ssz !== 512) {
	          blob = file.slice(0, ssz);
	          prep_blob(blob, 28);
	        }
	        var header = file.slice(0, ssz);
	        check_shifts(blob, mver);
	        var dir_cnt = blob.read_shift(4, "i");
	        if (mver === 3 && dir_cnt !== 0) throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
	        blob.l += 4;
	        dir_start = blob.read_shift(4, "i");
	        blob.l += 4;
	        blob.chk("00100000", "Mini Stream Cutoff Size: ");
	        minifat_start = blob.read_shift(4, "i");
	        nmfs = blob.read_shift(4, "i");
	        difat_start = blob.read_shift(4, "i");
	        difat_sec_cnt = blob.read_shift(4, "i");
	        for (var q = -1, j = 0; j < 109; ++j) {
	          q = blob.read_shift(4, "i");
	          if (q < 0) break;
	          fat_addrs[j] = q;
	        }
	        var sectors = sectorify(file, ssz);
	        sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
	        var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
	        if (dir_start < sector_list.length) sector_list[dir_start].name = "!Directory";
	        if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
	        sector_list[fat_addrs[0]].name = "!FAT";
	        sector_list.fat_addrs = fat_addrs;
	        sector_list.ssz = ssz;
	        var files = {}, Paths = [], FileIndex = [], FullPaths = [];
	        read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
	        build_full_paths(FileIndex, FullPaths, Paths);
	        Paths.shift();
	        var o = {
	          FileIndex: FileIndex,
	          FullPaths: FullPaths
	        };
	        if (options && options.raw) o.raw = {
	          header: header,
	          sectors: sectors
	        };
	        return o;
	      }
	      function check_get_mver(blob) {
	        if (blob[blob.l] == 80 && blob[blob.l + 1] == 75) return [0, 0];
	        blob.chk(HEADER_SIGNATURE, "Header Signature: ");
	        blob.l += 16;
	        var mver = blob.read_shift(2, "u");
	        return [blob.read_shift(2, "u"), mver];
	      }
	      function check_shifts(blob, mver) {
	        var shift = 9;
	        blob.l += 2;
	        switch (shift = blob.read_shift(2)) {
	          case 9:
	            if (mver != 3) throw new Error("Sector Shift: Expected 9 saw " + shift);
	            break;
	          case 12:
	            if (mver != 4) throw new Error("Sector Shift: Expected 12 saw " + shift);
	            break;
	          default:
	            throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
	        }
	        blob.chk("0600", "Mini Sector Shift: ");
	        blob.chk("000000000000", "Reserved: ");
	      }
	      function sectorify(file, ssz) {
	        var nsectors = Math.ceil(file.length / ssz) - 1;
	        var sectors = [];
	        for (var i = 1; i < nsectors; ++i) sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);
	        sectors[nsectors - 1] = file.slice(nsectors * ssz);
	        return sectors;
	      }
	      function build_full_paths(FI, FP, Paths) {
	        var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
	        var dad = [], q = [];
	        for (; i < pl; ++i) {
	          dad[i] = q[i] = i;
	          FP[i] = Paths[i];
	        }
	        for (; j < q.length; ++j) {
	          i = q[j];
	          L = FI[i].L;
	          R = FI[i].R;
	          C = FI[i].C;
	          if (dad[i] === i) {
	            if (L !== -1 && dad[L] !== L) dad[i] = dad[L];
	            if (R !== -1 && dad[R] !== R) dad[i] = dad[R];
	          }
	          if (C !== -1) dad[C] = i;
	          if (L !== -1 && i != dad[i]) {
	            dad[L] = dad[i];
	            if (q.lastIndexOf(L) < j) q.push(L);
	          }
	          if (R !== -1 && i != dad[i]) {
	            dad[R] = dad[i];
	            if (q.lastIndexOf(R) < j) q.push(R);
	          }
	        }
	        for (i = 1; i < pl; ++i) if (dad[i] === i) {
	          if (R !== -1 && dad[R] !== R) dad[i] = dad[R]; else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];
	        }
	        for (i = 1; i < pl; ++i) {
	          if (FI[i].type === 0) continue;
	          j = i;
	          if (j != dad[j]) do {
	            j = dad[j];
	            FP[i] = FP[j] + "/" + FP[i];
	          } while (j !== 0 && -1 !== dad[j] && j != dad[j]);
	          dad[i] = -1;
	        }
	        FP[0] += "/";
	        for (i = 1; i < pl; ++i) {
	          if (FI[i].type !== 2) FP[i] += "/";
	        }
	      }
	      function get_mfat_entry(entry, payload, mini) {
	        var start = entry.start, size = entry.size;
	        var o = [];
	        var idx = start;
	        while (mini && size > 0 && idx >= 0) {
	          o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
	          size -= MSSZ;
	          idx = __readInt32LE(mini, idx * 4);
	        }
	        if (o.length === 0) return new_buf(0);
	        return bconcat(o).slice(0, entry.size);
	      }
	      function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
	        var q = ENDOFCHAIN;
	        if (idx === ENDOFCHAIN) {
	          if (cnt !== 0) throw new Error("DIFAT chain shorter than expected");
	        } else if (idx !== -1) {
	          var sector = sectors[idx], m = (ssz >>> 2) - 1;
	          if (!sector) return;
	          for (var i = 0; i < m; ++i) {
	            if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;
	            fat_addrs.push(q);
	          }
	          if (cnt >= 1) sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
	        }
	      }
	      function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
	        var buf = [], buf_chain = [];
	        if (!chkd) chkd = [];
	        var modulus = ssz - 1, j = 0, jj = 0;
	        for (j = start; j >= 0; ) {
	          chkd[j] = true;
	          buf[buf.length] = j;
	          buf_chain.push(sectors[j]);
	          var addr = fat_addrs[Math.floor(j * 4 / ssz)];
	          jj = j * 4 & modulus;
	          if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
	          if (!sectors[addr]) break;
	          j = __readInt32LE(sectors[addr], jj);
	        }
	        return {
	          nodes: buf,
	          data: __toBuffer([buf_chain])
	        };
	      }
	      function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
	        var sl = sectors.length, sector_list = [];
	        var chkd = [], buf = [], buf_chain = [];
	        var modulus = ssz - 1, i = 0, j = 0, k = 0, jj = 0;
	        for (i = 0; i < sl; ++i) {
	          buf = [];
	          k = i + dir_start;
	          if (k >= sl) k -= sl;
	          if (chkd[k]) continue;
	          buf_chain = [];
	          var seen = [];
	          for (j = k; j >= 0; ) {
	            seen[j] = true;
	            chkd[j] = true;
	            buf[buf.length] = j;
	            buf_chain.push(sectors[j]);
	            var addr = fat_addrs[Math.floor(j * 4 / ssz)];
	            jj = j * 4 & modulus;
	            if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
	            if (!sectors[addr]) break;
	            j = __readInt32LE(sectors[addr], jj);
	            if (seen[j]) break;
	          }
	          sector_list[k] = {
	            nodes: buf,
	            data: __toBuffer([buf_chain])
	          };
	        }
	        return sector_list;
	      }
	      function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
	        var minifat_store = 0, pl = Paths.length ? 2 : 0;
	        var sector = sector_list[dir_start].data;
	        var i = 0, namelen = 0, name;
	        for (; i < sector.length; i += 128) {
	          var blob = sector.slice(i, i + 128);
	          prep_blob(blob, 64);
	          namelen = blob.read_shift(2);
	          name = __utf16le(blob, 0, namelen - pl);
	          Paths.push(name);
	          var o = {
	            name: name,
	            type: blob.read_shift(1),
	            color: blob.read_shift(1),
	            L: blob.read_shift(4, "i"),
	            R: blob.read_shift(4, "i"),
	            C: blob.read_shift(4, "i"),
	            clsid: blob.read_shift(16),
	            state: blob.read_shift(4, "i"),
	            start: 0,
	            size: 0
	          };
	          var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
	          if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);
	          var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
	          if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);
	          o.start = blob.read_shift(4, "i");
	          o.size = blob.read_shift(4, "i");
	          if (o.size < 0 && o.start < 0) {
	            o.size = o.type = 0;
	            o.start = ENDOFCHAIN;
	            o.name = "";
	          }
	          if (o.type === 5) {
	            minifat_store = o.start;
	            if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
	          } else if (o.size >= 4096) {
	            o.storage = "fat";
	            if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
	            sector_list[o.start].name = o.name;
	            o.content = sector_list[o.start].data.slice(0, o.size);
	          } else {
	            o.storage = "minifat";
	            if (o.size < 0) o.size = 0; else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
	              o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || ({})).data);
	            }
	          }
	          if (o.content) prep_blob(o.content, 0);
	          files[name] = o;
	          FileIndex.push(o);
	        }
	      }
	      function read_date(blob, offset) {
	        return new Date((__readUInt32LE(blob, offset + 4) / 10000000 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 10000000 - 11644473600) * 1000);
	      }
	      function read_file(filename, options) {
	        get_fs();
	        return parse(fs.readFileSync(filename), options);
	      }
	      function read(blob, options) {
	        var type = options && options.type;
	        if (!type) {
	          if (has_buf && Buffer.isBuffer(blob)) type = "buffer";
	        }
	        switch (type || "base64") {
	          case "file":
	            return read_file(blob, options);
	          case "base64":
	            return parse(s2a(Base64_decode(blob)), options);
	          case "binary":
	            return parse(s2a(blob), options);
	        }
	        return parse(blob, options);
	      }
	      function init_cfb(cfb, opts) {
	        var o = opts || ({}), root = o.root || "Root Entry";
	        if (!cfb.FullPaths) cfb.FullPaths = [];
	        if (!cfb.FileIndex) cfb.FileIndex = [];
	        if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
	        if (cfb.FullPaths.length === 0) {
	          cfb.FullPaths[0] = root + "/";
	          cfb.FileIndex[0] = {
	            name: root,
	            type: 5
	          };
	        }
	        if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
	        seed_cfb(cfb);
	      }
	      function seed_cfb(cfb) {
	        var nm = "\u0001Sh33tJ5";
	        if (CFB.find(cfb, "/" + nm)) return;
	        var p = new_buf(4);
	        p[0] = 55;
	        p[1] = p[3] = 50;
	        p[2] = 54;
	        cfb.FileIndex.push({
	          name: nm,
	          type: 2,
	          content: p,
	          size: 4,
	          L: 69,
	          R: 69,
	          C: 69
	        });
	        cfb.FullPaths.push(cfb.FullPaths[0] + nm);
	        rebuild_cfb(cfb);
	      }
	      function rebuild_cfb(cfb, f) {
	        init_cfb(cfb);
	        var gc = false, s = false;
	        for (var i = cfb.FullPaths.length - 1; i >= 0; --i) {
	          var _file = cfb.FileIndex[i];
	          switch (_file.type) {
	            case 0:
	              if (s) gc = true; else {
	                cfb.FileIndex.pop();
	                cfb.FullPaths.pop();
	              }
	              break;
	            case 1:
	            case 2:
	            case 5:
	              s = true;
	              if (isNaN(_file.R * _file.L * _file.C)) gc = true;
	              if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
	              break;
	            default:
	              gc = true;
	              break;
	          }
	        }
	        if (!gc && !f) return;
	        var now = new Date(1987, 1, 19), j = 0;
	        var fullPaths = Object.create ? Object.create(null) : {};
	        var data = [];
	        for (i = 0; i < cfb.FullPaths.length; ++i) {
	          fullPaths[cfb.FullPaths[i]] = true;
	          if (cfb.FileIndex[i].type === 0) continue;
	          data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);
	        }
	        for (i = 0; i < data.length; ++i) {
	          var dad = dirname(data[i][0]);
	          s = fullPaths[dad];
	          while (!s) {
	            while (dirname(dad) && !fullPaths[dirname(dad)]) dad = dirname(dad);
	            data.push([dad, {
	              name: filename(dad).replace("/", ""),
	              type: 1,
	              clsid: HEADER_CLSID,
	              ct: now,
	              mt: now,
	              content: null
	            }]);
	            fullPaths[dad] = true;
	            dad = dirname(data[i][0]);
	            s = fullPaths[dad];
	          }
	        }
	        data.sort(function (x, y) {
	          return namecmp(x[0], y[0]);
	        });
	        cfb.FullPaths = [];
	        cfb.FileIndex = [];
	        for (i = 0; i < data.length; ++i) {
	          cfb.FullPaths[i] = data[i][0];
	          cfb.FileIndex[i] = data[i][1];
	        }
	        for (i = 0; i < data.length; ++i) {
	          var elt = cfb.FileIndex[i];
	          var nm = cfb.FullPaths[i];
	          elt.name = filename(nm).replace("/", "");
	          elt.L = elt.R = elt.C = -(elt.color = 1);
	          elt.size = elt.content ? elt.content.length : 0;
	          elt.start = 0;
	          elt.clsid = elt.clsid || HEADER_CLSID;
	          if (i === 0) {
	            elt.C = data.length > 1 ? 1 : -1;
	            elt.size = 0;
	            elt.type = 5;
	          } else if (nm.slice(-1) == "/") {
	            for (j = i + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == nm) break;
	            elt.C = j >= data.length ? -1 : j;
	            for (j = i + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;
	            elt.R = j >= data.length ? -1 : j;
	            elt.type = 1;
	          } else {
	            if (dirname(cfb.FullPaths[i + 1] || "") == dirname(nm)) elt.R = i + 1;
	            elt.type = 2;
	          }
	        }
	      }
	      function _write(cfb, options) {
	        var _opts = options || ({});
	        if (_opts.fileType == "mad") return write_mad(cfb, _opts);
	        rebuild_cfb(cfb);
	        switch (_opts.fileType) {
	          case "zip":
	            return write_zip(cfb, _opts);
	        }
	        var L = (function (cfb) {
	          var mini_size = 0, fat_size = 0;
	          for (var i = 0; i < cfb.FileIndex.length; ++i) {
	            var file = cfb.FileIndex[i];
	            if (!file.content) continue;
	            var flen = file.content.length;
	            if (flen > 0) {
	              if (flen < 4096) mini_size += flen + 63 >> 6; else fat_size += flen + 511 >> 9;
	            }
	          }
	          var dir_cnt = cfb.FullPaths.length + 3 >> 2;
	          var mini_cnt = mini_size + 7 >> 3;
	          var mfat_cnt = mini_size + 127 >> 7;
	          var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
	          var fat_cnt = fat_base + 127 >> 7;
	          var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
	          while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
	          var L = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
	          cfb.FileIndex[0].size = mini_size << 6;
	          L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);
	          return L;
	        })(cfb);
	        var o = new_buf(L[7] << 9);
	        var i = 0, T = 0;
	        {
	          for (i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);
	          for (i = 0; i < 8; ++i) o.write_shift(2, 0);
	          o.write_shift(2, 62);
	          o.write_shift(2, 3);
	          o.write_shift(2, 65534);
	          o.write_shift(2, 9);
	          o.write_shift(2, 6);
	          for (i = 0; i < 3; ++i) o.write_shift(2, 0);
	          o.write_shift(4, 0);
	          o.write_shift(4, L[2]);
	          o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
	          o.write_shift(4, 0);
	          o.write_shift(4, 1 << 12);
	          o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
	          o.write_shift(4, L[3]);
	          o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
	          o.write_shift(4, L[1]);
	          for (i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
	        }
	        if (L[1]) {
	          for (T = 0; T < L[1]; ++T) {
	            for (; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
	            o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
	          }
	        }
	        var chainit = function (w) {
	          for (T += w; i < T - 1; ++i) o.write_shift(-4, i + 1);
	          if (w) {
	            ++i;
	            o.write_shift(-4, ENDOFCHAIN);
	          }
	        };
	        T = i = 0;
	        for (T += L[1]; i < T; ++i) o.write_shift(-4, consts.DIFSECT);
	        for (T += L[2]; i < T; ++i) o.write_shift(-4, consts.FATSECT);
	        chainit(L[3]);
	        chainit(L[4]);
	        var j = 0, flen = 0;
	        var file = cfb.FileIndex[0];
	        for (; j < cfb.FileIndex.length; ++j) {
	          file = cfb.FileIndex[j];
	          if (!file.content) continue;
	          flen = file.content.length;
	          if (flen < 4096) continue;
	          file.start = T;
	          chainit(flen + 511 >> 9);
	        }
	        chainit(L[6] + 7 >> 3);
	        while (o.l & 511) o.write_shift(-4, consts.ENDOFCHAIN);
	        T = i = 0;
	        for (j = 0; j < cfb.FileIndex.length; ++j) {
	          file = cfb.FileIndex[j];
	          if (!file.content) continue;
	          flen = file.content.length;
	          if (!flen || flen >= 4096) continue;
	          file.start = T;
	          chainit(flen + 63 >> 6);
	        }
	        while (o.l & 511) o.write_shift(-4, consts.ENDOFCHAIN);
	        for (i = 0; i < L[4] << 2; ++i) {
	          var nm = cfb.FullPaths[i];
	          if (!nm || nm.length === 0) {
	            for (j = 0; j < 17; ++j) o.write_shift(4, 0);
	            for (j = 0; j < 3; ++j) o.write_shift(4, -1);
	            for (j = 0; j < 12; ++j) o.write_shift(4, 0);
	            continue;
	          }
	          file = cfb.FileIndex[i];
	          if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
	          var _nm = i === 0 && _opts.root || file.name;
	          if (_nm.length > 32) {
	            console.error("Name " + _nm + " will be truncated to " + _nm.slice(0, 32));
	            _nm = _nm.slice(0, 32);
	          }
	          flen = 2 * (_nm.length + 1);
	          o.write_shift(64, _nm, "utf16le");
	          o.write_shift(2, flen);
	          o.write_shift(1, file.type);
	          o.write_shift(1, file.color);
	          o.write_shift(-4, file.L);
	          o.write_shift(-4, file.R);
	          o.write_shift(-4, file.C);
	          if (!file.clsid) for (j = 0; j < 4; ++j) o.write_shift(4, 0); else o.write_shift(16, file.clsid, "hex");
	          o.write_shift(4, file.state || 0);
	          o.write_shift(4, 0);
	          o.write_shift(4, 0);
	          o.write_shift(4, 0);
	          o.write_shift(4, 0);
	          o.write_shift(4, file.start);
	          o.write_shift(4, file.size);
	          o.write_shift(4, 0);
	        }
	        for (i = 1; i < cfb.FileIndex.length; ++i) {
	          file = cfb.FileIndex[i];
	          if (file.size >= 4096) {
	            o.l = file.start + 1 << 9;
	            if (has_buf && Buffer.isBuffer(file.content)) {
	              file.content.copy(o, o.l, 0, file.size);
	              o.l += file.size + 511 & -512;
	            } else {
	              for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
	              for (; j & 511; ++j) o.write_shift(1, 0);
	            }
	          }
	        }
	        for (i = 1; i < cfb.FileIndex.length; ++i) {
	          file = cfb.FileIndex[i];
	          if (file.size > 0 && file.size < 4096) {
	            if (has_buf && Buffer.isBuffer(file.content)) {
	              file.content.copy(o, o.l, 0, file.size);
	              o.l += file.size + 63 & -64;
	            } else {
	              for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
	              for (; j & 63; ++j) o.write_shift(1, 0);
	            }
	          }
	        }
	        if (has_buf) {
	          o.l = o.length;
	        } else {
	          while (o.l < o.length) o.write_shift(1, 0);
	        }
	        return o;
	      }
	      function find(cfb, path) {
	        var UCFullPaths = cfb.FullPaths.map(function (x) {
	          return x.toUpperCase();
	        });
	        var UCPaths = UCFullPaths.map(function (x) {
	          var y = x.split("/");
	          return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
	        });
	        var k = false;
	        if (path.charCodeAt(0) === 47) {
	          k = true;
	          path = UCFullPaths[0].slice(0, -1) + path;
	        } else k = path.indexOf("/") !== -1;
	        var UCPath = path.toUpperCase();
	        var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
	        if (w !== -1) return cfb.FileIndex[w];
	        var m = !UCPath.match(chr1);
	        UCPath = UCPath.replace(chr0, "");
	        if (m) UCPath = UCPath.replace(chr1, "!");
	        for (w = 0; w < UCFullPaths.length; ++w) {
	          if ((m ? UCFullPaths[w].replace(chr1, "!") : UCFullPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
	          if ((m ? UCPaths[w].replace(chr1, "!") : UCPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
	        }
	        return null;
	      }
	      var MSSZ = 64;
	      var ENDOFCHAIN = -2;
	      var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
	      var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
	      var HEADER_CLSID = "00000000000000000000000000000000";
	      var consts = {
	        MAXREGSECT: -6,
	        DIFSECT: -4,
	        FATSECT: -3,
	        ENDOFCHAIN: ENDOFCHAIN,
	        FREESECT: -1,
	        HEADER_SIGNATURE: HEADER_SIGNATURE,
	        HEADER_MINOR_VERSION: "3e00",
	        MAXREGSID: -6,
	        NOSTREAM: -1,
	        HEADER_CLSID: HEADER_CLSID,
	        EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
	      };
	      function write_file(cfb, filename, options) {
	        get_fs();
	        var o = _write(cfb, options);
	        fs.writeFileSync(filename, o);
	      }
	      function a2s(o) {
	        var out = new Array(o.length);
	        for (var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);
	        return out.join("");
	      }
	      function write(cfb, options) {
	        var o = _write(cfb, options);
	        switch (options && options.type || "buffer") {
	          case "file":
	            get_fs();
	            fs.writeFileSync(options.filename, o);
	            return o;
	          case "binary":
	            return typeof o == "string" ? o : a2s(o);
	          case "base64":
	            return Base64_encode(typeof o == "string" ? o : a2s(o));
	          case "buffer":
	            if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
	          case "array":
	            return typeof o == "string" ? s2a(o) : o;
	        }
	        return o;
	      }
	      var _zlib;
	      function use_zlib(zlib) {
	        try {
	          var InflateRaw = zlib.InflateRaw;
	          var InflRaw = new InflateRaw();
	          InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
	          if (InflRaw.bytesRead) _zlib = zlib; else throw new Error("zlib does not expose bytesRead");
	        } catch (e) {
	          console.error("cannot use native zlib: " + (e.message || e));
	        }
	      }
	      function _inflateRawSync(payload, usz) {
	        if (!_zlib) return _inflate(payload, usz);
	        var InflateRaw = _zlib.InflateRaw;
	        var InflRaw = new InflateRaw();
	        var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
	        payload.l += InflRaw.bytesRead;
	        return out;
	      }
	      function _deflateRawSync(payload) {
	        return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
	      }
	      var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	      var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
	      var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
	      function bit_swap_8(n) {
	        var t = (n << 1 | n << 11) & 139536 | (n << 5 | n << 15) & 558144;
	        return (t >> 16 | t >> 8 | t) & 255;
	      }
	      var use_typed_arrays = typeof Uint8Array !== "undefined";
	      var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
	      for (var q = 0; q < 1 << 8; ++q) bitswap8[q] = bit_swap_8(q);
	      function bit_swap_n(n, b) {
	        var rev = bitswap8[n & 255];
	        if (b <= 8) return rev >>> 8 - b;
	        rev = rev << 8 | bitswap8[n >> 8 & 255];
	        if (b <= 16) return rev >>> 16 - b;
	        rev = rev << 8 | bitswap8[n >> 16 & 255];
	        return rev >>> 24 - b;
	      }
	      function read_bits_2(buf, bl) {
	        var w = bl & 7, h = bl >>> 3;
	        return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 3;
	      }
	      function read_bits_3(buf, bl) {
	        var w = bl & 7, h = bl >>> 3;
	        return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 7;
	      }
	      function read_bits_4(buf, bl) {
	        var w = bl & 7, h = bl >>> 3;
	        return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 15;
	      }
	      function read_bits_5(buf, bl) {
	        var w = bl & 7, h = bl >>> 3;
	        return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 31;
	      }
	      function read_bits_7(buf, bl) {
	        var w = bl & 7, h = bl >>> 3;
	        return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 127;
	      }
	      function read_bits_n(buf, bl, n) {
	        var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;
	        var v = buf[h] >>> w;
	        if (n < 8 - w) return v & f;
	        v |= buf[h + 1] << 8 - w;
	        if (n < 16 - w) return v & f;
	        v |= buf[h + 2] << 16 - w;
	        if (n < 24 - w) return v & f;
	        v |= buf[h + 3] << 24 - w;
	        return v & f;
	      }
	      function write_bits_3(buf, bl, v) {
	        var w = bl & 7, h = bl >>> 3;
	        if (w <= 5) buf[h] |= (v & 7) << w; else {
	          buf[h] |= v << w & 255;
	          buf[h + 1] = (v & 7) >> 8 - w;
	        }
	        return bl + 3;
	      }
	      function write_bits_1(buf, bl, v) {
	        var w = bl & 7, h = bl >>> 3;
	        v = (v & 1) << w;
	        buf[h] |= v;
	        return bl + 1;
	      }
	      function write_bits_8(buf, bl, v) {
	        var w = bl & 7, h = bl >>> 3;
	        v <<= w;
	        buf[h] |= v & 255;
	        v >>>= 8;
	        buf[h + 1] = v;
	        return bl + 8;
	      }
	      function write_bits_16(buf, bl, v) {
	        var w = bl & 7, h = bl >>> 3;
	        v <<= w;
	        buf[h] |= v & 255;
	        v >>>= 8;
	        buf[h + 1] = v & 255;
	        buf[h + 2] = v >>> 8;
	        return bl + 16;
	      }
	      function realloc(b, sz) {
	        var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i = 0;
	        if (L >= sz) return b;
	        if (has_buf) {
	          var o = new_unsafe_buf(M);
	          if (b.copy) b.copy(o); else for (; i < b.length; ++i) o[i] = b[i];
	          return o;
	        } else if (use_typed_arrays) {
	          var a = new Uint8Array(M);
	          if (a.set) a.set(b); else for (; i < L; ++i) a[i] = b[i];
	          return a;
	        }
	        b.length = M;
	        return b;
	      }
	      function zero_fill_array(n) {
	        var o = new Array(n);
	        for (var i = 0; i < n; ++i) o[i] = 0;
	        return o;
	      }
	      function build_tree(clens, cmap, MAX) {
	        var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;
	        var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
	        for (i = 0; i < 32; ++i) bl_count[i] = 0;
	        for (i = L; i < MAX; ++i) clens[i] = 0;
	        L = clens.length;
	        var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L);
	        for (i = 0; i < L; ++i) {
	          bl_count[w = clens[i]]++;
	          if (maxlen < w) maxlen = w;
	          ctree[i] = 0;
	        }
	        bl_count[0] = 0;
	        for (i = 1; i <= maxlen; ++i) bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;
	        for (i = 0; i < L; ++i) {
	          ccode = clens[i];
	          if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;
	        }
	        var cleni = 0;
	        for (i = 0; i < L; ++i) {
	          cleni = clens[i];
	          if (cleni != 0) {
	            ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;
	            for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j) cmap[ccode | j << cleni] = cleni & 15 | i << 4;
	          }
	        }
	        return maxlen;
	      }
	      var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
	      var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
	      if (!use_typed_arrays) {
	        for (var i = 0; i < 512; ++i) fix_lmap[i] = 0;
	        for (i = 0; i < 32; ++i) fix_dmap[i] = 0;
	      }
	      (function () {
	        var dlens = [];
	        var i = 0;
	        for (; i < 32; i++) dlens.push(5);
	        build_tree(dlens, fix_dmap, 32);
	        var clens = [];
	        i = 0;
	        for (; i <= 143; i++) clens.push(8);
	        for (; i <= 255; i++) clens.push(9);
	        for (; i <= 279; i++) clens.push(7);
	        for (; i <= 287; i++) clens.push(8);
	        build_tree(clens, fix_lmap, 288);
	      })();
	      var _deflateRaw = (function _deflateRawIIFE() {
	        var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
	        var j = 0, k = 0;
	        for (; j < DST_LN.length - 1; ++j) {
	          for (; k < DST_LN[j + 1]; ++k) DST_LN_RE[k] = j;
	        }
	        for (; k < 32768; ++k) DST_LN_RE[k] = 29;
	        var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
	        for ((j = 0, k = 0); j < LEN_LN.length - 1; ++j) {
	          for (; k < LEN_LN[j + 1]; ++k) LEN_LN_RE[k] = j;
	        }
	        function write_stored(data, out) {
	          var boff = 0;
	          while (boff < data.length) {
	            var L = Math.min(65535, data.length - boff);
	            var h = boff + L == data.length;
	            out.write_shift(1, +h);
	            out.write_shift(2, L);
	            out.write_shift(2, ~L & 65535);
	            while (L-- > 0) out[out.l++] = data[boff++];
	          }
	          return out.l;
	        }
	        function write_huff_fixed(data, out) {
	          var bl = 0;
	          var boff = 0;
	          var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
	          while (boff < data.length) {
	            var L = Math.min(65535, data.length - boff);
	            if (L < 10) {
	              bl = write_bits_3(out, bl, +!!(boff + L == data.length));
	              if (bl & 7) bl += 8 - (bl & 7);
	              out.l = bl / 8 | 0;
	              out.write_shift(2, L);
	              out.write_shift(2, ~L & 65535);
	              while (L-- > 0) out[out.l++] = data[boff++];
	              bl = out.l * 8;
	              continue;
	            }
	            bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2);
	            var hash = 0;
	            while (L-- > 0) {
	              var d = data[boff];
	              hash = (hash << 5 ^ d) & 32767;
	              var match = -1, mlen = 0;
	              if (match = addrs[hash]) {
	                match |= boff & ~32767;
	                if (match > boff) match -= 32768;
	                if (match < boff) while (data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;
	              }
	              if (mlen > 2) {
	                d = LEN_LN_RE[mlen];
	                if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1; else {
	                  write_bits_8(out, bl, 3);
	                  bl += 5;
	                  write_bits_8(out, bl, bitswap8[d - 23] >> 5);
	                  bl += 3;
	                }
	                var len_eb = d < 8 ? 0 : d - 4 >> 2;
	                if (len_eb > 0) {
	                  write_bits_16(out, bl, mlen - LEN_LN[d]);
	                  bl += len_eb;
	                }
	                d = DST_LN_RE[boff - match];
	                bl = write_bits_8(out, bl, bitswap8[d] >> 3);
	                bl -= 3;
	                var dst_eb = d < 4 ? 0 : d - 2 >> 1;
	                if (dst_eb > 0) {
	                  write_bits_16(out, bl, boff - match - DST_LN[d]);
	                  bl += dst_eb;
	                }
	                for (var q = 0; q < mlen; ++q) {
	                  addrs[hash] = boff & 32767;
	                  hash = (hash << 5 ^ data[boff]) & 32767;
	                  ++boff;
	                }
	                L -= mlen - 1;
	              } else {
	                if (d <= 143) d = d + 48; else bl = write_bits_1(out, bl, 1);
	                bl = write_bits_8(out, bl, bitswap8[d]);
	                addrs[hash] = boff & 32767;
	                ++boff;
	              }
	            }
	            bl = write_bits_8(out, bl, 0) - 1;
	          }
	          out.l = (bl + 7) / 8 | 0;
	          return out.l;
	        }
	        return function _deflateRaw(data, out) {
	          if (data.length < 8) return write_stored(data, out);
	          return write_huff_fixed(data, out);
	        };
	      })();
	      function _deflate(data) {
	        var buf = new_buf(50 + Math.floor(data.length * 1.1));
	        var off = _deflateRaw(data, buf);
	        return buf.slice(0, off);
	      }
	      var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
	      var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
	      var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
	      var dyn_len_1 = 1, dyn_len_2 = 1;
	      function dyn(data, boff) {
	        var _HLIT = read_bits_5(data, boff) + 257;
	        boff += 5;
	        var _HDIST = read_bits_5(data, boff) + 1;
	        boff += 5;
	        var _HCLEN = read_bits_4(data, boff) + 4;
	        boff += 4;
	        var w = 0;
	        var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
	        var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	        var maxlen = 1;
	        var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
	        var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
	        var L = clens.length;
	        for (var i = 0; i < _HCLEN; ++i) {
	          clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
	          if (maxlen < w) maxlen = w;
	          bl_count[w]++;
	          boff += 3;
	        }
	        var ccode = 0;
	        bl_count[0] = 0;
	        for (i = 1; i <= maxlen; ++i) next_code[i] = ccode = ccode + bl_count[i - 1] << 1;
	        for (i = 0; i < L; ++i) if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
	        var cleni = 0;
	        for (i = 0; i < L; ++i) {
	          cleni = clens[i];
	          if (cleni != 0) {
	            ccode = bitswap8[ctree[i]] >> 8 - cleni;
	            for (var j = (1 << 7 - cleni) - 1; j >= 0; --j) dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;
	          }
	        }
	        var hcodes = [];
	        maxlen = 1;
	        for (; hcodes.length < _HLIT + _HDIST; ) {
	          ccode = dyn_cmap[read_bits_7(data, boff)];
	          boff += ccode & 7;
	          switch (ccode >>>= 3) {
	            case 16:
	              w = 3 + read_bits_2(data, boff);
	              boff += 2;
	              ccode = hcodes[hcodes.length - 1];
	              while (w-- > 0) hcodes.push(ccode);
	              break;
	            case 17:
	              w = 3 + read_bits_3(data, boff);
	              boff += 3;
	              while (w-- > 0) hcodes.push(0);
	              break;
	            case 18:
	              w = 11 + read_bits_7(data, boff);
	              boff += 7;
	              while (w-- > 0) hcodes.push(0);
	              break;
	            default:
	              hcodes.push(ccode);
	              if (maxlen < ccode) maxlen = ccode;
	              break;
	          }
	        }
	        var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
	        for (i = _HLIT; i < 286; ++i) h1[i] = 0;
	        for (i = _HDIST; i < 30; ++i) h2[i] = 0;
	        dyn_len_1 = build_tree(h1, dyn_lmap, 286);
	        dyn_len_2 = build_tree(h2, dyn_dmap, 30);
	        return boff;
	      }
	      function inflate(data, usz) {
	        if (data[0] == 3 && !(data[1] & 3)) {
	          return [new_raw_buf(usz), 2];
	        }
	        var boff = 0;
	        var header = 0;
	        var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
	        var woff = 0;
	        var OL = outbuf.length >>> 0;
	        var max_len_1 = 0, max_len_2 = 0;
	        while ((header & 1) == 0) {
	          header = read_bits_3(data, boff);
	          boff += 3;
	          if (header >>> 1 == 0) {
	            if (boff & 7) boff += 8 - (boff & 7);
	            var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
	            boff += 32;
	            if (sz > 0) {
	              if (!usz && OL < woff + sz) {
	                outbuf = realloc(outbuf, woff + sz);
	                OL = outbuf.length;
	              }
	              while (sz-- > 0) {
	                outbuf[woff++] = data[boff >>> 3];
	                boff += 8;
	              }
	            }
	            continue;
	          } else if (header >> 1 == 1) {
	            max_len_1 = 9;
	            max_len_2 = 5;
	          } else {
	            boff = dyn(data, boff);
	            max_len_1 = dyn_len_1;
	            max_len_2 = dyn_len_2;
	          }
	          for (; ; ) {
	            if (!usz && OL < woff + 32767) {
	              outbuf = realloc(outbuf, woff + 32767);
	              OL = outbuf.length;
	            }
	            var bits = read_bits_n(data, boff, max_len_1);
	            var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
	            boff += code & 15;
	            code >>>= 4;
	            if ((code >>> 8 & 255) === 0) outbuf[woff++] = code; else if (code == 256) break; else {
	              code -= 257;
	              var len_eb = code < 8 ? 0 : code - 4 >> 2;
	              if (len_eb > 5) len_eb = 0;
	              var tgt = woff + LEN_LN[code];
	              if (len_eb > 0) {
	                tgt += read_bits_n(data, boff, len_eb);
	                boff += len_eb;
	              }
	              bits = read_bits_n(data, boff, max_len_2);
	              code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
	              boff += code & 15;
	              code >>>= 4;
	              var dst_eb = code < 4 ? 0 : code - 2 >> 1;
	              var dst = DST_LN[code];
	              if (dst_eb > 0) {
	                dst += read_bits_n(data, boff, dst_eb);
	                boff += dst_eb;
	              }
	              if (!usz && OL < tgt) {
	                outbuf = realloc(outbuf, tgt + 100);
	                OL = outbuf.length;
	              }
	              while (woff < tgt) {
	                outbuf[woff] = outbuf[woff - dst];
	                ++woff;
	              }
	            }
	          }
	        }
	        if (usz) return [outbuf, boff + 7 >>> 3];
	        return [outbuf.slice(0, woff), boff + 7 >>> 3];
	      }
	      function _inflate(payload, usz) {
	        var data = payload.slice(payload.l || 0);
	        var out = inflate(data, usz);
	        payload.l += out[1];
	        return out[0];
	      }
	      function warn_or_throw(wrn, msg) {
	        if (wrn) {
	          if (typeof console !== "undefined") console.error(msg);
	        } else throw new Error(msg);
	      }
	      function parse_zip(file, options) {
	        var blob = file;
	        prep_blob(blob, 0);
	        var FileIndex = [], FullPaths = [];
	        var o = {
	          FileIndex: FileIndex,
	          FullPaths: FullPaths
	        };
	        init_cfb(o, {
	          root: options.root
	        });
	        var i = blob.length - 4;
	        while ((blob[i] != 80 || blob[i + 1] != 75 || blob[i + 2] != 5 || blob[i + 3] != 6) && i >= 0) --i;
	        blob.l = i + 4;
	        blob.l += 4;
	        var fcnt = blob.read_shift(2);
	        blob.l += 6;
	        var start_cd = blob.read_shift(4);
	        blob.l = start_cd;
	        for (i = 0; i < fcnt; ++i) {
	          blob.l += 20;
	          var csz = blob.read_shift(4);
	          var usz = blob.read_shift(4);
	          var namelen = blob.read_shift(2);
	          var efsz = blob.read_shift(2);
	          var fcsz = blob.read_shift(2);
	          blob.l += 8;
	          var offset = blob.read_shift(4);
	          var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));
	          blob.l += namelen + efsz + fcsz;
	          var L = blob.l;
	          blob.l = offset + 4;
	          if (EF && EF[1]) {
	            if ((EF[1] || ({})).usz) usz = EF[1].usz;
	            if ((EF[1] || ({})).csz) csz = EF[1].csz;
	          }
	          parse_local_file(blob, csz, usz, o, EF);
	          blob.l = L;
	        }
	        return o;
	      }
	      function parse_local_file(blob, csz, usz, o, EF) {
	        blob.l += 2;
	        var flags = blob.read_shift(2);
	        var meth = blob.read_shift(2);
	        var date = parse_dos_date(blob);
	        if (flags & 8257) throw new Error("Unsupported ZIP encryption");
	        var crc32 = blob.read_shift(4);
	        var _csz = blob.read_shift(4);
	        var _usz = blob.read_shift(4);
	        var namelen = blob.read_shift(2);
	        var efsz = blob.read_shift(2);
	        var name = "";
	        for (var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);
	        if (efsz) {
	          var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
	          if ((ef[21589] || ({})).mt) date = ef[21589].mt;
	          if ((ef[1] || ({})).usz) _usz = ef[1].usz;
	          if ((ef[1] || ({})).csz) _csz = ef[1].csz;
	          if (EF) {
	            if ((EF[21589] || ({})).mt) date = EF[21589].mt;
	            if ((EF[1] || ({})).usz) _usz = ef[1].usz;
	            if ((EF[1] || ({})).csz) _csz = ef[1].csz;
	          }
	        }
	        blob.l += efsz;
	        var data = blob.slice(blob.l, blob.l + _csz);
	        switch (meth) {
	          case 8:
	            data = _inflateRawSync(blob, _usz);
	            break;
	          case 0:
	            break;
	          default:
	            throw new Error("Unsupported ZIP Compression method " + meth);
	        }
	        var wrn = false;
	        if (flags & 8) {
	          crc32 = blob.read_shift(4);
	          if (crc32 == 134695760) {
	            crc32 = blob.read_shift(4);
	            wrn = true;
	          }
	          _csz = blob.read_shift(4);
	          _usz = blob.read_shift(4);
	        }
	        if (_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
	        if (_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
	        cfb_add(o, name, data, {
	          unsafe: true,
	          mt: date
	        });
	      }
	      function write_zip(cfb, options) {
	        var _opts = options || ({});
	        var out = [], cdirs = [];
	        var o = new_buf(1);
	        var method = _opts.compression ? 8 : 0, flags = 0;
	        var i = 0, j = 0;
	        var start_cd = 0, fcnt = 0;
	        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
	        var crcs = [];
	        var sz_cd = 0;
	        for (i = 1; i < cfb.FullPaths.length; ++i) {
	          fp = cfb.FullPaths[i].slice(root.length);
	          fi = cfb.FileIndex[i];
	          if (!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;
	          var start = start_cd;
	          var namebuf = new_buf(fp.length);
	          for (j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 127);
	          namebuf = namebuf.slice(0, namebuf.l);
	          crcs[fcnt] = typeof fi.content == "string" ? CRC32.bstr(fi.content, 0) : CRC32.buf(fi.content, 0);
	          var outbuf = typeof fi.content == "string" ? s2a(fi.content) : fi.content;
	          if (method == 8) outbuf = _deflateRawSync(outbuf);
	          o = new_buf(30);
	          o.write_shift(4, 67324752);
	          o.write_shift(2, 20);
	          o.write_shift(2, flags);
	          o.write_shift(2, method);
	          if (fi.mt) write_dos_date(o, fi.mt); else o.write_shift(4, 0);
	          o.write_shift(-4, crcs[fcnt]);
	          o.write_shift(4, outbuf.length);
	          o.write_shift(4, fi.content.length);
	          o.write_shift(2, namebuf.length);
	          o.write_shift(2, 0);
	          start_cd += o.length;
	          out.push(o);
	          start_cd += namebuf.length;
	          out.push(namebuf);
	          start_cd += outbuf.length;
	          out.push(outbuf);
	          o = new_buf(46);
	          o.write_shift(4, 33639248);
	          o.write_shift(2, 0);
	          o.write_shift(2, 20);
	          o.write_shift(2, flags);
	          o.write_shift(2, method);
	          o.write_shift(4, 0);
	          o.write_shift(-4, crcs[fcnt]);
	          o.write_shift(4, outbuf.length);
	          o.write_shift(4, fi.content.length);
	          o.write_shift(2, namebuf.length);
	          o.write_shift(2, 0);
	          o.write_shift(2, 0);
	          o.write_shift(2, 0);
	          o.write_shift(2, 0);
	          o.write_shift(4, 0);
	          o.write_shift(4, start);
	          sz_cd += o.l;
	          cdirs.push(o);
	          sz_cd += namebuf.length;
	          cdirs.push(namebuf);
	          ++fcnt;
	        }
	        o = new_buf(22);
	        o.write_shift(4, 101010256);
	        o.write_shift(2, 0);
	        o.write_shift(2, 0);
	        o.write_shift(2, fcnt);
	        o.write_shift(2, fcnt);
	        o.write_shift(4, sz_cd);
	        o.write_shift(4, start_cd);
	        o.write_shift(2, 0);
	        return bconcat([bconcat(out), bconcat(cdirs), o]);
	      }
	      var ContentTypeMap = {
	        "htm": "text/html",
	        "xml": "text/xml",
	        "gif": "image/gif",
	        "jpg": "image/jpeg",
	        "png": "image/png",
	        "mso": "application/x-mso",
	        "thmx": "application/vnd.ms-officetheme",
	        "sh33tj5": "application/octet-stream"
	      };
	      function get_content_type(fi, fp) {
	        if (fi.ctype) return fi.ctype;
	        var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
	        if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
	        if (fp) {
	          m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
	          if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
	        }
	        return "application/octet-stream";
	      }
	      function write_base64_76(bstr) {
	        var data = Base64_encode(bstr);
	        var o = [];
	        for (var i = 0; i < data.length; i += 76) o.push(data.slice(i, i + 76));
	        return o.join("\r\n") + "\r\n";
	      }
	      function write_quoted_printable(text) {
	        var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function (c) {
	          var w = c.charCodeAt(0).toString(16).toUpperCase();
	          return "=" + (w.length == 1 ? "0" + w : w);
	        });
	        encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
	        if (encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
	        encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
	        var o = [], split = encoded.split("\r\n");
	        for (var si = 0; si < split.length; ++si) {
	          var str = split[si];
	          if (str.length == 0) {
	            o.push("");
	            continue;
	          }
	          for (var i = 0; i < str.length; ) {
	            var end = 76;
	            var tmp = str.slice(i, i + end);
	            if (tmp.charAt(end - 1) == "=") end--; else if (tmp.charAt(end - 2) == "=") end -= 2; else if (tmp.charAt(end - 3) == "=") end -= 3;
	            tmp = str.slice(i, i + end);
	            i += end;
	            if (i < str.length) tmp += "=";
	            o.push(tmp);
	          }
	        }
	        return o.join("\r\n");
	      }
	      function parse_quoted_printable(data) {
	        var o = [];
	        for (var di = 0; di < data.length; ++di) {
	          var line = data[di];
	          while (di <= data.length && line.charAt(line.length - 1) == "=") line = line.slice(0, line.length - 1) + data[++di];
	          o.push(line);
	        }
	        for (var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function ($$) {
	          return String.fromCharCode(parseInt($$.slice(1), 16));
	        });
	        return s2a(o.join("\r\n"));
	      }
	      function parse_mime(cfb, data, root) {
	        var fname = "", cte = "", ctype = "", fdata;
	        var di = 0;
	        for (; di < 10; ++di) {
	          var line = data[di];
	          if (!line || line.match(/^\s*$/)) break;
	          var m = line.match(/^(.*?):\s*([^\s].*)$/);
	          if (m) switch (m[1].toLowerCase()) {
	            case "content-location":
	              fname = m[2].trim();
	              break;
	            case "content-type":
	              ctype = m[2].trim();
	              break;
	            case "content-transfer-encoding":
	              cte = m[2].trim();
	              break;
	          }
	        }
	        ++di;
	        switch (cte.toLowerCase()) {
	          case "base64":
	            fdata = s2a(Base64_decode(data.slice(di).join("")));
	            break;
	          case "quoted-printable":
	            fdata = parse_quoted_printable(data.slice(di));
	            break;
	          default:
	            throw new Error("Unsupported Content-Transfer-Encoding " + cte);
	        }
	        var file = cfb_add(cfb, fname.slice(root.length), fdata, {
	          unsafe: true
	        });
	        if (ctype) file.ctype = ctype;
	      }
	      function parse_mad(file, options) {
	        if (a2s(file.slice(0, 13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
	        var root = options && options.root || "";
	        var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s(file)).split("\r\n");
	        var di = 0, row = "";
	        for (di = 0; di < data.length; ++di) {
	          row = data[di];
	          if (!(/^Content-Location:/i).test(row)) continue;
	          row = row.slice(row.indexOf("file"));
	          if (!root) root = row.slice(0, row.lastIndexOf("/") + 1);
	          if (row.slice(0, root.length) == root) continue;
	          while (root.length > 0) {
	            root = root.slice(0, root.length - 1);
	            root = root.slice(0, root.lastIndexOf("/") + 1);
	            if (row.slice(0, root.length) == root) break;
	          }
	        }
	        var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
	        if (!mboundary) throw new Error("MAD cannot find boundary");
	        var boundary = "--" + (mboundary[1] || "");
	        var FileIndex = [], FullPaths = [];
	        var o = {
	          FileIndex: FileIndex,
	          FullPaths: FullPaths
	        };
	        init_cfb(o);
	        var start_di, fcnt = 0;
	        for (di = 0; di < data.length; ++di) {
	          var line = data[di];
	          if (line !== boundary && line !== boundary + "--") continue;
	          if (fcnt++) parse_mime(o, data.slice(start_di, di), root);
	          start_di = di;
	        }
	        return o;
	      }
	      function write_mad(cfb, options) {
	        var opts = options || ({});
	        var boundary = opts.boundary || "SheetJS";
	        boundary = "------=" + boundary;
	        var out = ["MIME-Version: 1.0", "Content-Type: multipart/related; boundary=\"" + boundary.slice(2) + "\"", "", "", ""];
	        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
	        for (var i = 1; i < cfb.FullPaths.length; ++i) {
	          fp = cfb.FullPaths[i].slice(root.length);
	          fi = cfb.FileIndex[i];
	          if (!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;
	          fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function (c) {
	            return "_x" + c.charCodeAt(0).toString(16) + "_";
	          }).replace(/[\u0080-\uFFFF]/g, function (u) {
	            return "_u" + u.charCodeAt(0).toString(16) + "_";
	          });
	          var ca = fi.content;
	          var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s(ca);
	          var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
	          for (var csl = 0; csl <= L; ++csl) if ((cc = cstr.charCodeAt(csl)) >= 32 && cc < 128) ++dispcnt;
	          var qp = dispcnt >= L * 4 / 5;
	          out.push(boundary);
	          out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
	          out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
	          out.push("Content-Type: " + get_content_type(fi, fp));
	          out.push("");
	          out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
	        }
	        out.push(boundary + "--\r\n");
	        return out.join("\r\n");
	      }
	      function cfb_new(opts) {
	        var o = {};
	        init_cfb(o, opts);
	        return o;
	      }
	      function cfb_add(cfb, name, content, opts) {
	        var unsafe = opts && opts.unsafe;
	        if (!unsafe) init_cfb(cfb);
	        var file = !unsafe && CFB.find(cfb, name);
	        if (!file) {
	          var fpath = cfb.FullPaths[0];
	          if (name.slice(0, fpath.length) == fpath) fpath = name; else {
	            if (fpath.slice(-1) != "/") fpath += "/";
	            fpath = (fpath + name).replace("//", "/");
	          }
	          file = {
	            name: filename(name),
	            type: 2
	          };
	          cfb.FileIndex.push(file);
	          cfb.FullPaths.push(fpath);
	          if (!unsafe) CFB.utils.cfb_gc(cfb);
	        }
	        file.content = content;
	        file.size = content ? content.length : 0;
	        if (opts) {
	          if (opts.CLSID) file.clsid = opts.CLSID;
	          if (opts.mt) file.mt = opts.mt;
	          if (opts.ct) file.ct = opts.ct;
	        }
	        return file;
	      }
	      function cfb_del(cfb, name) {
	        init_cfb(cfb);
	        var file = CFB.find(cfb, name);
	        if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {
	          cfb.FileIndex.splice(j, 1);
	          cfb.FullPaths.splice(j, 1);
	          return true;
	        }
	        return false;
	      }
	      function cfb_mov(cfb, old_name, new_name) {
	        init_cfb(cfb);
	        var file = CFB.find(cfb, old_name);
	        if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {
	          cfb.FileIndex[j].name = filename(new_name);
	          cfb.FullPaths[j] = new_name;
	          return true;
	        }
	        return false;
	      }
	      function cfb_gc(cfb) {
	        rebuild_cfb(cfb, true);
	      }
	      exports.find = find;
	      exports.read = read;
	      exports.parse = parse;
	      exports.write = write;
	      exports.writeFile = write_file;
	      exports.utils = {
	        cfb_new: cfb_new,
	        cfb_add: cfb_add,
	        cfb_del: cfb_del,
	        cfb_mov: cfb_mov,
	        cfb_gc: cfb_gc,
	        ReadShift: ReadShift,
	        CheckField: CheckField,
	        prep_blob: prep_blob,
	        bconcat: bconcat,
	        use_zlib: use_zlib,
	        _deflateRaw: _deflate,
	        _inflateRaw: _inflate,
	        consts: consts
	      };
	      return exports;
	    })();
	    var _fs;
	    function set_fs(fs) {
	      _fs = fs;
	    }
	    function blobify(data) {
	      if (typeof data === "string") return s2ab(data);
	      if (Array.isArray(data)) return a2u(data);
	      return data;
	    }
	    function write_dl(fname, payload, enc) {
	      if (typeof _fs !== "undefined" && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
	      if (typeof Deno !== "undefined") {
	        if (enc && typeof payload == "string") switch (enc) {
	          case "utf8":
	            payload = new TextEncoder(enc).encode(payload);
	            break;
	          case "binary":
	            payload = s2ab(payload);
	            break;
	          default:
	            throw new Error("Unsupported encoding " + enc);
	        }
	        return Deno.writeFileSync(fname, payload);
	      }
	      var data = enc == "utf8" ? utf8write(payload) : payload;
	      if (typeof IE_SaveFile !== "undefined") return IE_SaveFile(data, fname);
	      if (typeof Blob !== "undefined") {
	        var blob = new Blob([blobify(data)], {
	          type: "application/octet-stream"
	        });
	        if (typeof navigator !== "undefined" && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);
	        if (typeof saveAs !== "undefined") return saveAs(blob, fname);
	        if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
	          var url = URL.createObjectURL(blob);
	          if (typeof chrome === "object" && typeof (chrome.downloads || ({})).download == "function") {
	            if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function () {
	              URL.revokeObjectURL(url);
	            }, 60000);
	            return chrome.downloads.download({
	              url: url,
	              filename: fname,
	              saveAs: true
	            });
	          }
	          var a = document.createElement("a");
	          if (a.download != null) {
	            a.download = fname;
	            a.href = url;
	            document.body.appendChild(a);
	            a.click();
	            document.body.removeChild(a);
	            if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function () {
	              URL.revokeObjectURL(url);
	            }, 60000);
	            return url;
	          }
	        } else if (typeof URL !== "undefined" && !URL.createObjectURL && typeof chrome === "object") {
	          var b64 = "data:application/octet-stream;base64," + Base64_encode_arr(new Uint8Array(blobify(data)));
	          return chrome.downloads.download({
	            url: b64,
	            filename: fname,
	            saveAs: true
	          });
	        }
	      }
	      if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
	        var out = File(fname);
	        out.open("w");
	        out.encoding = "binary";
	        if (Array.isArray(payload)) payload = a2s(payload);
	        out.write(payload);
	        out.close();
	        return payload;
	      } catch (e) {
	        if (!e.message || !e.message.match(/onstruct/)) throw e;
	      }
	      throw new Error("cannot save file " + fname);
	    }
	    function read_binary(path) {
	      if (typeof _fs !== "undefined") return _fs.readFileSync(path);
	      if (typeof Deno !== "undefined") return Deno.readFileSync(path);
	      if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
	        var infile = File(path);
	        infile.open("r");
	        infile.encoding = "binary";
	        var data = infile.read();
	        infile.close();
	        return data;
	      } catch (e) {
	        if (!e.message || !e.message.match(/onstruct/)) throw e;
	      }
	      throw new Error("Cannot access file " + path);
	    }
	    function keys(o) {
	      var ks = Object.keys(o), o2 = [];
	      for (var i = 0; i < ks.length; ++i) if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
	      return o2;
	    }
	    function evert_key(obj, key) {
	      var o = [], K = keys(obj);
	      for (var i = 0; i !== K.length; ++i) if (o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];
	      return o;
	    }
	    function evert(obj) {
	      var o = [], K = keys(obj);
	      for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
	      return o;
	    }
	    function evert_num(obj) {
	      var o = [], K = keys(obj);
	      for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i], 10);
	      return o;
	    }
	    function evert_arr(obj) {
	      var o = [], K = keys(obj);
	      for (var i = 0; i !== K.length; ++i) {
	        if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];
	        o[obj[K[i]]].push(K[i]);
	      }
	      return o;
	    }
	    var dnthresh = Date.UTC(1899, 11, 30, 0, 0, 0);
	    var dnthresh1 = Date.UTC(1899, 11, 31, 0, 0, 0);
	    var dnthresh2 = Date.UTC(1904, 0, 1, 0, 0, 0);
	    function datenum(v, date1904) {
	      var epoch = v.getTime();
	      var res = (epoch - dnthresh) / (24 * 60 * 60 * 1000);
	      if (date1904) {
	        res -= 1462;
	        return res < -1402 ? res - 1 : res;
	      }
	      return res < 60 ? res - 1 : res;
	    }
	    function numdate(v) {
	      if (v >= 60 && v < 61) return v;
	      var out = new Date();
	      out.setTime((v > 60 ? v : v + 1) * 24 * 60 * 60 * 1000 + dnthresh);
	      return out;
	    }
	    function parse_isodur(s) {
	      var sec = 0, mt = 0, time = false;
	      var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
	      if (!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
	      for (var i = 1; i != m.length; ++i) {
	        if (!m[i]) continue;
	        mt = 1;
	        if (i > 3) time = true;
	        switch (m[i].slice(m[i].length - 1)) {
	          case "Y":
	            throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length - 1));
	          case "D":
	            mt *= 24;
	          case "H":
	            mt *= 60;
	          case "M":
	            if (!time) throw new Error("Unsupported ISO Duration Field: M"); else mt *= 60;
	        }
	        sec += mt * parseInt(m[i], 10);
	      }
	      return sec;
	    }
	    var pdre1 = /^(\d+):(\d+)(:\d+)?(\.\d+)?$/;
	    var pdre2 = /^(\d+)-(\d+)-(\d+)$/;
	    var pdre3 = /^(\d+)-(\d+)-(\d+)[T ](\d+):(\d+)(:\d+)?(\.\d+)?$/;
	    function parseDate(str, date1904) {
	      if (str instanceof Date) return str;
	      var m = str.match(pdre1);
	      if (m) return new Date((date1904 ? dnthresh2 : dnthresh1) + ((parseInt(m[1], 10) * 60 + parseInt(m[2], 10)) * 60 + (m[3] ? parseInt(m[3].slice(1), 10) : 0)) * 1000 + (m[4] ? parseInt((m[4] + "000").slice(1, 4), 10) : 0));
	      m = str.match(pdre2);
	      if (m) return new Date(Date.UTC(+m[1], +m[2] - 1, +m[3], 0, 0, 0, 0));
	      m = str.match(pdre3);
	      if (m) return new Date(Date.UTC(+m[1], +m[2] - 1, +m[3], +m[4], +m[5], m[6] && parseInt(m[6].slice(1), 10) || 0, m[7] && parseInt(m[7].slice(1), 10) || 0));
	      var d = new Date(str);
	      return d;
	    }
	    function cc2str(arr, debomit) {
	      if (has_buf && Buffer.isBuffer(arr)) {
	        if (debomit && buf_utf16le) {
	          if (arr[0] == 255 && arr[1] == 254) return utf8write(arr.slice(2).toString("utf16le"));
	          if (arr[1] == 254 && arr[2] == 255) return utf8write(utf16beread(arr.slice(2).toString("binary")));
	        }
	        return arr.toString("binary");
	      }
	      if (typeof TextDecoder !== "undefined") try {
	        if (debomit) {
	          if (arr[0] == 255 && arr[1] == 254) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
	          if (arr[0] == 254 && arr[1] == 255) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
	        }
	        var rev = {
	          "€": "",
	          "‚": "",
	          "ƒ": "",
	          "„": "",
	          "…": "",
	          "†": "",
	          "‡": "",
	          "ˆ": "",
	          "‰": "",
	          "Š": "",
	          "‹": "",
	          "Œ": "",
	          "Ž": "",
	          "‘": "",
	          "’": "",
	          "“": "",
	          "”": "",
	          "•": "",
	          "–": "",
	          "—": "",
	          "˜": "",
	          "™": "",
	          "š": "",
	          "›": "",
	          "œ": "",
	          "ž": "",
	          "Ÿ": ""
	        };
	        if (Array.isArray(arr)) arr = new Uint8Array(arr);
	        return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function (c) {
	          return rev[c] || c;
	        });
	      } catch (e) {}
	      var o = [], i = 0;
	      try {
	        for (i = 0; i < arr.length - 65536; i += 65536) o.push(String.fromCharCode.apply(0, arr.slice(i, i + 65536)));
	        o.push(String.fromCharCode.apply(0, arr.slice(i)));
	      } catch (e) {
	        try {
	          for (; i < arr.length - 16384; i += 16384) o.push(String.fromCharCode.apply(0, arr.slice(i, i + 16384)));
	          o.push(String.fromCharCode.apply(0, arr.slice(i)));
	        } catch (e) {
	          for (; i != arr.length; ++i) o.push(String.fromCharCode(arr[i]));
	        }
	      }
	      return o.join("");
	    }
	    function dup(o) {
	      if (typeof JSON != "undefined" && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
	      if (typeof o != "object" || o == null) return o;
	      if (o instanceof Date) return new Date(o.getTime());
	      var out = {};
	      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
	      return out;
	    }
	    function fill(c, l) {
	      var o = "";
	      while (o.length < l) o += c;
	      return o;
	    }
	    function fuzzynum(s) {
	      var v = Number(s);
	      if (!isNaN(v)) return isFinite(v) ? v : NaN;
	      if (!(/\d/).test(s)) return v;
	      var wt = 1;
	      var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function () {
	        wt *= 100;
	        return "";
	      });
	      if (!isNaN(v = Number(ss))) return v / wt;
	      ss = ss.replace(/[(](.*)[)]/, function ($$, $1) {
	        wt = -wt;
	        return $1;
	      });
	      if (!isNaN(v = Number(ss))) return v / wt;
	      return v;
	    }
	    var FDRE1 = /^(0?\d|1[0-2])(?:|:([0-5]?\d)(?:|(\.\d+)(?:|:([0-5]?\d))|:([0-5]?\d)(|\.\d+)))\s+([ap])m?$/;
	    var FDRE2 = /^([01]?\d|2[0-3])(?:|:([0-5]?\d)(?:|(\.\d+)(?:|:([0-5]?\d))|:([0-5]?\d)(|\.\d+)))$/;
	    var FDISO = /^(\d+)-(\d+)-(\d+)[T ](\d+):(\d+)(:\d+)(\.\d+)?[Z]?$/;
	    var utc_append_works = new Date("6/9/69 00:00 UTC").valueOf() == -17798400000;
	    function fuzzytime1(M) {
	      if (!M[2]) return new Date(Date.UTC(1899, 11, 31, +M[1] % 12 + (M[7] == "p" ? 12 : 0), 0, 0, 0));
	      if (M[3]) {
	        if (M[4]) return new Date(Date.UTC(1899, 11, 31, +M[1] % 12 + (M[7] == "p" ? 12 : 0), +M[2], +M[4], parseFloat(M[3]) * 1000)); else return new Date(Date.UTC(1899, 11, 31, M[7] == "p" ? 12 : 0, +M[1], +M[2], parseFloat(M[3]) * 1000));
	      } else if (M[5]) return new Date(Date.UTC(1899, 11, 31, +M[1] % 12 + (M[7] == "p" ? 12 : 0), +M[2], +M[5], M[6] ? parseFloat(M[6]) * 1000 : 0)); else return new Date(Date.UTC(1899, 11, 31, +M[1] % 12 + (M[7] == "p" ? 12 : 0), +M[2], 0, 0));
	    }
	    function fuzzytime2(M) {
	      if (!M[2]) return new Date(Date.UTC(1899, 11, 31, +M[1], 0, 0, 0));
	      if (M[3]) {
	        if (M[4]) return new Date(Date.UTC(1899, 11, 31, +M[1], +M[2], +M[4], parseFloat(M[3]) * 1000)); else return new Date(Date.UTC(1899, 11, 31, 0, +M[1], +M[2], parseFloat(M[3]) * 1000));
	      } else if (M[5]) return new Date(Date.UTC(1899, 11, 31, +M[1], +M[2], +M[5], M[6] ? parseFloat(M[6]) * 1000 : 0)); else return new Date(Date.UTC(1899, 11, 31, +M[1], +M[2], 0, 0));
	    }
	    var lower_months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
	    function fuzzydate(s) {
	      if (FDISO.test(s)) return s.indexOf("Z") == -1 ? local_to_utc(new Date(s)) : new Date(s);
	      var lower = s.toLowerCase();
	      var lnos = lower.replace(/\s+/g, " ").trim();
	      var M = lnos.match(FDRE1);
	      if (M) return fuzzytime1(M);
	      M = lnos.match(FDRE2);
	      if (M) return fuzzytime2(M);
	      M = lnos.match(pdre3);
	      if (M) return new Date(Date.UTC(+M[1], +M[2] - 1, +M[3], +M[4], +M[5], M[6] && parseInt(M[6].slice(1), 10) || 0, M[7] && parseInt(M[7].slice(1), 10) || 0));
	      var o = new Date(utc_append_works && s.indexOf("UTC") == -1 ? s + " UTC" : s), n = new Date(NaN);
	      var y = o.getYear(); o.getMonth(); var d = o.getDate();
	      if (isNaN(d)) return n;
	      if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
	        lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
	        if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
	      } else if (lower.replace(/[ap]m?/, "").match(/[a-z]/)) return n;
	      if (y < 0 || y > 8099 || s.match(/[^-0-9:,\/\\\ ]/)) return n;
	      return o;
	    }
	    var split_regex = (function () {
	      var safe_split_regex = ("abacaba").split(/(:?b)/i).length == 5;
	      return function split_regex(str, re, def) {
	        if (safe_split_regex || typeof re == "string") return str.split(re);
	        var p = str.split(re), o = [p[0]];
	        for (var i = 1; i < p.length; ++i) {
	          o.push(def);
	          o.push(p[i]);
	        }
	        return o;
	      };
	    })();
	    function utc_to_local(utc) {
	      return new Date(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate(), utc.getUTCHours(), utc.getUTCMinutes(), utc.getUTCSeconds(), utc.getUTCMilliseconds());
	    }
	    function local_to_utc(local) {
	      return new Date(Date.UTC(local.getFullYear(), local.getMonth(), local.getDate(), local.getHours(), local.getMinutes(), local.getSeconds(), local.getMilliseconds()));
	    }
	    function getdatastr(data) {
	      if (!data) return null;
	      if (data.content && data.type) return cc2str(data.content, true);
	      if (data.data) return debom(data.data);
	      if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString("binary"));
	      if (data.asBinary) return debom(data.asBinary());
	      if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
	      return null;
	    }
	    function getdatabin(data) {
	      if (!data) return null;
	      if (data.data) return char_codes(data.data);
	      if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();
	      if (data._data && data._data.getContent) {
	        var o = data._data.getContent();
	        if (typeof o == "string") return char_codes(o);
	        return Array.prototype.slice.call(o);
	      }
	      if (data.content && data.type) return data.content;
	      return null;
	    }
	    function getdata(data) {
	      return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
	    }
	    function safegetzipfile(zip, file) {
	      var k = zip.FullPaths || keys(zip.files);
	      var f = file.toLowerCase().replace(/[\/]/g, "\\"), g = f.replace(/\\/g, "/");
	      for (var i = 0; i < k.length; ++i) {
	        var n = k[i].replace(/^Root Entry[\/]/, "").toLowerCase();
	        if (f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
	      }
	      return null;
	    }
	    function getzipfile(zip, file) {
	      var o = safegetzipfile(zip, file);
	      if (o == null) throw new Error("Cannot find file " + file + " in zip");
	      return o;
	    }
	    function getzipdata(zip, file, safe) {
	      if (!safe) return getdata(getzipfile(zip, file));
	      if (!file) return null;
	      try {
	        return getzipdata(zip, file);
	      } catch (e) {
	        return null;
	      }
	    }
	    function getzipstr(zip, file, safe) {
	      if (!safe) return getdatastr(getzipfile(zip, file));
	      if (!file) return null;
	      try {
	        return getzipstr(zip, file);
	      } catch (e) {
	        return null;
	      }
	    }
	    function getzipbin(zip, file, safe) {
	      if (!safe) return getdatabin(getzipfile(zip, file));
	      if (!file) return null;
	      try {
	        return getzipbin(zip, file);
	      } catch (e) {
	        return null;
	      }
	    }
	    function zipentries(zip) {
	      var k = zip.FullPaths || keys(zip.files), o = [];
	      for (var i = 0; i < k.length; ++i) if (k[i].slice(-1) != "/") o.push(k[i].replace(/^Root Entry[\/]/, ""));
	      return o.sort();
	    }
	    function zip_add_file(zip, path, content) {
	      if (zip.FullPaths) {
	        if (typeof content == "string") {
	          var res;
	          if (has_buf) res = Buffer_from(content); else res = utf8decode(content);
	          return CFB.utils.cfb_add(zip, path, res);
	        }
	        CFB.utils.cfb_add(zip, path, content);
	      } else zip.file(path, content);
	    }
	    function zip_new() {
	      return CFB.utils.cfb_new();
	    }
	    function zip_read(d, o) {
	      switch (o.type) {
	        case "base64":
	          return CFB.read(d, {
	            type: "base64"
	          });
	        case "binary":
	          return CFB.read(d, {
	            type: "binary"
	          });
	        case "buffer":
	        case "array":
	          return CFB.read(d, {
	            type: "buffer"
	          });
	      }
	      throw new Error("Unrecognized type " + o.type);
	    }
	    function resolve_path(path, base) {
	      if (path.charAt(0) == "/") return path.slice(1);
	      var result = base.split("/");
	      if (base.slice(-1) != "/") result.pop();
	      var target = path.split("/");
	      while (target.length !== 0) {
	        var step = target.shift();
	        if (step === "..") result.pop(); else if (step !== ".") result.push(step);
	      }
	      return result.join("/");
	    }
	    var XML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n";
	    var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
	    var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
	    var tagregex = XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
	    var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
	    function parsexmltag(tag, skip_root, skip_LC) {
	      var z = {};
	      var eq = 0, c = 0;
	      for (; eq !== tag.length; ++eq) if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
	      if (!skip_root) z[0] = tag.slice(0, eq);
	      if (eq === tag.length) return z;
	      var m = tag.match(attregexg), j = 0, v = "", i = 0, q = "", cc = "", quot = 1;
	      if (m) for (i = 0; i != m.length; ++i) {
	        cc = m[i];
	        for (c = 0; c != cc.length; ++c) if (cc.charCodeAt(c) === 61) break;
	        q = cc.slice(0, c).trim();
	        while (cc.charCodeAt(c + 1) == 32) ++c;
	        quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;
	        v = cc.slice(c + 1 + quot, cc.length - quot);
	        for (j = 0; j != q.length; ++j) if (q.charCodeAt(j) === 58) break;
	        if (j === q.length) {
	          if (q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_"));
	          z[q] = v;
	          if (!skip_LC) z[q.toLowerCase()] = v;
	        } else {
	          var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
	          if (z[k] && q.slice(j - 3, j) == "ext") continue;
	          z[k] = v;
	          if (!skip_LC) z[k.toLowerCase()] = v;
	        }
	      }
	      return z;
	    }
	    function strip_ns(x) {
	      return x.replace(nsregex2, "<$1");
	    }
	    var encodings = {
	      "&quot;": "\"",
	      "&apos;": "'",
	      "&gt;": ">",
	      "&lt;": "<",
	      "&amp;": "&"
	    };
	    var rencoding = evert(encodings);
	    var unescapexml = (function () {
	      var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
	      function raw_unescapexml(text) {
	        var s = text + "", i = s.indexOf("<![CDATA[");
	        if (i == -1) return s.replace(encregex, function ($$, $1) {
	          return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
	        }).replace(coderegex, function (m, c) {
	          return String.fromCharCode(parseInt(c, 16));
	        });
	        var j = s.indexOf("]]>");
	        return raw_unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + raw_unescapexml(s.slice(j + 3));
	      }
	      return function unescapexml(text, xlsx) {
	        var out = raw_unescapexml(text);
	        return xlsx ? out.replace(/\r\n/g, "\n") : out;
	      };
	    })();
	    var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f\uFFFE-\uFFFF]/g;
	    function escapexml(text) {
	      var s = text + "";
	      return s.replace(decregex, function (y) {
	        return rencoding[y];
	      }).replace(charegex, function (s) {
	        return "_x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + "_";
	      });
	    }
	    function escapexmltag(text) {
	      return escapexml(text).replace(/ /g, "_x0020_");
	    }
	    var htmlcharegex = /[\u0000-\u001f]/g;
	    function escapehtml(text) {
	      var s = text + "";
	      return s.replace(decregex, function (y) {
	        return rencoding[y];
	      }).replace(/\n/g, "<br/>").replace(htmlcharegex, function (s) {
	        return "&#x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + ";";
	      });
	    }
	    function escapexlml(text) {
	      var s = text + "";
	      return s.replace(decregex, function (y) {
	        return rencoding[y];
	      }).replace(htmlcharegex, function (s) {
	        return "&#x" + s.charCodeAt(0).toString(16).toUpperCase() + ";";
	      });
	    }
	    var xlml_fixstr = (function () {
	      var entregex = /&#(\d+);/g;
	      function entrepl($$, $1) {
	        return String.fromCharCode(parseInt($1, 10));
	      }
	      return function xlml_fixstr(str) {
	        return str.replace(entregex, entrepl);
	      };
	    })();
	    function xlml_unfixstr(str) {
	      return str.replace(/(\r\n|[\r\n])/g, "&#10;");
	    }
	    function parsexmlbool(value) {
	      switch (value) {
	        case 1:
	        case true:
	        case "1":
	        case "true":
	          return true;
	        case 0:
	        case false:
	        case "0":
	        case "false":
	          return false;
	      }
	      return false;
	    }
	    function utf8reada(orig) {
	      var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
	      while (i < orig.length) {
	        c = orig.charCodeAt(i++);
	        if (c < 128) {
	          out += String.fromCharCode(c);
	          continue;
	        }
	        d = orig.charCodeAt(i++);
	        if (c > 191 && c < 224) {
	          f = (c & 31) << 6;
	          f |= d & 63;
	          out += String.fromCharCode(f);
	          continue;
	        }
	        e = orig.charCodeAt(i++);
	        if (c < 240) {
	          out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
	          continue;
	        }
	        f = orig.charCodeAt(i++);
	        w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
	        out += String.fromCharCode(55296 + (w >>> 10 & 1023));
	        out += String.fromCharCode(56320 + (w & 1023));
	      }
	      return out;
	    }
	    function utf8readb(data) {
	      var out = new_raw_buf(2 * data.length), w, i, j = 1, k = 0, ww = 0, c;
	      for (i = 0; i < data.length; i += j) {
	        j = 1;
	        if ((c = data.charCodeAt(i)) < 128) w = c; else if (c < 224) {
	          w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
	          j = 2;
	        } else if (c < 240) {
	          w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
	          j = 3;
	        } else {
	          j = 4;
	          w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
	          w -= 65536;
	          ww = 55296 + (w >>> 10 & 1023);
	          w = 56320 + (w & 1023);
	        }
	        if (ww !== 0) {
	          out[k++] = ww & 255;
	          out[k++] = ww >>> 8;
	          ww = 0;
	        }
	        out[k++] = w % 256;
	        out[k++] = w >>> 8;
	      }
	      return out.slice(0, k).toString("ucs2");
	    }
	    function utf8readc(data) {
	      return Buffer_from(data, "binary").toString("utf8");
	    }
	    var utf8corpus = "foo bar bazâð£";
	    var utf8read = has_buf && (utf8readc(utf8corpus) == utf8reada(utf8corpus) && utf8readc || utf8readb(utf8corpus) == utf8reada(utf8corpus) && utf8readb) || utf8reada;
	    var utf8write = has_buf ? function (data) {
	      return Buffer_from(data, "utf8").toString("binary");
	    } : function (orig) {
	      var out = [], i = 0, c = 0, d = 0;
	      while (i < orig.length) {
	        c = orig.charCodeAt(i++);
	        switch (true) {
	          case c < 128:
	            out.push(String.fromCharCode(c));
	            break;
	          case c < 2048:
	            out.push(String.fromCharCode(192 + (c >> 6)));
	            out.push(String.fromCharCode(128 + (c & 63)));
	            break;
	          case c >= 55296 && c < 57344:
	            c -= 55296;
	            d = orig.charCodeAt(i++) - 56320 + (c << 10);
	            out.push(String.fromCharCode(240 + (d >> 18 & 7)));
	            out.push(String.fromCharCode(144 + (d >> 12 & 63)));
	            out.push(String.fromCharCode(128 + (d >> 6 & 63)));
	            out.push(String.fromCharCode(128 + (d & 63)));
	            break;
	          default:
	            out.push(String.fromCharCode(224 + (c >> 12)));
	            out.push(String.fromCharCode(128 + (c >> 6 & 63)));
	            out.push(String.fromCharCode(128 + (c & 63)));
	        }
	      }
	      return out.join("");
	    };
	    var matchtag = (function () {
	      var mtcache = {};
	      return function matchtag(f, g) {
	        var t = f + "|" + (g || "");
	        if (mtcache[t]) return mtcache[t];
	        return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + "(?: xml:space=\"preserve\")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?" + f + ">", g || "");
	      };
	    })();
	    var htmldecode = (function () {
	      var entities = [["nbsp", " "], ["middot", "·"], ["quot", "\""], ["apos", "'"], ["gt", ">"], ["lt", "<"], ["amp", "&"]].map(function (x) {
	        return [new RegExp("&" + x[0] + ";", "ig"), x[1]];
	      });
	      return function htmldecode(str) {
	        var o = str.replace(/^[\t\n\r ]+/, "").replace(/[\t\n\r ]+$/, "").replace(/>\s+/g, ">").replace(/\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^>]*>/g, "");
	        for (var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);
	        return o;
	      };
	    })();
	    var vtregex = (function () {
	      var vt_cache = {};
	      return function vt_regex(bt) {
	        if (vt_cache[bt] !== undefined) return vt_cache[bt];
	        return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g");
	      };
	    })();
	    var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
	    function parseVector(data, opts) {
	      var h = parsexmltag(data);
	      var matches = data.match(vtregex(h.baseType)) || [];
	      var res = [];
	      if (matches.length != h.size) {
	        if (opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
	        return res;
	      }
	      matches.forEach(function (x) {
	        var v = x.replace(vtvregex, "").match(vtmregex);
	        if (v) res.push({
	          v: utf8read(v[2]),
	          t: v[1]
	        });
	      });
	      return res;
	    }
	    var wtregex = /(^\s|\s$|\n)/;
	    function writetag(f, g) {
	      return "<" + f + (g.match(wtregex) ? " xml:space=\"preserve\"" : "") + ">" + g + "</" + f + ">";
	    }
	    function wxt_helper(h) {
	      return keys(h).map(function (k) {
	        return " " + k + "=\"" + h[k] + "\"";
	      }).join("");
	    }
	    function writextag(f, g, h) {
	      return "<" + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? " xml:space=\"preserve\"" : "") + ">" + g + "</" + f : "/") + ">";
	    }
	    function write_w3cdtf(d, t) {
	      try {
	        return d.toISOString().replace(/\.\d*/, "");
	      } catch (e) {
	        if (t) throw e;
	      }
	      return "";
	    }
	    function write_vt(s, xlsx) {
	      switch (typeof s) {
	        case "string":
	          var o = writextag("vt:lpwstr", escapexml(s));
	          if (xlsx) o = o.replace(/&quot;/g, "_x0022_");
	          return o;
	        case "number":
	          return writextag((s | 0) == s ? "vt:i4" : "vt:r8", escapexml(String(s)));
	        case "boolean":
	          return writextag("vt:bool", s ? "true" : "false");
	      }
	      if (s instanceof Date) return writextag("vt:filetime", write_w3cdtf(s));
	      throw new Error("Unable to serialize " + s);
	    }
	    function xlml_normalize(d) {
	      if (has_buf && Buffer.isBuffer(d)) return d.toString("utf8");
	      if (typeof d === "string") return d;
	      if (typeof Uint8Array !== "undefined" && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
	      throw new Error("Bad input format: expected Buffer or string");
	    }
	    var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/](?:[^>=]|="[^"]*?")*)?>/mg;
	    var XMLNS = {
	      CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
	      CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
	      EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
	      CT: "http://schemas.openxmlformats.org/package/2006/content-types",
	      RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
	      TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
	      "dc": "http://purl.org/dc/elements/1.1/",
	      "dcterms": "http://purl.org/dc/terms/",
	      "dcmitype": "http://purl.org/dc/dcmitype/",
	      "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
	      "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
	      "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
	      "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
	      "xsi": "http://www.w3.org/2001/XMLSchema-instance",
	      "xsd": "http://www.w3.org/2001/XMLSchema"
	    };
	    var XMLNS_main = ["http://schemas.openxmlformats.org/spreadsheetml/2006/main", "http://purl.oclc.org/ooxml/spreadsheetml/main", "http://schemas.microsoft.com/office/excel/2006/main", "http://schemas.microsoft.com/office/excel/2006/2"];
	    var XLMLNS = {
	      "o": "urn:schemas-microsoft-com:office:office",
	      "x": "urn:schemas-microsoft-com:office:excel",
	      "ss": "urn:schemas-microsoft-com:office:spreadsheet",
	      "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
	      "mv": "http://macVmlSchemaUri",
	      "v": "urn:schemas-microsoft-com:vml",
	      "html": "http://www.w3.org/TR/REC-html40"
	    };
	    function read_double_le(b, idx) {
	      var s = 1 - 2 * (b[idx + 7] >>> 7);
	      var e = ((b[idx + 7] & 127) << 4) + (b[idx + 6] >>> 4 & 15);
	      var m = b[idx + 6] & 15;
	      for (var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
	      if (e == 2047) return m == 0 ? s * Infinity : NaN;
	      if (e == 0) e = -1022; else {
	        e -= 1023;
	        m += Math.pow(2, 52);
	      }
	      return s * Math.pow(2, e - 52) * m;
	    }
	    function write_double_le(b, v, idx) {
	      var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;
	      var av = bs ? -v : v;
	      if (!isFinite(av)) {
	        e = 2047;
	        m = isNaN(v) ? 26985 : 0;
	      } else if (av == 0) e = m = 0; else {
	        e = Math.floor(Math.log(av) / Math.LN2);
	        m = av * Math.pow(2, 52 - e);
	        if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {
	          e = -1022;
	        } else {
	          m -= Math.pow(2, 52);
	          e += 1023;
	        }
	      }
	      for (var i = 0; i <= 5; (++i, m /= 256)) b[idx + i] = m & 255;
	      b[idx + 6] = (e & 15) << 4 | m & 15;
	      b[idx + 7] = e >> 4 | bs;
	    }
	    var ___toBuffer = function (bufs) {
	      var x = [], w = 10240;
	      for (var i = 0; i < bufs[0].length; ++i) if (bufs[0][i]) for (var j = 0, L = bufs[0][i].length; j < L; j += w) x.push.apply(x, bufs[0][i].slice(j, j + w));
	      return x;
	    };
	    var __toBuffer = has_buf ? function (bufs) {
	      return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function (x) {
	        return Buffer.isBuffer(x) ? x : Buffer_from(x);
	      })) : ___toBuffer(bufs);
	    } : ___toBuffer;
	    var ___utf16le = function (b, s, e) {
	      var ss = [];
	      for (var i = s; i < e; i += 2) ss.push(String.fromCharCode(__readUInt16LE(b, i)));
	      return ss.join("").replace(chr0, "");
	    };
	    var __utf16le = has_buf ? function (b, s, e) {
	      if (!Buffer.isBuffer(b) || !buf_utf16le) return ___utf16le(b, s, e);
	      return b.toString("utf16le", s, e).replace(chr0, "");
	    } : ___utf16le;
	    var ___hexlify = function (b, s, l) {
	      var ss = [];
	      for (var i = s; i < s + l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2));
	      return ss.join("");
	    };
	    var __hexlify = has_buf ? function (b, s, l) {
	      return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l);
	    } : ___hexlify;
	    var ___utf8 = function (b, s, e) {
	      var ss = [];
	      for (var i = s; i < e; i++) ss.push(String.fromCharCode(__readUInt8(b, i)));
	      return ss.join("");
	    };
	    var __utf8 = has_buf ? function utf8_b(b, s, e) {
	      return Buffer.isBuffer(b) ? b.toString("utf8", s, e) : ___utf8(b, s, e);
	    } : ___utf8;
	    var ___lpstr = function (b, i) {
	      var len = __readUInt32LE(b, i);
	      return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
	    };
	    var __lpstr = ___lpstr;
	    var ___cpstr = function (b, i) {
	      var len = __readUInt32LE(b, i);
	      return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
	    };
	    var __cpstr = ___cpstr;
	    var ___lpwstr = function (b, i) {
	      var len = 2 * __readUInt32LE(b, i);
	      return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
	    };
	    var __lpwstr = ___lpwstr;
	    var ___lpp4 = function lpp4_(b, i) {
	      var len = __readUInt32LE(b, i);
	      return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "";
	    };
	    var __lpp4 = ___lpp4;
	    var ___8lpp4 = function (b, i) {
	      var len = __readUInt32LE(b, i);
	      return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "";
	    };
	    var __8lpp4 = ___8lpp4;
	    var ___double = function (b, idx) {
	      return read_double_le(b, idx);
	    };
	    var __double = ___double;
	    var is_buf = function is_buf_a(a) {
	      return Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
	    };
	    if (has_buf) {
	      __lpstr = function lpstr_b(b, i) {
	        if (!Buffer.isBuffer(b)) return ___lpstr(b, i);
	        var len = b.readUInt32LE(i);
	        return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
	      };
	      __cpstr = function cpstr_b(b, i) {
	        if (!Buffer.isBuffer(b)) return ___cpstr(b, i);
	        var len = b.readUInt32LE(i);
	        return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
	      };
	      __lpwstr = function lpwstr_b(b, i) {
	        if (!Buffer.isBuffer(b) || !buf_utf16le) return ___lpwstr(b, i);
	        var len = 2 * b.readUInt32LE(i);
	        return b.toString("utf16le", i + 4, i + 4 + len - 1);
	      };
	      __lpp4 = function lpp4_b(b, i) {
	        if (!Buffer.isBuffer(b) || !buf_utf16le) return ___lpp4(b, i);
	        var len = b.readUInt32LE(i);
	        return b.toString("utf16le", i + 4, i + 4 + len);
	      };
	      __8lpp4 = function lpp4_8b(b, i) {
	        if (!Buffer.isBuffer(b)) return ___8lpp4(b, i);
	        var len = b.readUInt32LE(i);
	        return b.toString("utf8", i + 4, i + 4 + len);
	      };
	      __double = function double_(b, i) {
	        if (Buffer.isBuffer(b)) return b.readDoubleLE(i);
	        return ___double(b, i);
	      };
	      is_buf = function is_buf_b(a) {
	        return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
	      };
	    }
	    function cpdoit() {
	      __utf16le = function (b, s, e) {
	        return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, "");
	      };
	      __utf8 = function (b, s, e) {
	        return $cptable.utils.decode(65001, b.slice(s, e));
	      };
	      __lpstr = function (b, i) {
	        var len = __readUInt32LE(b, i);
	        return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : "";
	      };
	      __cpstr = function (b, i) {
	        var len = __readUInt32LE(b, i);
	        return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
	      };
	      __lpwstr = function (b, i) {
	        var len = 2 * __readUInt32LE(b, i);
	        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
	      };
	      __lpp4 = function (b, i) {
	        var len = __readUInt32LE(b, i);
	        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "";
	      };
	      __8lpp4 = function (b, i) {
	        var len = __readUInt32LE(b, i);
	        return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "";
	      };
	    }
	    if (typeof $cptable !== "undefined") cpdoit();
	    var __readUInt8 = function (b, idx) {
	      return b[idx];
	    };
	    var __readUInt16LE = function (b, idx) {
	      return b[idx + 1] * (1 << 8) + b[idx];
	    };
	    var __readInt16LE = function (b, idx) {
	      var u = b[idx + 1] * (1 << 8) + b[idx];
	      return u < 32768 ? u : (65535 - u + 1) * -1;
	    };
	    var __readUInt32LE = function (b, idx) {
	      return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
	    };
	    var __readInt32LE = function (b, idx) {
	      return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
	    };
	    var __readInt32BE = function (b, idx) {
	      return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
	    };
	    function ReadShift(size, t) {
	      var o = "", oI, oR, oo = [], w, vv, i, loc;
	      switch (t) {
	        case "dbcs":
	          loc = this.l;
	          if (has_buf && Buffer.isBuffer(this) && buf_utf16le) o = this.slice(this.l, this.l + 2 * size).toString("utf16le"); else for (i = 0; i < size; ++i) {
	            o += String.fromCharCode(__readUInt16LE(this, loc));
	            loc += 2;
	          }
	          size *= 2;
	          break;
	        case "utf8":
	          o = __utf8(this, this.l, this.l + size);
	          break;
	        case "utf16le":
	          size *= 2;
	          o = __utf16le(this, this.l, this.l + size);
	          break;
	        case "wstr":
	          if (typeof $cptable !== "undefined") o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size)); else return ReadShift.call(this, size, "dbcs");
	          size = 2 * size;
	          break;
	        case "lpstr-ansi":
	          o = __lpstr(this, this.l);
	          size = 4 + __readUInt32LE(this, this.l);
	          break;
	        case "lpstr-cp":
	          o = __cpstr(this, this.l);
	          size = 4 + __readUInt32LE(this, this.l);
	          break;
	        case "lpwstr":
	          o = __lpwstr(this, this.l);
	          size = 4 + 2 * __readUInt32LE(this, this.l);
	          break;
	        case "lpp4":
	          size = 4 + __readUInt32LE(this, this.l);
	          o = __lpp4(this, this.l);
	          if (size & 2) size += 2;
	          break;
	        case "8lpp4":
	          size = 4 + __readUInt32LE(this, this.l);
	          o = __8lpp4(this, this.l);
	          if (size & 3) size += 4 - (size & 3);
	          break;
	        case "cstr":
	          size = 0;
	          o = "";
	          while ((w = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w));
	          o = oo.join("");
	          break;
	        case "_wstr":
	          size = 0;
	          o = "";
	          while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
	            oo.push(_getchar(w));
	            size += 2;
	          }
	          size += 2;
	          o = oo.join("");
	          break;
	        case "dbcs-cont":
	          o = "";
	          loc = this.l;
	          for (i = 0; i < size; ++i) {
	            if (this.lens && this.lens.indexOf(loc) !== -1) {
	              w = __readUInt8(this, loc);
	              this.l = loc + 1;
	              vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
	              return oo.join("") + vv;
	            }
	            oo.push(_getchar(__readUInt16LE(this, loc)));
	            loc += 2;
	          }
	          o = oo.join("");
	          size *= 2;
	          break;
	        case "cpstr":
	          if (typeof $cptable !== "undefined") {
	            o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
	            break;
	          }
	        case "sbcs-cont":
	          o = "";
	          loc = this.l;
	          for (i = 0; i != size; ++i) {
	            if (this.lens && this.lens.indexOf(loc) !== -1) {
	              w = __readUInt8(this, loc);
	              this.l = loc + 1;
	              vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
	              return oo.join("") + vv;
	            }
	            oo.push(_getchar(__readUInt8(this, loc)));
	            loc += 1;
	          }
	          o = oo.join("");
	          break;
	        default:
	          switch (size) {
	            case 1:
	              oI = __readUInt8(this, this.l);
	              this.l++;
	              return oI;
	            case 2:
	              oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
	              this.l += 2;
	              return oI;
	            case 4:
	            case -4:
	              if (t === "i" || (this[this.l + 3] & 128) === 0) {
	                oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
	                this.l += 4;
	                return oI;
	              } else {
	                oR = __readUInt32LE(this, this.l);
	                this.l += 4;
	              }
	              return oR;
	            case 8:
	            case -8:
	              if (t === "f") {
	                if (size == 8) oR = __double(this, this.l); else oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
	                this.l += 8;
	                return oR;
	              } else size = 8;
	            case 16:
	              o = __hexlify(this, this.l, size);
	              break;
	          }
	      }
	      this.l += size;
	      return o;
	    }
	    var __writeUInt32LE = function (b, val, idx) {
	      b[idx] = val & 255;
	      b[idx + 1] = val >>> 8 & 255;
	      b[idx + 2] = val >>> 16 & 255;
	      b[idx + 3] = val >>> 24 & 255;
	    };
	    var __writeInt32LE = function (b, val, idx) {
	      b[idx] = val & 255;
	      b[idx + 1] = val >> 8 & 255;
	      b[idx + 2] = val >> 16 & 255;
	      b[idx + 3] = val >> 24 & 255;
	    };
	    var __writeUInt16LE = function (b, val, idx) {
	      b[idx] = val & 255;
	      b[idx + 1] = val >>> 8 & 255;
	    };
	    function WriteShift(t, val, f) {
	      var size = 0, i = 0;
	      if (f === "dbcs") {
	        for (i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
	        size = 2 * val.length;
	      } else if (f === "sbcs" || f == "cpstr") {
	        if (typeof $cptable !== "undefined" && current_ansi == 874) {
	          for (i = 0; i != val.length; ++i) {
	            var cpp = $cptable.utils.encode(current_ansi, val.charAt(i));
	            this[this.l + i] = cpp[0];
	          }
	          size = val.length;
	        } else if (typeof $cptable !== "undefined" && f == "cpstr") {
	          cpp = $cptable.utils.encode(current_codepage, val);
	          if (cpp.length == val.length) for (i = 0; i < val.length; ++i) if (cpp[i] == 0 && val.charCodeAt(i) != 0) cpp[i] = 95;
	          if (cpp.length == 2 * val.length) for (i = 0; i < val.length; ++i) if (cpp[2 * i] == 0 && cpp[2 * i + 1] == 0 && val.charCodeAt(i) != 0) cpp[2 * i] = 95;
	          for (i = 0; i < cpp.length; ++i) this[this.l + i] = cpp[i];
	          size = cpp.length;
	        } else {
	          val = val.replace(/[^\x00-\x7F]/g, "_");
	          for (i = 0; i != val.length; ++i) this[this.l + i] = val.charCodeAt(i) & 255;
	          size = val.length;
	        }
	      } else if (f === "hex") {
	        for (; i < t; ++i) {
	          this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;
	        }
	        return this;
	      } else if (f === "utf16le") {
	        var end = Math.min(this.l + t, this.length);
	        for (i = 0; i < Math.min(val.length, t); ++i) {
	          var cc = val.charCodeAt(i);
	          this[this.l++] = cc & 255;
	          this[this.l++] = cc >> 8;
	        }
	        while (this.l < end) this[this.l++] = 0;
	        return this;
	      } else switch (t) {
	        case 1:
	          size = 1;
	          this[this.l] = val & 255;
	          break;
	        case 2:
	          size = 2;
	          this[this.l] = val & 255;
	          val >>>= 8;
	          this[this.l + 1] = val & 255;
	          break;
	        case 3:
	          size = 3;
	          this[this.l] = val & 255;
	          val >>>= 8;
	          this[this.l + 1] = val & 255;
	          val >>>= 8;
	          this[this.l + 2] = val & 255;
	          break;
	        case 4:
	          size = 4;
	          __writeUInt32LE(this, val, this.l);
	          break;
	        case 8:
	          size = 8;
	          if (f === "f") {
	            write_double_le(this, val, this.l);
	            break;
	          }
	        case 16:
	          break;
	        case -4:
	          size = 4;
	          __writeInt32LE(this, val, this.l);
	          break;
	      }
	      this.l += size;
	      return this;
	    }
	    function CheckField(hexstr, fld) {
	      var m = __hexlify(this, this.l, hexstr.length >> 1);
	      if (m !== hexstr) throw new Error(fld + "Expected " + hexstr + " saw " + m);
	      this.l += hexstr.length >> 1;
	    }
	    function prep_blob(blob, pos) {
	      blob.l = pos;
	      blob.read_shift = ReadShift;
	      blob.chk = CheckField;
	      blob.write_shift = WriteShift;
	    }
	    function parsenoop(blob, length) {
	      blob.l += length;
	    }
	    function new_buf(sz) {
	      var o = new_raw_buf(sz);
	      prep_blob(o, 0);
	      return o;
	    }
	    function recordhopper(data, cb, opts) {
	      if (!data) return;
	      var tmpbyte, cntbyte, length;
	      prep_blob(data, data.l || 0);
	      var L = data.length, RT = 0, tgt = 0;
	      while (data.l < L) {
	        RT = data.read_shift(1);
	        if (RT & 128) RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
	        var R = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
	        tmpbyte = data.read_shift(1);
	        length = tmpbyte & 127;
	        for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
	        tgt = data.l + length;
	        var d = R.f && R.f(data, length, opts);
	        data.l = tgt;
	        if (cb(d, R, RT)) return;
	      }
	    }
	    function buf_array() {
	      var bufs = [], blksz = has_buf ? 256 : 2048;
	      var newblk = function ba_newblk(sz) {
	        var o = new_buf(sz);
	        prep_blob(o, 0);
	        return o;
	      };
	      var curbuf = newblk(blksz);
	      var endbuf = function ba_endbuf() {
	        if (!curbuf) return;
	        if (curbuf.l) {
	          if (curbuf.length > curbuf.l) {
	            curbuf = curbuf.slice(0, curbuf.l);
	            curbuf.l = curbuf.length;
	          }
	          if (curbuf.length > 0) bufs.push(curbuf);
	        }
	        curbuf = null;
	      };
	      var next = function ba_next(sz) {
	        if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
	        endbuf();
	        return curbuf = newblk(Math.max(sz + 1, blksz));
	      };
	      var end = function ba_end() {
	        endbuf();
	        return bconcat(bufs);
	      };
	      var push = function ba_push(buf) {
	        endbuf();
	        curbuf = buf;
	        if (curbuf.l == null) curbuf.l = curbuf.length;
	        next(blksz);
	      };
	      return {
	        next: next,
	        push: push,
	        end: end,
	        _bufs: bufs
	      };
	    }
	    function write_record(ba, type, payload, length) {
	      var t = +type, l;
	      if (isNaN(t)) return;
	      if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;
	      l = 1 + (t >= 128 ? 1 : 0) + 1;
	      if (length >= 128) ++l;
	      if (length >= 16384) ++l;
	      if (length >= 2097152) ++l;
	      var o = ba.next(l);
	      if (t <= 127) o.write_shift(1, t); else {
	        o.write_shift(1, (t & 127) + 128);
	        o.write_shift(1, t >> 7);
	      }
	      for (var i = 0; i != 4; ++i) {
	        if (length >= 128) {
	          o.write_shift(1, (length & 127) + 128);
	          length >>= 7;
	        } else {
	          o.write_shift(1, length);
	          break;
	        }
	      }
	      if (length > 0 && is_buf(payload)) ba.push(payload);
	    }
	    function shift_cell_xls(cell, tgt, opts) {
	      var out = dup(cell);
	      if (tgt.s) {
	        if (out.cRel) out.c += tgt.s.c;
	        if (out.rRel) out.r += tgt.s.r;
	      } else {
	        if (out.cRel) out.c += tgt.c;
	        if (out.rRel) out.r += tgt.r;
	      }
	      if (!opts || opts.biff < 12) {
	        while (out.c >= 256) out.c -= 256;
	        while (out.r >= 65536) out.r -= 65536;
	      }
	      return out;
	    }
	    function shift_range_xls(cell, range, opts) {
	      var out = dup(cell);
	      out.s = shift_cell_xls(out.s, range.s, opts);
	      out.e = shift_cell_xls(out.e, range.s, opts);
	      return out;
	    }
	    function encode_cell_xls(c, biff) {
	      if (c.cRel && c.c < 0) {
	        c = dup(c);
	        while (c.c < 0) c.c += biff > 8 ? 16384 : 256;
	      }
	      if (c.rRel && c.r < 0) {
	        c = dup(c);
	        while (c.r < 0) c.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
	      }
	      var s = encode_cell(c);
	      if (!c.cRel && c.cRel != null) s = fix_col(s);
	      if (!c.rRel && c.rRel != null) s = fix_row(s);
	      return s;
	    }
	    function encode_range_xls(r, opts) {
	      if (r.s.r == 0 && !r.s.rRel) {
	        if (r.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r.e.rRel) {
	          return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
	        }
	      }
	      if (r.s.c == 0 && !r.s.cRel) {
	        if (r.e.c == (opts.biff >= 12 ? 16383 : 255) && !r.e.cRel) {
	          return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
	        }
	      }
	      return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
	    }
	    if (typeof cptable !== "undefined") set_cptable(cptable); else if (typeof commonjsRequire !== "undefined") {
	      set_cptable(requireCpexcel());
	    }
	    function decode_row(rowstr) {
	      return parseInt(unfix_row(rowstr), 10) - 1;
	    }
	    function encode_row(row) {
	      return "" + (row + 1);
	    }
	    function fix_row(cstr) {
	      return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
	    }
	    function unfix_row(cstr) {
	      return cstr.replace(/\$(\d+)$/, "$1");
	    }
	    function decode_col(colstr) {
	      var c = unfix_col(colstr), d = 0, i = 0;
	      for (; i !== c.length; ++i) d = 26 * d + c.charCodeAt(i) - 64;
	      return d - 1;
	    }
	    function encode_col(col) {
	      if (col < 0) throw new Error("invalid column " + col);
	      var s = "";
	      for (++col; col; col = Math.floor((col - 1) / 26)) s = String.fromCharCode((col - 1) % 26 + 65) + s;
	      return s;
	    }
	    function fix_col(cstr) {
	      return cstr.replace(/^([A-Z])/, "$$$1");
	    }
	    function unfix_col(cstr) {
	      return cstr.replace(/^\$([A-Z])/, "$1");
	    }
	    function split_cell(cstr) {
	      return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
	    }
	    function decode_cell(cstr) {
	      var R = 0, C = 0;
	      for (var i = 0; i < cstr.length; ++i) {
	        var cc = cstr.charCodeAt(i);
	        if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48); else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
	      }
	      return {
	        c: C - 1,
	        r: R - 1
	      };
	    }
	    function encode_cell(cell) {
	      var col = cell.c + 1;
	      var s = "";
	      for (; col; col = (col - 1) / 26 | 0) s = String.fromCharCode((col - 1) % 26 + 65) + s;
	      return s + (cell.r + 1);
	    }
	    function decode_range(range) {
	      var idx = range.indexOf(":");
	      if (idx == -1) return {
	        s: decode_cell(range),
	        e: decode_cell(range)
	      };
	      return {
	        s: decode_cell(range.slice(0, idx)),
	        e: decode_cell(range.slice(idx + 1))
	      };
	    }
	    function encode_range(cs, ce) {
	      if (typeof ce === "undefined" || typeof ce === "number") {
	        return encode_range(cs.s, cs.e);
	      }
	      if (typeof cs !== "string") cs = encode_cell(cs);
	      if (typeof ce !== "string") ce = encode_cell(ce);
	      return cs == ce ? cs : cs + ":" + ce;
	    }
	    function fix_range(a1) {
	      var s = decode_range(a1);
	      return "$" + encode_col(s.s.c) + "$" + encode_row(s.s.r) + ":$" + encode_col(s.e.c) + "$" + encode_row(s.e.r);
	    }
	    function formula_quote_sheet_name(sname, opts) {
	      if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
	      if ((/[^\w\u4E00-\u9FFF\u3040-\u30FF]/).test(sname)) return "'" + sname.replace(/'/g, "''") + "'";
	      return sname;
	    }
	    function safe_decode_range(range) {
	      var o = {
	        s: {
	          c: 0,
	          r: 0
	        },
	        e: {
	          c: 0,
	          r: 0
	        }
	      };
	      var idx = 0, i = 0, cc = 0;
	      var len = range.length;
	      for (idx = 0; i < len; ++i) {
	        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
	        idx = 26 * idx + cc;
	      }
	      o.s.c = --idx;
	      for (idx = 0; i < len; ++i) {
	        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
	        idx = 10 * idx + cc;
	      }
	      o.s.r = --idx;
	      if (i === len || cc != 10) {
	        o.e.c = o.s.c;
	        o.e.r = o.s.r;
	        return o;
	      }
	      ++i;
	      for (idx = 0; i != len; ++i) {
	        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
	        idx = 26 * idx + cc;
	      }
	      o.e.c = --idx;
	      for (idx = 0; i != len; ++i) {
	        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
	        idx = 10 * idx + cc;
	      }
	      o.e.r = --idx;
	      return o;
	    }
	    function safe_format_cell(cell, v) {
	      var q = cell.t == "d" && v instanceof Date;
	      if (cell.z != null) try {
	        return cell.w = SSF_format(cell.z, q ? datenum(v) : v);
	      } catch (e) {}
	      try {
	        return cell.w = SSF_format((cell.XF || ({})).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
	      } catch (e) {
	        return "" + v;
	      }
	    }
	    function format_cell(cell, v, o) {
	      if (cell == null || cell.t == null || cell.t == "z") return "";
	      if (cell.w !== undefined) return cell.w;
	      if (cell.t == "d" && !cell.z && o && o.dateNF) cell.z = o.dateNF;
	      if (cell.t == "e") return BErr[cell.v] || cell.v;
	      if (v == undefined) return safe_format_cell(cell, cell.v);
	      return safe_format_cell(cell, v);
	    }
	    function sheet_to_workbook(sheet, opts) {
	      var n = opts && opts.sheet ? opts.sheet : "Sheet1";
	      var sheets = {};
	      sheets[n] = sheet;
	      return {
	        SheetNames: [n],
	        Sheets: sheets
	      };
	    }
	    function sheet_add_aoa(_ws, data, opts) {
	      var o = opts || ({});
	      var dense = _ws ? _ws["!data"] != null : o.dense;
	      var ws = _ws || ({});
	      if (dense && !ws["!data"]) ws["!data"] = [];
	      var _R = 0, _C = 0;
	      if (ws && o.origin != null) {
	        if (typeof o.origin == "number") _R = o.origin; else {
	          var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
	          _R = _origin.r;
	          _C = _origin.c;
	        }
	        if (!ws["!ref"]) ws["!ref"] = "A1:A1";
	      }
	      var range = {
	        s: {
	          c: 10000000,
	          r: 10000000
	        },
	        e: {
	          c: 0,
	          r: 0
	        }
	      };
	      if (ws["!ref"]) {
	        var _range = safe_decode_range(ws["!ref"]);
	        range.s.c = _range.s.c;
	        range.s.r = _range.s.r;
	        range.e.c = Math.max(range.e.c, _range.e.c);
	        range.e.r = Math.max(range.e.r, _range.e.r);
	        if (_R == -1) range.e.r = _R = _range.e.r + 1;
	      }
	      var row = [];
	      for (var R = 0; R != data.length; ++R) {
	        if (!data[R]) continue;
	        if (!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
	        var __R = _R + R, __Rstr = "" + (__R + 1);
	        if (dense) {
	          if (!ws["!data"][__R]) ws["!data"][__R] = [];
	          row = ws["!data"][__R];
	        }
	        for (var C = 0; C != data[R].length; ++C) {
	          if (typeof data[R][C] === "undefined") continue;
	          var cell = {
	            v: data[R][C]
	          };
	          var __C = _C + C;
	          if (range.s.r > __R) range.s.r = __R;
	          if (range.s.c > __C) range.s.c = __C;
	          if (range.e.r < __R) range.e.r = __R;
	          if (range.e.c < __C) range.e.c = __C;
	          if (data[R][C] && typeof data[R][C] === "object" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C]; else {
	            if (Array.isArray(cell.v)) {
	              cell.f = data[R][C][1];
	              cell.v = cell.v[0];
	            }
	            if (cell.v === null) {
	              if (cell.f) cell.t = "n"; else if (o.nullError) {
	                cell.t = "e";
	                cell.v = 0;
	              } else if (!o.sheetStubs) continue; else cell.t = "z";
	            } else if (typeof cell.v === "number") cell.t = "n"; else if (typeof cell.v === "boolean") cell.t = "b"; else if (cell.v instanceof Date) {
	              cell.z = o.dateNF || table_fmt[14];
	              if (!o.UTC) cell.v = local_to_utc(cell.v);
	              if (o.cellDates) {
	                cell.t = "d";
	                cell.w = SSF_format(cell.z, datenum(cell.v, o.date1904));
	              } else {
	                cell.t = "n";
	                cell.v = datenum(cell.v, o.date1904);
	                cell.w = SSF_format(cell.z, cell.v);
	              }
	            } else cell.t = "s";
	          }
	          if (dense) {
	            if (row[__C] && row[__C].z) cell.z = row[__C].z;
	            row[__C] = cell;
	          } else {
	            var cell_ref = encode_col(__C) + __Rstr;
	            if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
	            ws[cell_ref] = cell;
	          }
	        }
	      }
	      if (range.s.c < 10000000) ws["!ref"] = encode_range(range);
	      return ws;
	    }
	    function aoa_to_sheet(data, opts) {
	      return sheet_add_aoa(null, data, opts);
	    }
	    function parse_Int32LE(data) {
	      return data.read_shift(4, "i");
	    }
	    function write_UInt32LE(x, o) {
	      if (!o) o = new_buf(4);
	      o.write_shift(4, x);
	      return o;
	    }
	    function parse_XLWideString(data) {
	      var cchCharacters = data.read_shift(4);
	      return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
	    }
	    function write_XLWideString(data, o) {
	      var _null = false;
	      if (o == null) {
	        _null = true;
	        o = new_buf(4 + 2 * data.length);
	      }
	      o.write_shift(4, data.length);
	      if (data.length > 0) o.write_shift(0, data, "dbcs");
	      return _null ? o.slice(0, o.l) : o;
	    }
	    function parse_StrRun(data) {
	      return {
	        ich: data.read_shift(2),
	        ifnt: data.read_shift(2)
	      };
	    }
	    function write_StrRun(run, o) {
	      if (!o) o = new_buf(4);
	      o.write_shift(2, run.ich || 0);
	      o.write_shift(2, run.ifnt || 0);
	      return o;
	    }
	    function parse_RichStr(data, length) {
	      var start = data.l;
	      var flags = data.read_shift(1);
	      var str = parse_XLWideString(data);
	      var rgsStrRun = [];
	      var z = {
	        t: str,
	        h: str
	      };
	      if ((flags & 1) !== 0) {
	        var dwSizeStrRun = data.read_shift(4);
	        for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
	        z.r = rgsStrRun;
	      } else z.r = [{
	        ich: 0,
	        ifnt: 0
	      }];
	      data.l = start + length;
	      return z;
	    }
	    function write_RichStr(str, o) {
	      var _null = false;
	      if (o == null) {
	        _null = true;
	        o = new_buf(15 + 4 * str.t.length);
	      }
	      o.write_shift(1, 0);
	      write_XLWideString(str.t, o);
	      return _null ? o.slice(0, o.l) : o;
	    }
	    var parse_BrtCommentText = parse_RichStr;
	    function write_BrtCommentText(str, o) {
	      var _null = false;
	      if (o == null) {
	        _null = true;
	        o = new_buf(23 + 4 * str.t.length);
	      }
	      o.write_shift(1, 1);
	      write_XLWideString(str.t, o);
	      o.write_shift(4, 1);
	      write_StrRun({
	        ich: 0,
	        ifnt: 0
	      }, o);
	      return _null ? o.slice(0, o.l) : o;
	    }
	    function parse_XLSBCell(data) {
	      var col = data.read_shift(4);
	      var iStyleRef = data.read_shift(2);
	      iStyleRef += data.read_shift(1) << 16;
	      data.l++;
	      return {
	        c: col,
	        iStyleRef: iStyleRef
	      };
	    }
	    function write_XLSBCell(cell, o) {
	      if (o == null) o = new_buf(8);
	      o.write_shift(-4, cell.c);
	      o.write_shift(3, cell.iStyleRef || cell.s);
	      o.write_shift(1, 0);
	      return o;
	    }
	    function parse_XLSBShortCell(data) {
	      var iStyleRef = data.read_shift(2);
	      iStyleRef += data.read_shift(1) << 16;
	      data.l++;
	      return {
	        c: -1,
	        iStyleRef: iStyleRef
	      };
	    }
	    function write_XLSBShortCell(cell, o) {
	      if (o == null) o = new_buf(4);
	      o.write_shift(3, cell.iStyleRef || cell.s);
	      o.write_shift(1, 0);
	      return o;
	    }
	    var parse_XLSBCodeName = parse_XLWideString;
	    var write_XLSBCodeName = write_XLWideString;
	    function parse_XLNullableWideString(data) {
	      var cchCharacters = data.read_shift(4);
	      return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
	    }
	    function write_XLNullableWideString(data, o) {
	      var _null = false;
	      if (o == null) {
	        _null = true;
	        o = new_buf(127);
	      }
	      o.write_shift(4, data.length > 0 ? data.length : 4294967295);
	      if (data.length > 0) o.write_shift(0, data, "dbcs");
	      return _null ? o.slice(0, o.l) : o;
	    }
	    var parse_XLNameWideString = parse_XLWideString;
	    var parse_RelID = parse_XLNullableWideString;
	    var write_RelID = write_XLNullableWideString;
	    function parse_RkNumber(data) {
	      var b = data.slice(data.l, data.l + 4);
	      var fX100 = b[0] & 1, fInt = b[0] & 2;
	      data.l += 4;
	      var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0] & 252, b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
	      return fX100 ? RK / 100 : RK;
	    }
	    function write_RkNumber(data, o) {
	      if (o == null) o = new_buf(4);
	      var fX100 = 0, fInt = 0, d100 = data * 100;
	      if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {
	        fInt = 1;
	      } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
	        fInt = 1;
	        fX100 = 1;
	      }
	      if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2)); else throw new Error("unsupported RkNumber " + data);
	    }
	    function parse_RfX(data) {
	      var cell = {
	        s: {},
	        e: {}
	      };
	      cell.s.r = data.read_shift(4);
	      cell.e.r = data.read_shift(4);
	      cell.s.c = data.read_shift(4);
	      cell.e.c = data.read_shift(4);
	      return cell;
	    }
	    function write_RfX(r, o) {
	      if (!o) o = new_buf(16);
	      o.write_shift(4, r.s.r);
	      o.write_shift(4, r.e.r);
	      o.write_shift(4, r.s.c);
	      o.write_shift(4, r.e.c);
	      return o;
	    }
	    var parse_UncheckedRfX = parse_RfX;
	    var write_UncheckedRfX = write_RfX;
	    function parse_Xnum(data) {
	      if (data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
	      return data.read_shift(8, "f");
	    }
	    function write_Xnum(data, o) {
	      return (o || new_buf(8)).write_shift(8, data, "f");
	    }
	    function parse_BrtColor(data) {
	      var out = {};
	      var d = data.read_shift(1);
	      var xColorType = d >>> 1;
	      var index = data.read_shift(1);
	      var nTS = data.read_shift(2, "i");
	      var bR = data.read_shift(1);
	      var bG = data.read_shift(1);
	      var bB = data.read_shift(1);
	      data.l++;
	      switch (xColorType) {
	        case 0:
	          out.auto = 1;
	          break;
	        case 1:
	          out.index = index;
	          var icv = XLSIcv[index];
	          if (icv) out.rgb = rgb2Hex(icv);
	          break;
	        case 2:
	          out.rgb = rgb2Hex([bR, bG, bB]);
	          break;
	        case 3:
	          out.theme = index;
	          break;
	      }
	      if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
	      return out;
	    }
	    function write_BrtColor(color, o) {
	      if (!o) o = new_buf(8);
	      if (!color || color.auto) {
	        o.write_shift(4, 0);
	        o.write_shift(4, 0);
	        return o;
	      }
	      if (color.index != null) {
	        o.write_shift(1, 2);
	        o.write_shift(1, color.index);
	      } else if (color.theme != null) {
	        o.write_shift(1, 6);
	        o.write_shift(1, color.theme);
	      } else {
	        o.write_shift(1, 5);
	        o.write_shift(1, 0);
	      }
	      var nTS = color.tint || 0;
	      if (nTS > 0) nTS *= 32767; else if (nTS < 0) nTS *= 32768;
	      o.write_shift(2, nTS);
	      if (!color.rgb || color.theme != null) {
	        o.write_shift(2, 0);
	        o.write_shift(1, 0);
	        o.write_shift(1, 0);
	      } else {
	        var rgb = color.rgb || "FFFFFF";
	        if (typeof rgb == "number") rgb = ("000000" + rgb.toString(16)).slice(-6);
	        o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
	        o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
	        o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
	        o.write_shift(1, 255);
	      }
	      return o;
	    }
	    function parse_FontFlags(data) {
	      var d = data.read_shift(1);
	      data.l++;
	      var out = {
	        fBold: d & 1,
	        fItalic: d & 2,
	        fUnderline: d & 4,
	        fStrikeout: d & 8,
	        fOutline: d & 16,
	        fShadow: d & 32,
	        fCondense: d & 64,
	        fExtend: d & 128
	      };
	      return out;
	    }
	    function write_FontFlags(font, o) {
	      if (!o) o = new_buf(2);
	      var grbit = (font.italic ? 2 : 0) | (font.strike ? 8 : 0) | (font.outline ? 16 : 0) | (font.shadow ? 32 : 0) | (font.condense ? 64 : 0) | (font.extend ? 128 : 0);
	      o.write_shift(1, grbit);
	      o.write_shift(1, 0);
	      return o;
	    }
	    function parse_ClipboardFormatOrString(o, w) {
	      var ClipFmt = {
	        2: "BITMAP",
	        3: "METAFILEPICT",
	        8: "DIB",
	        14: "ENHMETAFILE"
	      };
	      var m = o.read_shift(4);
	      switch (m) {
	        case 0:
	          return "";
	        case 4294967295:
	        case 4294967294:
	          return ClipFmt[o.read_shift(4)] || "";
	      }
	      if (m > 400) throw new Error("Unsupported Clipboard: " + m.toString(16));
	      o.l -= 4;
	      return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
	    }
	    function parse_ClipboardFormatOrAnsiString(o) {
	      return parse_ClipboardFormatOrString(o, 1);
	    }
	    function parse_ClipboardFormatOrUnicodeString(o) {
	      return parse_ClipboardFormatOrString(o, 2);
	    }
	    var VT_I2 = 2;
	    var VT_I4 = 3;
	    var VT_BOOL = 11;
	    var VT_VARIANT = 12;
	    var VT_UI4 = 19;
	    var VT_FILETIME = 64;
	    var VT_BLOB = 65;
	    var VT_CF = 71;
	    var VT_VECTOR_VARIANT = 4108;
	    var VT_VECTOR_LPSTR = 4126;
	    var VT_STRING = 80;
	    var VT_USTR = 81;
	    var VT_CUSTOM = [VT_STRING, VT_USTR];
	    var DocSummaryPIDDSI = {
	      1: {
	        n: "CodePage",
	        t: VT_I2
	      },
	      2: {
	        n: "Category",
	        t: VT_STRING
	      },
	      3: {
	        n: "PresentationFormat",
	        t: VT_STRING
	      },
	      4: {
	        n: "ByteCount",
	        t: VT_I4
	      },
	      5: {
	        n: "LineCount",
	        t: VT_I4
	      },
	      6: {
	        n: "ParagraphCount",
	        t: VT_I4
	      },
	      7: {
	        n: "SlideCount",
	        t: VT_I4
	      },
	      8: {
	        n: "NoteCount",
	        t: VT_I4
	      },
	      9: {
	        n: "HiddenCount",
	        t: VT_I4
	      },
	      10: {
	        n: "MultimediaClipCount",
	        t: VT_I4
	      },
	      11: {
	        n: "ScaleCrop",
	        t: VT_BOOL
	      },
	      12: {
	        n: "HeadingPairs",
	        t: VT_VECTOR_VARIANT
	      },
	      13: {
	        n: "TitlesOfParts",
	        t: VT_VECTOR_LPSTR
	      },
	      14: {
	        n: "Manager",
	        t: VT_STRING
	      },
	      15: {
	        n: "Company",
	        t: VT_STRING
	      },
	      16: {
	        n: "LinksUpToDate",
	        t: VT_BOOL
	      },
	      17: {
	        n: "CharacterCount",
	        t: VT_I4
	      },
	      19: {
	        n: "SharedDoc",
	        t: VT_BOOL
	      },
	      22: {
	        n: "HyperlinksChanged",
	        t: VT_BOOL
	      },
	      23: {
	        n: "AppVersion",
	        t: VT_I4,
	        p: "version"
	      },
	      24: {
	        n: "DigSig",
	        t: VT_BLOB
	      },
	      26: {
	        n: "ContentType",
	        t: VT_STRING
	      },
	      27: {
	        n: "ContentStatus",
	        t: VT_STRING
	      },
	      28: {
	        n: "Language",
	        t: VT_STRING
	      },
	      29: {
	        n: "Version",
	        t: VT_STRING
	      },
	      255: {},
	      2147483648: {
	        n: "Locale",
	        t: VT_UI4
	      },
	      2147483651: {
	        n: "Behavior",
	        t: VT_UI4
	      },
	      1919054434: {}
	    };
	    var SummaryPIDSI = {
	      1: {
	        n: "CodePage",
	        t: VT_I2
	      },
	      2: {
	        n: "Title",
	        t: VT_STRING
	      },
	      3: {
	        n: "Subject",
	        t: VT_STRING
	      },
	      4: {
	        n: "Author",
	        t: VT_STRING
	      },
	      5: {
	        n: "Keywords",
	        t: VT_STRING
	      },
	      6: {
	        n: "Comments",
	        t: VT_STRING
	      },
	      7: {
	        n: "Template",
	        t: VT_STRING
	      },
	      8: {
	        n: "LastAuthor",
	        t: VT_STRING
	      },
	      9: {
	        n: "RevNumber",
	        t: VT_STRING
	      },
	      10: {
	        n: "EditTime",
	        t: VT_FILETIME
	      },
	      11: {
	        n: "LastPrinted",
	        t: VT_FILETIME
	      },
	      12: {
	        n: "CreatedDate",
	        t: VT_FILETIME
	      },
	      13: {
	        n: "ModifiedDate",
	        t: VT_FILETIME
	      },
	      14: {
	        n: "PageCount",
	        t: VT_I4
	      },
	      15: {
	        n: "WordCount",
	        t: VT_I4
	      },
	      16: {
	        n: "CharCount",
	        t: VT_I4
	      },
	      17: {
	        n: "Thumbnail",
	        t: VT_CF
	      },
	      18: {
	        n: "Application",
	        t: VT_STRING
	      },
	      19: {
	        n: "DocSecurity",
	        t: VT_I4
	      },
	      255: {},
	      2147483648: {
	        n: "Locale",
	        t: VT_UI4
	      },
	      2147483651: {
	        n: "Behavior",
	        t: VT_UI4
	      },
	      1919054434: {}
	    };
	    var CountryEnum = {
	      1: "US",
	      2: "CA",
	      3: "",
	      7: "RU",
	      20: "EG",
	      30: "GR",
	      31: "NL",
	      32: "BE",
	      33: "FR",
	      34: "ES",
	      36: "HU",
	      39: "IT",
	      41: "CH",
	      43: "AT",
	      44: "GB",
	      45: "DK",
	      46: "SE",
	      47: "NO",
	      48: "PL",
	      49: "DE",
	      52: "MX",
	      55: "BR",
	      61: "AU",
	      64: "NZ",
	      66: "TH",
	      81: "JP",
	      82: "KR",
	      84: "VN",
	      86: "CN",
	      90: "TR",
	      105: "JS",
	      213: "DZ",
	      216: "MA",
	      218: "LY",
	      351: "PT",
	      354: "IS",
	      358: "FI",
	      420: "CZ",
	      886: "TW",
	      961: "LB",
	      962: "JO",
	      963: "SY",
	      964: "IQ",
	      965: "KW",
	      966: "SA",
	      971: "AE",
	      972: "IL",
	      974: "QA",
	      981: "IR",
	      65535: "US"
	    };
	    var XLSFillPattern = [null, "solid", "mediumGray", "darkGray", "lightGray", "darkHorizontal", "darkVertical", "darkDown", "darkUp", "darkGrid", "darkTrellis", "lightHorizontal", "lightVertical", "lightDown", "lightUp", "lightGrid", "lightTrellis", "gray125", "gray0625"];
	    function rgbify(arr) {
	      return arr.map(function (x) {
	        return [x >> 16 & 255, x >> 8 & 255, x & 255];
	      });
	    }
	    var _XLSIcv = rgbify([0, 16777215, 16711680, 65280, 255, 16776960, 16711935, 65535, 0, 16777215, 16711680, 65280, 255, 16776960, 16711935, 65535, 8388608, 32768, 128, 8421376, 8388736, 32896, 12632256, 8421504, 10066431, 10040166, 16777164, 13434879, 6684774, 16744576, 26316, 13421823, 128, 16711935, 16776960, 65535, 8388736, 8388608, 32896, 255, 52479, 13434879, 13434828, 16777113, 10079487, 16751052, 13408767, 16764057, 3368703, 3394764, 10079232, 16763904, 16750848, 16737792, 6710937, 9868950, 13158, 3381606, 13056, 3355392, 10040064, 10040166, 3355545, 3355443, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
	    var XLSIcv = dup(_XLSIcv);
	    var BErr = {
	      0: "#NULL!",
	      7: "#DIV/0!",
	      15: "#VALUE!",
	      23: "#REF!",
	      29: "#NAME?",
	      36: "#NUM!",
	      42: "#N/A",
	      43: "#GETTING_DATA",
	      255: "#WTF?"
	    };
	    var RBErr = {
	      "#NULL!": 0,
	      "#DIV/0!": 7,
	      "#VALUE!": 15,
	      "#REF!": 23,
	      "#NAME?": 29,
	      "#NUM!": 36,
	      "#N/A": 42,
	      "#GETTING_DATA": 43,
	      "#WTF?": 255
	    };
	    var XLSLblBuiltIn = ["_xlnm.Consolidate_Area", "_xlnm.Auto_Open", "_xlnm.Auto_Close", "_xlnm.Extract", "_xlnm.Database", "_xlnm.Criteria", "_xlnm.Print_Area", "_xlnm.Print_Titles", "_xlnm.Recorder", "_xlnm.Data_Form", "_xlnm.Auto_Activate", "_xlnm.Auto_Deactivate", "_xlnm.Sheet_Title", "_xlnm._FilterDatabase"];
	    var ct2type = {
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
	      "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
	      "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
	      "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
	      "application/vnd.ms-excel.worksheet": "sheets",
	      "application/vnd.ms-excel.binIndexWs": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
	      "application/vnd.ms-excel.chartsheet": "charts",
	      "application/vnd.ms-excel.macrosheet+xml": "macros",
	      "application/vnd.ms-excel.macrosheet": "macros",
	      "application/vnd.ms-excel.intlmacrosheet": "TODO",
	      "application/vnd.ms-excel.binIndexMs": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
	      "application/vnd.ms-excel.dialogsheet": "dialogs",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
	      "application/vnd.ms-excel.sharedStrings": "strs",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
	      "application/vnd.ms-excel.styles": "styles",
	      "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
	      "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
	      "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
	      "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
	      "application/vnd.ms-excel.comments": "comments",
	      "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
	      "application/vnd.ms-excel.person+xml": "people",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
	      "application/vnd.ms-excel.sheetMetadata": "metadata",
	      "application/vnd.ms-excel.pivotTable": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
	      "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
	      "application/vnd.ms-office.chartstyle+xml": "TODO",
	      "application/vnd.ms-office.chartex+xml": "TODO",
	      "application/vnd.ms-excel.calcChain": "calcchains",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
	      "application/vnd.ms-office.activeX": "TODO",
	      "application/vnd.ms-office.activeX+xml": "TODO",
	      "application/vnd.ms-excel.attachedToolbars": "TODO",
	      "application/vnd.ms-excel.connections": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
	      "application/vnd.ms-excel.externalLink": "links",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
	      "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
	      "application/vnd.ms-excel.pivotCacheRecords": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
	      "application/vnd.ms-excel.queryTable": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
	      "application/vnd.ms-excel.userNames": "TODO",
	      "application/vnd.ms-excel.revisionHeaders": "TODO",
	      "application/vnd.ms-excel.revisionLog": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
	      "application/vnd.ms-excel.tableSingleCells": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
	      "application/vnd.ms-excel.slicer": "TODO",
	      "application/vnd.ms-excel.slicerCache": "TODO",
	      "application/vnd.ms-excel.slicer+xml": "TODO",
	      "application/vnd.ms-excel.slicerCache+xml": "TODO",
	      "application/vnd.ms-excel.wsSortMap": "TODO",
	      "application/vnd.ms-excel.table": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
	      "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
	      "application/vnd.ms-excel.Timeline+xml": "TODO",
	      "application/vnd.ms-excel.TimelineCache+xml": "TODO",
	      "application/vnd.ms-office.vbaProject": "vba",
	      "application/vnd.ms-office.vbaProjectSignature": "TODO",
	      "application/vnd.ms-office.volatileDependencies": "TODO",
	      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
	      "application/vnd.ms-excel.controlproperties+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.model+data": "TODO",
	      "application/vnd.ms-excel.Survey+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
	      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
	      "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
	      "application/vnd.openxmlformats-package.relationships+xml": "rels",
	      "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
	      "image/png": "TODO",
	      "sheet": "js"
	    };
	    var CT_LIST = {
	      workbooks: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
	        xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
	        xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
	        xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
	        xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
	      },
	      strs: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
	        xlsb: "application/vnd.ms-excel.sharedStrings"
	      },
	      comments: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
	        xlsb: "application/vnd.ms-excel.comments"
	      },
	      sheets: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
	        xlsb: "application/vnd.ms-excel.worksheet"
	      },
	      charts: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
	        xlsb: "application/vnd.ms-excel.chartsheet"
	      },
	      dialogs: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
	        xlsb: "application/vnd.ms-excel.dialogsheet"
	      },
	      macros: {
	        xlsx: "application/vnd.ms-excel.macrosheet+xml",
	        xlsb: "application/vnd.ms-excel.macrosheet"
	      },
	      metadata: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
	        xlsb: "application/vnd.ms-excel.sheetMetadata"
	      },
	      styles: {
	        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
	        xlsb: "application/vnd.ms-excel.styles"
	      }
	    };
	    function new_ct() {
	      return {
	        workbooks: [],
	        sheets: [],
	        charts: [],
	        dialogs: [],
	        macros: [],
	        rels: [],
	        strs: [],
	        comments: [],
	        threadedcomments: [],
	        links: [],
	        coreprops: [],
	        extprops: [],
	        custprops: [],
	        themes: [],
	        styles: [],
	        calcchains: [],
	        vba: [],
	        drawings: [],
	        metadata: [],
	        people: [],
	        TODO: [],
	        xmlns: ""
	      };
	    }
	    function parse_ct(data) {
	      var ct = new_ct();
	      if (!data || !data.match) return ct;
	      var ctext = {};
	      (data.match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        switch (y[0].replace(nsregex, "<")) {
	          case "<?xml":
	            break;
	          case "<Types":
	            ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || ["", ""])[1]];
	            break;
	          case "<Default":
	            ctext[y.Extension.toLowerCase()] = y.ContentType;
	            break;
	          case "<Override":
	            if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
	            break;
	        }
	      });
	      if (ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
	      ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
	      ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
	      ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
	      ct.defaults = ctext;
	      delete ct.calcchains;
	      return ct;
	    }
	    function write_ct(ct, opts, raw) {
	      var type2ct = evert_arr(ct2type);
	      var o = [], v;
	      if (!raw) {
	        o[o.length] = XML_HEADER;
	        o[o.length] = writextag("Types", null, {
	          "xmlns": XMLNS.CT,
	          "xmlns:xsd": XMLNS.xsd,
	          "xmlns:xsi": XMLNS.xsi
	        });
	        o = o.concat([["xml", "application/xml"], ["bin", "application/vnd.ms-excel.sheet.binary.macroEnabled.main"], ["vml", "application/vnd.openxmlformats-officedocument.vmlDrawing"], ["data", "application/vnd.openxmlformats-officedocument.model+data"], ["bmp", "image/bmp"], ["png", "image/png"], ["gif", "image/gif"], ["emf", "image/x-emf"], ["wmf", "image/x-wmf"], ["jpg", "image/jpeg"], ["jpeg", "image/jpeg"], ["tif", "image/tiff"], ["tiff", "image/tiff"], ["pdf", "application/pdf"], ["rels", "application/vnd.openxmlformats-package.relationships+xml"]].map(function (x) {
	          return writextag("Default", null, {
	            "Extension": x[0],
	            "ContentType": x[1]
	          });
	        }));
	      }
	      var f1 = function (w) {
	        if (ct[w] && ct[w].length > 0) {
	          v = ct[w][0];
	          o[o.length] = writextag("Override", null, {
	            "PartName": (v[0] == "/" ? "" : "/") + v,
	            "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
	          });
	        }
	      };
	      var f2 = function (w) {
	        (ct[w] || []).forEach(function (v) {
	          o[o.length] = writextag("Override", null, {
	            "PartName": (v[0] == "/" ? "" : "/") + v,
	            "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
	          });
	        });
	      };
	      var f3 = function (t) {
	        (ct[t] || []).forEach(function (v) {
	          o[o.length] = writextag("Override", null, {
	            "PartName": (v[0] == "/" ? "" : "/") + v,
	            "ContentType": type2ct[t][0]
	          });
	        });
	      };
	      f1("workbooks");
	      f2("sheets");
	      f2("charts");
	      f3("themes");
	      ["strs", "styles"].forEach(f1);
	      ["coreprops", "extprops", "custprops"].forEach(f3);
	      f3("vba");
	      f3("comments");
	      f3("threadedcomments");
	      f3("drawings");
	      f2("metadata");
	      f3("people");
	      if (!raw && o.length > 2) {
	        o[o.length] = "</Types>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    var RELS = {
	      WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
	      SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
	      HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
	      VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
	      XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
	      XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
	      XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
	      CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
	      CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
	      CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
	      CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
	      EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
	      CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
	      SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
	      STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
	      THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
	      CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
	      CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
	      CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
	      WS: ["http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet", "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"],
	      DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
	      MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
	      IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
	      DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
	      XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
	      TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
	      PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
	      CONN: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/connections",
	      VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
	    };
	    function get_rels_path(file) {
	      var n = file.lastIndexOf("/");
	      return file.slice(0, n + 1) + "_rels/" + file.slice(n + 1) + ".rels";
	    }
	    function parse_rels(data, currentFilePath) {
	      var rels = {
	        "!id": {}
	      };
	      if (!data) return rels;
	      if (currentFilePath.charAt(0) !== "/") {
	        currentFilePath = "/" + currentFilePath;
	      }
	      var hash = {};
	      (data.match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        if (y[0] === "<Relationship") {
	          var rel = {};
	          rel.Type = y.Type;
	          rel.Target = unescapexml(y.Target);
	          rel.Id = y.Id;
	          if (y.TargetMode) rel.TargetMode = y.TargetMode;
	          var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath);
	          rels[canonictarget] = rel;
	          hash[y.Id] = rel;
	        }
	      });
	      rels["!id"] = hash;
	      return rels;
	    }
	    function write_rels(rels) {
	      var o = [XML_HEADER, writextag("Relationships", null, {
	        "xmlns": XMLNS.RELS
	      })];
	      keys(rels["!id"]).forEach(function (rid) {
	        o[o.length] = writextag("Relationship", null, rels["!id"][rid]);
	      });
	      if (o.length > 2) {
	        o[o.length] = "</Relationships>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    function add_rels(rels, rId, f, type, relobj, targetmode) {
	      if (!relobj) relobj = {};
	      if (!rels["!id"]) rels["!id"] = {};
	      if (!rels["!idx"]) rels["!idx"] = 1;
	      if (rId < 0) for (rId = rels["!idx"]; rels["!id"]["rId" + rId]; ++rId) {}
	      rels["!idx"] = rId + 1;
	      relobj.Id = "rId" + rId;
	      relobj.Type = type;
	      relobj.Target = f;
	      if (targetmode) relobj.TargetMode = targetmode; else if ([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1) relobj.TargetMode = "External";
	      if (rels["!id"][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
	      rels["!id"][relobj.Id] = relobj;
	      rels[("/" + relobj.Target).replace("//", "/")] = relobj;
	      return rId;
	    }
	    var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
	    function parse_manifest(d, opts) {
	      var str = xlml_normalize(d);
	      var Rn;
	      var FEtag;
	      while (Rn = xlmlregex.exec(str)) switch (Rn[3]) {
	        case "manifest":
	          break;
	        case "file-entry":
	          FEtag = parsexmltag(Rn[0], false);
	          if (FEtag.path == "/" && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
	          break;
	        case "encryption-data":
	        case "algorithm":
	        case "start-key-generation":
	        case "key-derivation":
	          throw new Error("Unsupported ODS Encryption");
	        default:
	          if (opts && opts.WTF) throw Rn;
	      }
	    }
	    function write_manifest(manifest) {
	      var o = [XML_HEADER];
	      o.push("<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\n");
	      o.push("  <manifest:file-entry manifest:full-path=\"/\" manifest:version=\"1.2\" manifest:media-type=\"application/vnd.oasis.opendocument.spreadsheet\"/>\n");
	      for (var i = 0; i < manifest.length; ++i) o.push("  <manifest:file-entry manifest:full-path=\"" + manifest[i][0] + "\" manifest:media-type=\"" + manifest[i][1] + "\"/>\n");
	      o.push("</manifest:manifest>");
	      return o.join("");
	    }
	    function write_rdf_type(file, res, tag) {
	      return ["  <rdf:Description rdf:about=\"" + file + "\">\n", "    <rdf:type rdf:resource=\"http://docs.oasis-open.org/ns/office/1.2/meta/" + (tag || "odf") + "#" + res + "\"/>\n", "  </rdf:Description>\n"].join("");
	    }
	    function write_rdf_has(base, file) {
	      return ["  <rdf:Description rdf:about=\"" + base + "\">\n", "    <ns0:hasPart xmlns:ns0=\"http://docs.oasis-open.org/ns/office/1.2/meta/pkg#\" rdf:resource=\"" + file + "\"/>\n", "  </rdf:Description>\n"].join("");
	    }
	    function write_rdf(rdf) {
	      var o = [XML_HEADER];
	      o.push("<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n");
	      for (var i = 0; i != rdf.length; ++i) {
	        o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
	        o.push(write_rdf_has("", rdf[i][0]));
	      }
	      o.push(write_rdf_type("", "Document", "pkg"));
	      o.push("</rdf:RDF>");
	      return o.join("");
	    }
	    function write_meta_ods(wb, opts) {
	      return "<office:document-meta xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" xmlns:meta=\"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" office:version=\"1.2\"><office:meta><meta:generator>SheetJS " + XLSX.version + "</meta:generator></office:meta></office:document-meta>";
	    }
	    var CORE_PROPS = [["cp:category", "Category"], ["cp:contentStatus", "ContentStatus"], ["cp:keywords", "Keywords"], ["cp:lastModifiedBy", "LastAuthor"], ["cp:lastPrinted", "LastPrinted"], ["cp:revision", "RevNumber"], ["cp:version", "Version"], ["dc:creator", "Author"], ["dc:description", "Comments"], ["dc:identifier", "Identifier"], ["dc:language", "Language"], ["dc:subject", "Subject"], ["dc:title", "Title"], ["dcterms:created", "CreatedDate", "date"], ["dcterms:modified", "ModifiedDate", "date"]];
	    var CORE_PROPS_REGEX = (function () {
	      var r = new Array(CORE_PROPS.length);
	      for (var i = 0; i < CORE_PROPS.length; ++i) {
	        var f = CORE_PROPS[i];
	        var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
	        r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">");
	      }
	      return r;
	    })();
	    function parse_core_props(data) {
	      var p = {};
	      data = utf8read(data);
	      for (var i = 0; i < CORE_PROPS.length; ++i) {
	        var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
	        if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
	        if (f[2] === "date" && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
	      }
	      return p;
	    }
	    function cp_doit(f, g, h, o, p) {
	      if (p[f] != null || g == null || g === "") return;
	      p[f] = g;
	      g = escapexml(g);
	      o[o.length] = h ? writextag(f, g, h) : writetag(f, g);
	    }
	    function write_core_props(cp, _opts) {
	      var opts = _opts || ({});
	      var o = [XML_HEADER, writextag("cp:coreProperties", null, {
	        "xmlns:cp": XMLNS.CORE_PROPS,
	        "xmlns:dc": XMLNS.dc,
	        "xmlns:dcterms": XMLNS.dcterms,
	        "xmlns:dcmitype": XMLNS.dcmitype,
	        "xmlns:xsi": XMLNS.xsi
	      })], p = {};
	      if (!cp && !opts.Props) return o.join("");
	      if (cp) {
	        if (cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {
	          "xsi:type": "dcterms:W3CDTF"
	        }, o, p);
	        if (cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {
	          "xsi:type": "dcterms:W3CDTF"
	        }, o, p);
	      }
	      for (var i = 0; i != CORE_PROPS.length; ++i) {
	        var f = CORE_PROPS[i];
	        var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
	        if (v === true) v = "1"; else if (v === false) v = "0"; else if (typeof v == "number") v = String(v);
	        if (v != null) cp_doit(f[0], v, null, o, p);
	      }
	      if (o.length > 2) {
	        o[o.length] = "</cp:coreProperties>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    var EXT_PROPS = [["Application", "Application", "string"], ["AppVersion", "AppVersion", "string"], ["Company", "Company", "string"], ["DocSecurity", "DocSecurity", "string"], ["Manager", "Manager", "string"], ["HyperlinksChanged", "HyperlinksChanged", "bool"], ["SharedDoc", "SharedDoc", "bool"], ["LinksUpToDate", "LinksUpToDate", "bool"], ["ScaleCrop", "ScaleCrop", "bool"], ["HeadingPairs", "HeadingPairs", "raw"], ["TitlesOfParts", "TitlesOfParts", "raw"]];
	    var PseudoPropsPairs = ["Worksheets", "SheetNames", "NamedRanges", "DefinedNames", "Chartsheets", "ChartNames"];
	    function load_props_pairs(HP, TOP, props, opts) {
	      var v = [];
	      if (typeof HP == "string") v = parseVector(HP, opts); else for (var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function (hp) {
	        return {
	          v: hp
	        };
	      }));
	      var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function (x) {
	        return x.v;
	      }) : TOP;
	      var idx = 0, len = 0;
	      if (parts.length > 0) for (var i = 0; i !== v.length; i += 2) {
	        len = +v[i + 1].v;
	        switch (v[i].v) {
	          case "Worksheets":
	          case "工作表":
	          case "Листы":
	          case "أوراق العمل":
	          case "ワークシート":
	          case "גליונות עבודה":
	          case "Arbeitsblätter":
	          case "Çalışma Sayfaları":
	          case "Feuilles de calcul":
	          case "Fogli di lavoro":
	          case "Folhas de cálculo":
	          case "Planilhas":
	          case "Regneark":
	          case "Hojas de cálculo":
	          case "Werkbladen":
	            props.Worksheets = len;
	            props.SheetNames = parts.slice(idx, idx + len);
	            break;
	          case "Named Ranges":
	          case "Rangos con nombre":
	          case "名前付き一覧":
	          case "Benannte Bereiche":
	          case "Navngivne områder":
	            props.NamedRanges = len;
	            props.DefinedNames = parts.slice(idx, idx + len);
	            break;
	          case "Charts":
	          case "Diagramme":
	            props.Chartsheets = len;
	            props.ChartNames = parts.slice(idx, idx + len);
	            break;
	        }
	        idx += len;
	      }
	    }
	    function parse_ext_props(data, p, opts) {
	      var q = {};
	      if (!p) p = {};
	      data = utf8read(data);
	      EXT_PROPS.forEach(function (f) {
	        var xml = (data.match(matchtag(f[0])) || [])[1];
	        switch (f[2]) {
	          case "string":
	            if (xml) p[f[1]] = unescapexml(xml);
	            break;
	          case "bool":
	            p[f[1]] = xml === "true";
	            break;
	          case "raw":
	            var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">"));
	            if (cur && cur.length > 0) q[f[1]] = cur[1];
	            break;
	        }
	      });
	      if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
	      return p;
	    }
	    function write_ext_props(cp) {
	      var o = [], W = writextag;
	      if (!cp) cp = {};
	      cp.Application = "SheetJS";
	      o[o.length] = XML_HEADER;
	      o[o.length] = writextag("Properties", null, {
	        "xmlns": XMLNS.EXT_PROPS,
	        "xmlns:vt": XMLNS.vt
	      });
	      EXT_PROPS.forEach(function (f) {
	        if (cp[f[1]] === undefined) return;
	        var v;
	        switch (f[2]) {
	          case "string":
	            v = escapexml(String(cp[f[1]]));
	            break;
	          case "bool":
	            v = cp[f[1]] ? "true" : "false";
	            break;
	        }
	        if (v !== undefined) o[o.length] = W(f[0], v);
	      });
	      o[o.length] = W("HeadingPairs", W("vt:vector", W("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W("vt:variant", W("vt:i4", String(cp.Worksheets))), {
	        size: 2,
	        baseType: "variant"
	      }));
	      o[o.length] = W("TitlesOfParts", W("vt:vector", cp.SheetNames.map(function (s) {
	        return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>";
	      }).join(""), {
	        size: cp.Worksheets,
	        baseType: "lpstr"
	      }));
	      if (o.length > 2) {
	        o[o.length] = "</Properties>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    var custregex = /<[^>]+>[^<]*/g;
	    function parse_cust_props(data, opts) {
	      var p = {}, name = "";
	      var m = data.match(custregex);
	      if (m) for (var i = 0; i != m.length; ++i) {
	        var x = m[i], y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<?xml":
	            break;
	          case "<Properties":
	            break;
	          case "<property":
	            name = unescapexml(y.name);
	            break;
	          case "</property>":
	            name = null;
	            break;
	          default:
	            if (x.indexOf("<vt:") === 0) {
	              var toks = x.split(">");
	              var type = toks[0].slice(4), text = toks[1];
	              switch (type) {
	                case "lpstr":
	                case "bstr":
	                case "lpwstr":
	                  p[name] = unescapexml(text);
	                  break;
	                case "bool":
	                  p[name] = parsexmlbool(text);
	                  break;
	                case "i1":
	                case "i2":
	                case "i4":
	                case "i8":
	                case "int":
	                case "uint":
	                  p[name] = parseInt(text, 10);
	                  break;
	                case "r4":
	                case "r8":
	                case "decimal":
	                  p[name] = parseFloat(text);
	                  break;
	                case "filetime":
	                case "date":
	                  p[name] = parseDate(text);
	                  break;
	                case "cy":
	                case "error":
	                  p[name] = unescapexml(text);
	                  break;
	                default:
	                  if (type.slice(-1) == "/") break;
	                  if (opts.WTF && typeof console !== "undefined") console.warn("Unexpected", x, type, toks);
	              }
	            } else if (x.slice(0, 2) === "</") ; else if (opts.WTF) throw new Error(x);
	        }
	      }
	      return p;
	    }
	    function write_cust_props(cp) {
	      var o = [XML_HEADER, writextag("Properties", null, {
	        "xmlns": XMLNS.CUST_PROPS,
	        "xmlns:vt": XMLNS.vt
	      })];
	      if (!cp) return o.join("");
	      var pid = 1;
	      keys(cp).forEach(function custprop(k) {
	        ++pid;
	        o[o.length] = writextag("property", write_vt(cp[k], true), {
	          "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
	          "pid": pid,
	          "name": escapexml(k)
	        });
	      });
	      if (o.length > 2) {
	        o[o.length] = "</Properties>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    var XLMLDocPropsMap = {
	      Title: "Title",
	      Subject: "Subject",
	      Author: "Author",
	      Keywords: "Keywords",
	      Comments: "Description",
	      LastAuthor: "LastAuthor",
	      RevNumber: "Revision",
	      Application: "AppName",
	      LastPrinted: "LastPrinted",
	      CreatedDate: "Created",
	      ModifiedDate: "LastSaved",
	      Category: "Category",
	      Manager: "Manager",
	      Company: "Company",
	      AppVersion: "Version",
	      ContentStatus: "ContentStatus",
	      Identifier: "Identifier",
	      Language: "Language"
	    };
	    var evert_XLMLDPM;
	    function xlml_set_prop(Props, tag, val) {
	      if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
	      tag = evert_XLMLDPM[tag] || tag;
	      Props[tag] = val;
	    }
	    function xlml_write_docprops(Props, opts) {
	      var o = [];
	      keys(XLMLDocPropsMap).map(function (m) {
	        for (var i = 0; i < CORE_PROPS.length; ++i) if (CORE_PROPS[i][1] == m) return CORE_PROPS[i];
	        for (i = 0; i < EXT_PROPS.length; ++i) if (EXT_PROPS[i][1] == m) return EXT_PROPS[i];
	        throw m;
	      }).forEach(function (p) {
	        if (Props[p[1]] == null) return;
	        var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
	        switch (p[2]) {
	          case "date":
	            m = new Date(m).toISOString().replace(/\.\d*Z/, "Z");
	            break;
	        }
	        if (typeof m == "number") m = String(m); else if (m === true || m === false) {
	          m = m ? "1" : "0";
	        } else if (m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/, "");
	        o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
	      });
	      return writextag("DocumentProperties", o.join(""), {
	        xmlns: XLMLNS.o
	      });
	    }
	    function xlml_write_custprops(Props, Custprops) {
	      var BLACKLIST = ["Worksheets", "SheetNames"];
	      var T = "CustomDocumentProperties";
	      var o = [];
	      if (Props) keys(Props).forEach(function (k) {
	        if (!Object.prototype.hasOwnProperty.call(Props, k)) return;
	        for (var i = 0; i < CORE_PROPS.length; ++i) if (k == CORE_PROPS[i][1]) return;
	        for (i = 0; i < EXT_PROPS.length; ++i) if (k == EXT_PROPS[i][1]) return;
	        for (i = 0; i < BLACKLIST.length; ++i) if (k == BLACKLIST[i]) return;
	        var m = Props[k];
	        var t = "string";
	        if (typeof m == "number") {
	          t = "float";
	          m = String(m);
	        } else if (m === true || m === false) {
	          t = "boolean";
	          m = m ? "1" : "0";
	        } else m = String(m);
	        o.push(writextag(escapexmltag(k), m, {
	          "dt:dt": t
	        }));
	      });
	      if (Custprops) keys(Custprops).forEach(function (k) {
	        if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;
	        if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;
	        var m = Custprops[k];
	        var t = "string";
	        if (typeof m == "number") {
	          t = "float";
	          m = String(m);
	        } else if (m === true || m === false) {
	          t = "boolean";
	          m = m ? "1" : "0";
	        } else if (m instanceof Date) {
	          t = "dateTime.tz";
	          m = m.toISOString();
	        } else m = String(m);
	        o.push(writextag(escapexmltag(k), m, {
	          "dt:dt": t
	        }));
	      });
	      return "<" + T + " xmlns=\"" + XLMLNS.o + "\">" + o.join("") + "</" + T + ">";
	    }
	    function parse_FILETIME(blob) {
	      var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
	      return new Date((dwHighDateTime / 10000000 * Math.pow(2, 32) + dwLowDateTime / 10000000 - 11644473600) * 1000).toISOString().replace(/\.000/, "");
	    }
	    function write_FILETIME(time) {
	      var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
	      var t = date.getTime() / 1000 + 11644473600;
	      var l = t % Math.pow(2, 32), h = (t - l) / Math.pow(2, 32);
	      l *= 10000000;
	      h *= 10000000;
	      var w = l / Math.pow(2, 32) | 0;
	      if (w > 0) {
	        l = l % Math.pow(2, 32);
	        h += w;
	      }
	      var o = new_buf(8);
	      o.write_shift(4, l);
	      o.write_shift(4, h);
	      return o;
	    }
	    function parse_lpstr(blob, type, pad) {
	      var start = blob.l;
	      var str = blob.read_shift(0, "lpstr-cp");
	      if (pad) while (blob.l - start & 3) ++blob.l;
	      return str;
	    }
	    function parse_lpwstr(blob, type, pad) {
	      var str = blob.read_shift(0, "lpwstr");
	      if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;
	      return str;
	    }
	    function parse_VtStringBase(blob, stringType, pad) {
	      if (stringType === 31) return parse_lpwstr(blob);
	      return parse_lpstr(blob, stringType, pad);
	    }
	    function parse_VtString(blob, t, pad) {
	      return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
	    }
	    function parse_VtUnalignedString(blob, t) {
	      if (!t) throw new Error("VtUnalignedString must have positive length");
	      return parse_VtStringBase(blob, t, 0);
	    }
	    function parse_VtVecLpwstrValue(blob) {
	      var length = blob.read_shift(4);
	      var ret = [];
	      for (var i = 0; i != length; ++i) {
	        var start = blob.l;
	        ret[i] = blob.read_shift(0, "lpwstr").replace(chr0, "");
	        if (blob.l - start & 2) blob.l += 2;
	      }
	      return ret;
	    }
	    function parse_VtVecUnalignedLpstrValue(blob) {
	      var length = blob.read_shift(4);
	      var ret = [];
	      for (var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
	      return ret;
	    }
	    function parse_VtHeadingPair(blob) {
	      var start = blob.l;
	      var headingString = parse_TypedPropertyValue(blob, VT_USTR);
	      if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && blob.l - start & 2) blob.l += 2;
	      var headerParts = parse_TypedPropertyValue(blob, VT_I4);
	      return [headingString, headerParts];
	    }
	    function parse_VtVecHeadingPairValue(blob) {
	      var cElements = blob.read_shift(4);
	      var out = [];
	      for (var i = 0; i < cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
	      return out;
	    }
	    function parse_dictionary(blob, CodePage) {
	      var cnt = blob.read_shift(4);
	      var dict = {};
	      for (var j = 0; j != cnt; ++j) {
	        var pid = blob.read_shift(4);
	        var len = blob.read_shift(4);
	        dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
	        if (CodePage === 1200 && len % 2) blob.l += 2;
	      }
	      if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2;
	      return dict;
	    }
	    function parse_BLOB(blob) {
	      var size = blob.read_shift(4);
	      var bytes = blob.slice(blob.l, blob.l + size);
	      blob.l += size;
	      if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;
	      return bytes;
	    }
	    function parse_ClipboardData(blob) {
	      var o = {};
	      o.Size = blob.read_shift(4);
	      blob.l += o.Size + 3 - (o.Size - 1) % 4;
	      return o;
	    }
	    function parse_TypedPropertyValue(blob, type, _opts) {
	      var t = blob.read_shift(2), ret, opts = _opts || ({});
	      blob.l += 2;
	      if (type !== VT_VARIANT) if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 65534) == 4126 && (t & 65534) == 4126)) throw new Error("Expected type " + type + " saw " + t);
	      switch (type === VT_VARIANT ? t : type) {
	        case 2:
	          ret = blob.read_shift(2, "i");
	          if (!opts.raw) blob.l += 2;
	          return ret;
	        case 3:
	          ret = blob.read_shift(4, "i");
	          return ret;
	        case 11:
	          return blob.read_shift(4) !== 0;
	        case 19:
	          ret = blob.read_shift(4);
	          return ret;
	        case 30:
	          return parse_lpstr(blob, t, 4).replace(chr0, "");
	        case 31:
	          return parse_lpwstr(blob);
	        case 64:
	          return parse_FILETIME(blob);
	        case 65:
	          return parse_BLOB(blob);
	        case 71:
	          return parse_ClipboardData(blob);
	        case 80:
	          return parse_VtString(blob, t, !opts.raw).replace(chr0, "");
	        case 81:
	          return parse_VtUnalignedString(blob, t).replace(chr0, "");
	        case 4108:
	          return parse_VtVecHeadingPairValue(blob);
	        case 4126:
	        case 4127:
	          return t == 4127 ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
	        default:
	          throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
	      }
	    }
	    function write_TypedPropertyValue(type, value) {
	      var o = new_buf(4), p = new_buf(4);
	      o.write_shift(4, type == 80 ? 31 : type);
	      switch (type) {
	        case 3:
	          p.write_shift(-4, value);
	          break;
	        case 5:
	          p = new_buf(8);
	          p.write_shift(8, value, "f");
	          break;
	        case 11:
	          p.write_shift(4, value ? 1 : 0);
	          break;
	        case 64:
	          p = write_FILETIME(value);
	          break;
	        case 31:
	        case 80:
	          p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
	          p.write_shift(4, value.length + 1);
	          p.write_shift(0, value, "dbcs");
	          while (p.l != p.length) p.write_shift(1, 0);
	          break;
	        default:
	          throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
	      }
	      return bconcat([o, p]);
	    }
	    function parse_PropertySet(blob, PIDSI) {
	      var start_addr = blob.l;
	      var size = blob.read_shift(4);
	      var NumProps = blob.read_shift(4);
	      var Props = [], i = 0;
	      var CodePage = 0;
	      var Dictionary = -1, DictObj = {};
	      for (i = 0; i != NumProps; ++i) {
	        var PropID = blob.read_shift(4);
	        var Offset = blob.read_shift(4);
	        Props[i] = [PropID, Offset + start_addr];
	      }
	      Props.sort(function (x, y) {
	        return x[1] - y[1];
	      });
	      var PropH = {};
	      for (i = 0; i != NumProps; ++i) {
	        if (blob.l !== Props[i][1]) {
	          var fail = true;
	          if (i > 0 && PIDSI) switch (PIDSI[Props[i - 1][0]].t) {
	            case 2:
	              if (blob.l + 2 === Props[i][1]) {
	                blob.l += 2;
	                fail = false;
	              }
	              break;
	            case 80:
	              if (blob.l <= Props[i][1]) {
	                blob.l = Props[i][1];
	                fail = false;
	              }
	              break;
	            case 4108:
	              if (blob.l <= Props[i][1]) {
	                blob.l = Props[i][1];
	                fail = false;
	              }
	              break;
	          }
	          if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {
	            fail = false;
	            blob.l = Props[i][1];
	          }
	          if (fail) throw new Error("Read Error: Expected address " + Props[i][1] + " at " + blob.l + " :" + i);
	        }
	        if (PIDSI) {
	          if (Props[i][0] == 0 && Props.length > i + 1 && Props[i][1] == Props[i + 1][1]) continue;
	          var piddsi = PIDSI[Props[i][0]];
	          PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {
	            raw: true
	          });
	          if (piddsi.p === "version") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
	          if (piddsi.n == "CodePage") switch (PropH[piddsi.n]) {
	            case 0:
	              PropH[piddsi.n] = 1252;
	            case 874:
	            case 932:
	            case 936:
	            case 949:
	            case 950:
	            case 1250:
	            case 1251:
	            case 1253:
	            case 1254:
	            case 1255:
	            case 1256:
	            case 1257:
	            case 1258:
	            case 10000:
	            case 1200:
	            case 1201:
	            case 1252:
	            case 65000:
	            case -536:
	            case 65001:
	            case -535:
	              set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
	              break;
	            default:
	              throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
	          }
	        } else {
	          if (Props[i][0] === 1) {
	            CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
	            set_cp(CodePage);
	            if (Dictionary !== -1) {
	              var oldpos = blob.l;
	              blob.l = Props[Dictionary][1];
	              DictObj = parse_dictionary(blob, CodePage);
	              blob.l = oldpos;
	            }
	          } else if (Props[i][0] === 0) {
	            if (CodePage === 0) {
	              Dictionary = i;
	              blob.l = Props[i + 1][1];
	              continue;
	            }
	            DictObj = parse_dictionary(blob, CodePage);
	          } else {
	            var name = DictObj[Props[i][0]];
	            var val;
	            switch (blob[blob.l]) {
	              case 65:
	                blob.l += 4;
	                val = parse_BLOB(blob);
	                break;
	              case 30:
	                blob.l += 4;
	                val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
	                break;
	              case 31:
	                blob.l += 4;
	                val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
	                break;
	              case 3:
	                blob.l += 4;
	                val = blob.read_shift(4, "i");
	                break;
	              case 19:
	                blob.l += 4;
	                val = blob.read_shift(4);
	                break;
	              case 5:
	                blob.l += 4;
	                val = blob.read_shift(8, "f");
	                break;
	              case 11:
	                blob.l += 4;
	                val = parsebool(blob, 4);
	                break;
	              case 64:
	                blob.l += 4;
	                val = parseDate(parse_FILETIME(blob));
	                break;
	              default:
	                throw new Error("unparsed value: " + blob[blob.l]);
	            }
	            PropH[name] = val;
	          }
	        }
	      }
	      blob.l = start_addr + size;
	      return PropH;
	    }
	    var XLSPSSkip = ["CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID"];
	    function guess_property_type(val) {
	      switch (typeof val) {
	        case "boolean":
	          return 11;
	        case "number":
	          return (val | 0) == val ? 3 : 5;
	        case "string":
	          return 31;
	        case "object":
	          if (val instanceof Date) return 64;
	          break;
	      }
	      return -1;
	    }
	    function write_PropertySet(entries, RE, PIDSI) {
	      var hdr = new_buf(8), piao = [], prop = [];
	      var sz = 8, i = 0;
	      var pr = new_buf(8), pio = new_buf(8);
	      pr.write_shift(4, 2);
	      pr.write_shift(4, 1200);
	      pio.write_shift(4, 1);
	      prop.push(pr);
	      piao.push(pio);
	      sz += 8 + pr.length;
	      if (!RE) {
	        pio = new_buf(8);
	        pio.write_shift(4, 0);
	        piao.unshift(pio);
	        var bufs = [new_buf(4)];
	        bufs[0].write_shift(4, entries.length);
	        for (i = 0; i < entries.length; ++i) {
	          var value = entries[i][0];
	          pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
	          pr.write_shift(4, i + 2);
	          pr.write_shift(4, value.length + 1);
	          pr.write_shift(0, value, "dbcs");
	          while (pr.l != pr.length) pr.write_shift(1, 0);
	          bufs.push(pr);
	        }
	        pr = bconcat(bufs);
	        prop.unshift(pr);
	        sz += 8 + pr.length;
	      }
	      for (i = 0; i < entries.length; ++i) {
	        if (RE && !RE[entries[i][0]]) continue;
	        if (XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1) continue;
	        if (entries[i][1] == null) continue;
	        var val = entries[i][1], idx = 0;
	        if (RE) {
	          idx = +RE[entries[i][0]];
	          var pinfo = PIDSI[idx];
	          if (pinfo.p == "version" && typeof val == "string") {
	            var arr = val.split(".");
	            val = (+arr[0] << 16) + (+arr[1] || 0);
	          }
	          pr = write_TypedPropertyValue(pinfo.t, val);
	        } else {
	          var T = guess_property_type(val);
	          if (T == -1) {
	            T = 31;
	            val = String(val);
	          }
	          pr = write_TypedPropertyValue(T, val);
	        }
	        prop.push(pr);
	        pio = new_buf(8);
	        pio.write_shift(4, !RE ? 2 + i : idx);
	        piao.push(pio);
	        sz += 8 + pr.length;
	      }
	      var w = 8 * (prop.length + 1);
	      for (i = 0; i < prop.length; ++i) {
	        piao[i].write_shift(4, w);
	        w += prop[i].length;
	      }
	      hdr.write_shift(4, sz);
	      hdr.write_shift(4, prop.length);
	      return bconcat([hdr].concat(piao).concat(prop));
	    }
	    function parse_PropertySetStream(file, PIDSI, clsid) {
	      var blob = file.content;
	      if (!blob) return {};
	      prep_blob(blob, 0);
	      var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
	      blob.chk("feff", "Byte Order: ");
	      blob.read_shift(2);
	      var SystemIdentifier = blob.read_shift(4);
	      var CLSID = blob.read_shift(16);
	      if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
	      NumSets = blob.read_shift(4);
	      if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
	      FMTID0 = blob.read_shift(16);
	      Offset0 = blob.read_shift(4);
	      if (NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l); else if (NumSets === 2) {
	        FMTID1 = blob.read_shift(16);
	        Offset1 = blob.read_shift(4);
	      }
	      var PSet0 = parse_PropertySet(blob, PIDSI);
	      var rval = {
	        SystemIdentifier: SystemIdentifier
	      };
	      for (var y in PSet0) rval[y] = PSet0[y];
	      rval.FMTID = FMTID0;
	      if (NumSets === 1) return rval;
	      if (Offset1 - blob.l == 2) blob.l += 2;
	      if (blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
	      var PSet1;
	      try {
	        PSet1 = parse_PropertySet(blob, null);
	      } catch (e) {}
	      for (y in PSet1) rval[y] = PSet1[y];
	      rval.FMTID = [FMTID0, FMTID1];
	      return rval;
	    }
	    function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
	      var hdr = new_buf(entries2 ? 68 : 48);
	      var bufs = [hdr];
	      hdr.write_shift(2, 65534);
	      hdr.write_shift(2, 0);
	      hdr.write_shift(4, 842412599);
	      hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
	      hdr.write_shift(4, entries2 ? 2 : 1);
	      hdr.write_shift(16, clsid, "hex");
	      hdr.write_shift(4, entries2 ? 68 : 48);
	      var ps0 = write_PropertySet(entries, RE, PIDSI);
	      bufs.push(ps0);
	      if (entries2) {
	        var ps1 = write_PropertySet(entries2, null, null);
	        hdr.write_shift(16, clsid2, "hex");
	        hdr.write_shift(4, 68 + ps0.length);
	        bufs.push(ps1);
	      }
	      return bconcat(bufs);
	    }
	    function parsenoop2(blob, length) {
	      blob.read_shift(length);
	      return null;
	    }
	    function writezeroes(n, o) {
	      if (!o) o = new_buf(n);
	      for (var j = 0; j < n; ++j) o.write_shift(1, 0);
	      return o;
	    }
	    function parslurp(blob, length, cb) {
	      var arr = [], target = blob.l + length;
	      while (blob.l < target) arr.push(cb(blob, target - blob.l));
	      if (target !== blob.l) throw new Error("Slurp error");
	      return arr;
	    }
	    function parsebool(blob, length) {
	      return blob.read_shift(length) === 1;
	    }
	    function writebool(v, o) {
	      if (!o) o = new_buf(2);
	      o.write_shift(2, +!!v);
	      return o;
	    }
	    function parseuint16(blob) {
	      return blob.read_shift(2, "u");
	    }
	    function writeuint16(v, o) {
	      if (!o) o = new_buf(2);
	      o.write_shift(2, v);
	      return o;
	    }
	    function parseuint16a(blob, length) {
	      return parslurp(blob, length, parseuint16);
	    }
	    function parse_Bes(blob) {
	      var v = blob.read_shift(1), t = blob.read_shift(1);
	      return t === 1 ? v : v === 1;
	    }
	    function write_Bes(v, t, o) {
	      if (!o) o = new_buf(2);
	      o.write_shift(1, t == "e" ? +v : +!!v);
	      o.write_shift(1, t == "e" ? 1 : 0);
	      return o;
	    }
	    function parse_ShortXLUnicodeString(blob, length, opts) {
	      var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
	      var encoding = "sbcs-cont";
	      var cp = current_codepage;
	      if (opts && opts.biff >= 8) current_codepage = 1200;
	      if (!opts || opts.biff == 8) {
	        var fHighByte = blob.read_shift(1);
	        if (fHighByte) {
	          encoding = "dbcs-cont";
	        }
	      } else if (opts.biff == 12) {
	        encoding = "wstr";
	      }
	      if (opts.biff >= 2 && opts.biff <= 5) encoding = "cpstr";
	      var o = cch ? blob.read_shift(cch, encoding) : "";
	      current_codepage = cp;
	      return o;
	    }
	    function parse_XLUnicodeRichExtendedString(blob) {
	      var cp = current_codepage;
	      current_codepage = 1200;
	      var cch = blob.read_shift(2), flags = blob.read_shift(1);
	      var fExtSt = flags & 4, fRichSt = flags & 8;
	      var width = 1 + (flags & 1);
	      var cRun = 0, cbExtRst;
	      var z = {};
	      if (fRichSt) cRun = blob.read_shift(2);
	      if (fExtSt) cbExtRst = blob.read_shift(4);
	      var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
	      var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
	      if (fRichSt) blob.l += 4 * cRun;
	      if (fExtSt) blob.l += cbExtRst;
	      z.t = msg;
	      if (!fRichSt) {
	        z.raw = "<t>" + z.t + "</t>";
	        z.r = z.t;
	      }
	      current_codepage = cp;
	      return z;
	    }
	    function write_XLUnicodeRichExtendedString(xlstr) {
	      var str = xlstr.t || "";
	      var hdr = new_buf(3 + (0));
	      hdr.write_shift(2, str.length);
	      hdr.write_shift(1, (0) | 1);
	      var otext = new_buf(2 * str.length);
	      otext.write_shift(2 * str.length, str, "utf16le");
	      var out = [hdr, otext];
	      return bconcat(out);
	    }
	    function parse_XLUnicodeStringNoCch(blob, cch, opts) {
	      var retval;
	      if (opts) {
	        if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, "cpstr");
	        if (opts.biff >= 12) return blob.read_shift(cch, "dbcs-cont");
	      }
	      var fHighByte = blob.read_shift(1);
	      if (fHighByte === 0) {
	        retval = blob.read_shift(cch, "sbcs-cont");
	      } else {
	        retval = blob.read_shift(cch, "dbcs-cont");
	      }
	      return retval;
	    }
	    function parse_XLUnicodeString(blob, length, opts) {
	      var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
	      if (cch === 0) {
	        blob.l++;
	        return "";
	      }
	      return parse_XLUnicodeStringNoCch(blob, cch, opts);
	    }
	    function parse_XLUnicodeString2(blob, length, opts) {
	      if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
	      var cch = blob.read_shift(1);
	      if (cch === 0) {
	        blob.l++;
	        return "";
	      }
	      return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
	    }
	    function write_XLUnicodeString(str, opts, o) {
	      if (!o) o = new_buf(3 + 2 * str.length);
	      o.write_shift(2, str.length);
	      o.write_shift(1, 1);
	      o.write_shift(31, str, "utf16le");
	      return o;
	    }
	    function parse_ControlInfo(blob) {
	      var flags = blob.read_shift(1);
	      blob.l++;
	      var accel = blob.read_shift(2);
	      blob.l += 2;
	      return [flags, accel];
	    }
	    function parse_URLMoniker(blob) {
	      var len = blob.read_shift(4), start = blob.l;
	      var extra = false;
	      if (len > 24) {
	        blob.l += len - 24;
	        if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
	        blob.l = start;
	      }
	      var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
	      if (extra) blob.l += 24;
	      return url;
	    }
	    function parse_FileMoniker(blob) {
	      var cAnti = blob.read_shift(2);
	      var preamble = "";
	      while (cAnti-- > 0) preamble += "../";
	      var ansiPath = blob.read_shift(0, "lpstr-ansi");
	      blob.l += 2;
	      if (blob.read_shift(2) != 57005) throw new Error("Bad FileMoniker");
	      var sz = blob.read_shift(4);
	      if (sz === 0) return preamble + ansiPath.replace(/\\/g, "/");
	      var bytes = blob.read_shift(4);
	      if (blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
	      var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
	      return preamble + unicodePath;
	    }
	    function parse_HyperlinkMoniker(blob, length) {
	      var clsid = blob.read_shift(16);
	      switch (clsid) {
	        case "e0c9ea79f9bace118c8200aa004ba90b":
	          return parse_URLMoniker(blob);
	        case "0303000000000000c000000000000046":
	          return parse_FileMoniker(blob);
	        default:
	          throw new Error("Unsupported Moniker " + clsid);
	      }
	    }
	    function parse_HyperlinkString(blob) {
	      var len = blob.read_shift(4);
	      var o = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
	      return o;
	    }
	    function write_HyperlinkString(str, o) {
	      if (!o) o = new_buf(6 + str.length * 2);
	      o.write_shift(4, 1 + str.length);
	      for (var i = 0; i < str.length; ++i) o.write_shift(2, str.charCodeAt(i));
	      o.write_shift(2, 0);
	      return o;
	    }
	    function parse_Hyperlink(blob, length) {
	      var end = blob.l + length;
	      var sVer = blob.read_shift(4);
	      if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
	      var flags = blob.read_shift(2);
	      blob.l += 2;
	      var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
	      if (flags & 16) displayName = parse_HyperlinkString(blob, end - blob.l);
	      if (flags & 128) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
	      if ((flags & 257) === 257) moniker = parse_HyperlinkString(blob, end - blob.l);
	      if ((flags & 257) === 1) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
	      if (flags & 8) Loc = parse_HyperlinkString(blob, end - blob.l);
	      if (flags & 32) guid = blob.read_shift(16);
	      if (flags & 64) fileTime = parse_FILETIME(blob);
	      blob.l = end;
	      var target = targetFrameName || moniker || oleMoniker || "";
	      if (target && Loc) target += "#" + Loc;
	      if (!target) target = "#" + Loc;
	      if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
	      var out = {
	        Target: target
	      };
	      if (guid) out.guid = guid;
	      if (fileTime) out.time = fileTime;
	      if (displayName) out.Tooltip = displayName;
	      return out;
	    }
	    function write_Hyperlink(hl) {
	      var out = new_buf(512), i = 0;
	      var Target = hl.Target;
	      if (Target.slice(0, 7) == "file://") Target = Target.slice(7);
	      var hashidx = Target.indexOf("#");
	      var F = hashidx > -1 ? 31 : 23;
	      switch (Target.charAt(0)) {
	        case "#":
	          F = 28;
	          break;
	        case ".":
	          F &= ~2;
	          break;
	      }
	      out.write_shift(4, 2);
	      out.write_shift(4, F);
	      var data = [8, 6815827, 6619237, 4849780, 83];
	      for (i = 0; i < data.length; ++i) out.write_shift(4, data[i]);
	      if (F == 28) {
	        Target = Target.slice(1);
	        write_HyperlinkString(Target, out);
	      } else if (F & 2) {
	        data = ("e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b").split(" ");
	        for (i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));
	        var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
	        out.write_shift(4, 2 * (Pretarget.length + 1));
	        for (i = 0; i < Pretarget.length; ++i) out.write_shift(2, Pretarget.charCodeAt(i));
	        out.write_shift(2, 0);
	        if (F & 8) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
	      } else {
	        data = ("03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46").split(" ");
	        for (i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));
	        var P = 0;
	        while (Target.slice(P * 3, P * 3 + 3) == "../" || Target.slice(P * 3, P * 3 + 3) == "..\\") ++P;
	        out.write_shift(2, P);
	        out.write_shift(4, Target.length - 3 * P + 1);
	        for (i = 0; i < Target.length - 3 * P; ++i) out.write_shift(1, Target.charCodeAt(i + 3 * P) & 255);
	        out.write_shift(1, 0);
	        out.write_shift(2, 65535);
	        out.write_shift(2, 57005);
	        for (i = 0; i < 6; ++i) out.write_shift(4, 0);
	      }
	      return out.slice(0, out.l);
	    }
	    function parse_LongRGBA(blob) {
	      var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1);
	      return [r, g, b, a];
	    }
	    function parse_LongRGB(blob, length) {
	      var x = parse_LongRGBA(blob);
	      x[3] = 0;
	      return x;
	    }
	    function parse_XLSCell(blob, length, opts) {
	      var rw = blob.read_shift(2);
	      var col = blob.read_shift(2);
	      var ret = {
	        r: rw,
	        c: col,
	        ixfe: 0
	      };
	      if (opts && opts.biff == 2 || length == 7) {
	        var flags = blob.read_shift(1);
	        ret.ixfe = flags & 63;
	        blob.l += 2;
	      } else ret.ixfe = blob.read_shift(2);
	      return ret;
	    }
	    function write_XLSCell(R, C, ixfe, o) {
	      if (!o) o = new_buf(6);
	      o.write_shift(2, R);
	      o.write_shift(2, C);
	      o.write_shift(2, ixfe || 0);
	      return o;
	    }
	    function parse_frtHeader(blob) {
	      var rt = blob.read_shift(2);
	      var flags = blob.read_shift(2);
	      blob.l += 8;
	      return {
	        type: rt,
	        flags: flags
	      };
	    }
	    function parse_OptXLUnicodeString(blob, length, opts) {
	      return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
	    }
	    function parse_XTI(blob, length, opts) {
	      var w = opts.biff > 8 ? 4 : 2;
	      var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w, "i"), itabLast = blob.read_shift(w, "i");
	      return [iSupBook, itabFirst, itabLast];
	    }
	    function parse_RkRec(blob) {
	      var ixfe = blob.read_shift(2);
	      var RK = parse_RkNumber(blob);
	      return [ixfe, RK];
	    }
	    function parse_AddinUdf(blob, length, opts) {
	      blob.l += 4;
	      length -= 4;
	      var l = blob.l + length;
	      var udfName = parse_ShortXLUnicodeString(blob, length, opts);
	      var cb = blob.read_shift(2);
	      l -= blob.l;
	      if (cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
	      blob.l += cb;
	      return udfName;
	    }
	    function parse_Ref8U(blob) {
	      var rwFirst = blob.read_shift(2);
	      var rwLast = blob.read_shift(2);
	      var colFirst = blob.read_shift(2);
	      var colLast = blob.read_shift(2);
	      return {
	        s: {
	          c: colFirst,
	          r: rwFirst
	        },
	        e: {
	          c: colLast,
	          r: rwLast
	        }
	      };
	    }
	    function write_Ref8U(r, o) {
	      if (!o) o = new_buf(8);
	      o.write_shift(2, r.s.r);
	      o.write_shift(2, r.e.r);
	      o.write_shift(2, r.s.c);
	      o.write_shift(2, r.e.c);
	      return o;
	    }
	    function parse_RefU(blob) {
	      var rwFirst = blob.read_shift(2);
	      var rwLast = blob.read_shift(2);
	      var colFirst = blob.read_shift(1);
	      var colLast = blob.read_shift(1);
	      return {
	        s: {
	          c: colFirst,
	          r: rwFirst
	        },
	        e: {
	          c: colLast,
	          r: rwLast
	        }
	      };
	    }
	    var parse_Ref = parse_RefU;
	    function parse_FtCmo(blob) {
	      blob.l += 4;
	      var ot = blob.read_shift(2);
	      var id = blob.read_shift(2);
	      var flags = blob.read_shift(2);
	      blob.l += 12;
	      return [id, ot, flags];
	    }
	    function parse_FtNts(blob) {
	      var out = {};
	      blob.l += 4;
	      blob.l += 16;
	      out.fSharedNote = blob.read_shift(2);
	      blob.l += 4;
	      return out;
	    }
	    function parse_FtCf(blob) {
	      var out = {};
	      blob.l += 4;
	      blob.cf = blob.read_shift(2);
	      return out;
	    }
	    function parse_FtSkip(blob) {
	      blob.l += 2;
	      blob.l += blob.read_shift(2);
	    }
	    var FtTab = {
	      0: parse_FtSkip,
	      4: parse_FtSkip,
	      5: parse_FtSkip,
	      6: parse_FtSkip,
	      7: parse_FtCf,
	      8: parse_FtSkip,
	      9: parse_FtSkip,
	      10: parse_FtSkip,
	      11: parse_FtSkip,
	      12: parse_FtSkip,
	      13: parse_FtNts,
	      14: parse_FtSkip,
	      15: parse_FtSkip,
	      16: parse_FtSkip,
	      17: parse_FtSkip,
	      18: parse_FtSkip,
	      19: parse_FtSkip,
	      20: parse_FtSkip,
	      21: parse_FtCmo
	    };
	    function parse_FtArray(blob, length) {
	      var tgt = blob.l + length;
	      var fts = [];
	      while (blob.l < tgt) {
	        var ft = blob.read_shift(2);
	        blob.l -= 2;
	        try {
	          fts[ft] = FtTab[ft](blob, tgt - blob.l);
	        } catch (e) {
	          blob.l = tgt;
	          return fts;
	        }
	      }
	      if (blob.l != tgt) blob.l = tgt;
	      return fts;
	    }
	    function parse_BOF(blob, length) {
	      var o = {
	        BIFFVer: 0,
	        dt: 0
	      };
	      o.BIFFVer = blob.read_shift(2);
	      length -= 2;
	      if (length >= 2) {
	        o.dt = blob.read_shift(2);
	        blob.l -= 2;
	      }
	      switch (o.BIFFVer) {
	        case 1536:
	        case 1280:
	        case 1024:
	        case 768:
	        case 512:
	        case 2:
	        case 7:
	          break;
	        default:
	          if (length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
	      }
	      blob.read_shift(length);
	      return o;
	    }
	    function write_BOF(wb, t, o) {
	      var h = 1536, w = 16;
	      switch (o.bookType) {
	        case "biff8":
	          break;
	        case "biff5":
	          h = 1280;
	          w = 8;
	          break;
	        case "biff4":
	          h = 4;
	          w = 6;
	          break;
	        case "biff3":
	          h = 3;
	          w = 6;
	          break;
	        case "biff2":
	          h = 2;
	          w = 4;
	          break;
	        case "xla":
	          break;
	        default:
	          throw new Error("unsupported BIFF version");
	      }
	      var out = new_buf(w);
	      out.write_shift(2, h);
	      out.write_shift(2, t);
	      if (w > 4) out.write_shift(2, 29282);
	      if (w > 6) out.write_shift(2, 1997);
	      if (w > 8) {
	        out.write_shift(2, 49161);
	        out.write_shift(2, 1);
	        out.write_shift(2, 1798);
	        out.write_shift(2, 0);
	      }
	      return out;
	    }
	    function parse_InterfaceHdr(blob, length) {
	      if (length === 0) return 1200;
	      if (blob.read_shift(2) !== 1200) ;
	      return 1200;
	    }
	    function parse_WriteAccess(blob, length, opts) {
	      if (opts.enc) {
	        blob.l += length;
	        return "";
	      }
	      var l = blob.l;
	      var UserName = parse_XLUnicodeString2(blob, 0, opts);
	      blob.read_shift(length + l - blob.l);
	      return UserName;
	    }
	    function write_WriteAccess(s, opts) {
	      var b8 = !opts || opts.biff == 8;
	      var o = new_buf(b8 ? 112 : 54);
	      o.write_shift(opts.biff == 8 ? 2 : 1, 7);
	      if (b8) o.write_shift(1, 0);
	      o.write_shift(4, 859007059);
	      o.write_shift(4, 5458548 | (b8 ? 0 : 536870912));
	      while (o.l < o.length) o.write_shift(1, b8 ? 0 : 32);
	      return o;
	    }
	    function parse_WsBool(blob, length, opts) {
	      var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
	      return {
	        fDialog: flags & 16,
	        fBelow: flags & 64,
	        fRight: flags & 128
	      };
	    }
	    function parse_BoundSheet8(blob, length, opts) {
	      var name = "";
	      if (opts.biff == 4) {
	        name = parse_ShortXLUnicodeString(blob, 0, opts);
	        if (name.length === 0) name = "Sheet1";
	        return {
	          name: name
	        };
	      }
	      var pos = blob.read_shift(4);
	      var hidden = blob.read_shift(1) & 3;
	      var dt = blob.read_shift(1);
	      switch (dt) {
	        case 0:
	          dt = "Worksheet";
	          break;
	        case 1:
	          dt = "Macrosheet";
	          break;
	        case 2:
	          dt = "Chartsheet";
	          break;
	        case 6:
	          dt = "VBAModule";
	          break;
	      }
	      name = parse_ShortXLUnicodeString(blob, 0, opts);
	      if (name.length === 0) name = "Sheet1";
	      return {
	        pos: pos,
	        hs: hidden,
	        dt: dt,
	        name: name
	      };
	    }
	    function write_BoundSheet8(data, opts) {
	      var w = !opts || opts.biff >= 8 ? 2 : 1;
	      var o = new_buf(8 + w * data.name.length);
	      o.write_shift(4, data.pos);
	      o.write_shift(1, data.hs || 0);
	      o.write_shift(1, data.dt);
	      o.write_shift(1, data.name.length);
	      if (opts.biff >= 8) o.write_shift(1, 1);
	      o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
	      var out = o.slice(0, o.l);
	      out.l = o.l;
	      return out;
	    }
	    function parse_SST(blob, length) {
	      var end = blob.l + length;
	      var cnt = blob.read_shift(4);
	      var ucnt = blob.read_shift(4);
	      var strs = [];
	      for (var i = 0; i != ucnt && blob.l < end; ++i) {
	        strs.push(parse_XLUnicodeRichExtendedString(blob));
	      }
	      strs.Count = cnt;
	      strs.Unique = ucnt;
	      return strs;
	    }
	    function write_SST(sst, opts) {
	      var header = new_buf(8);
	      header.write_shift(4, sst.Count);
	      header.write_shift(4, sst.Unique);
	      var strs = [];
	      for (var j = 0; j < sst.length; ++j) strs[j] = write_XLUnicodeRichExtendedString(sst[j]);
	      var o = bconcat([header].concat(strs));
	      o.parts = [header.length].concat(strs.map(function (str) {
	        return str.length;
	      }));
	      return o;
	    }
	    function parse_ExtSST(blob, length) {
	      var extsst = {};
	      extsst.dsst = blob.read_shift(2);
	      blob.l += length - 2;
	      return extsst;
	    }
	    function parse_Row(blob) {
	      var z = {};
	      z.r = blob.read_shift(2);
	      z.c = blob.read_shift(2);
	      z.cnt = blob.read_shift(2) - z.c;
	      var miyRw = blob.read_shift(2);
	      blob.l += 4;
	      var flags = blob.read_shift(1);
	      blob.l += 3;
	      if (flags & 7) z.level = flags & 7;
	      if (flags & 32) z.hidden = true;
	      if (flags & 64) z.hpt = miyRw / 20;
	      return z;
	    }
	    function parse_ForceFullCalculation(blob) {
	      var header = parse_frtHeader(blob);
	      if (header.type != 2211) throw new Error("Invalid Future Record " + header.type);
	      var fullcalc = blob.read_shift(4);
	      return fullcalc !== 0;
	    }
	    function parse_RecalcId(blob) {
	      blob.read_shift(2);
	      return blob.read_shift(4);
	    }
	    function parse_DefaultRowHeight(blob, length, opts) {
	      var f = 0;
	      if (!(opts && opts.biff == 2)) {
	        f = blob.read_shift(2);
	      }
	      var miyRw = blob.read_shift(2);
	      if (opts && opts.biff == 2) {
	        f = 1 - (miyRw >> 15);
	        miyRw &= 32767;
	      }
	      var fl = {
	        Unsynced: f & 1,
	        DyZero: (f & 2) >> 1,
	        ExAsc: (f & 4) >> 2,
	        ExDsc: (f & 8) >> 3
	      };
	      return [fl, miyRw];
	    }
	    function parse_Window1(blob) {
	      var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
	      var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
	      var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
	      return {
	        Pos: [xWn, yWn],
	        Dim: [dxWn, dyWn],
	        Flags: flags,
	        CurTab: iTabCur,
	        FirstTab: iTabFirst,
	        Selected: ctabSel,
	        TabRatio: wTabRatio
	      };
	    }
	    function write_Window1() {
	      var o = new_buf(18);
	      o.write_shift(2, 0);
	      o.write_shift(2, 0);
	      o.write_shift(2, 29280);
	      o.write_shift(2, 17600);
	      o.write_shift(2, 56);
	      o.write_shift(2, 0);
	      o.write_shift(2, 0);
	      o.write_shift(2, 1);
	      o.write_shift(2, 500);
	      return o;
	    }
	    function parse_Window2(blob, length, opts) {
	      if (opts && opts.biff >= 2 && opts.biff < 5) return {};
	      var f = blob.read_shift(2);
	      return {
	        RTL: f & 64
	      };
	    }
	    function write_Window2(view) {
	      var o = new_buf(18), f = 1718;
	      if (view && view.RTL) f |= 64;
	      o.write_shift(2, f);
	      o.write_shift(4, 0);
	      o.write_shift(4, 64);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      return o;
	    }
	    function parse_Pane() {}
	    function parse_Font(blob, length, opts) {
	      var o = {
	        dyHeight: blob.read_shift(2),
	        fl: blob.read_shift(2)
	      };
	      switch (opts && opts.biff || 8) {
	        case 2:
	          break;
	        case 3:
	        case 4:
	          blob.l += 2;
	          break;
	        default:
	          blob.l += 10;
	          break;
	      }
	      o.name = parse_ShortXLUnicodeString(blob, 0, opts);
	      return o;
	    }
	    function write_Font(data, opts) {
	      var name = data.name || "Arial";
	      var b5 = opts && opts.biff == 5, w = b5 ? 15 + name.length : 16 + 2 * name.length;
	      var o = new_buf(w);
	      o.write_shift(2, (data.sz || 12) * 20);
	      o.write_shift(4, 0);
	      o.write_shift(2, 400);
	      o.write_shift(4, 0);
	      o.write_shift(2, 0);
	      o.write_shift(1, name.length);
	      if (!b5) o.write_shift(1, 1);
	      o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
	      return o;
	    }
	    function parse_LabelSst(blob, length, opts) {
	      var cell = parse_XLSCell(blob, length, opts);
	      cell.isst = blob.read_shift(4);
	      return cell;
	    }
	    function write_LabelSst(R, C, v, os) {
	      var o = new_buf(10);
	      write_XLSCell(R, C, os, o);
	      o.write_shift(4, v);
	      return o;
	    }
	    function parse_Label(blob, length, opts) {
	      if (opts.biffguess && opts.biff == 2) opts.biff = 5;
	      var target = blob.l + length;
	      var cell = parse_XLSCell(blob, length, opts);
	      var str = parse_XLUnicodeString(blob, target - blob.l, opts);
	      cell.val = str;
	      return cell;
	    }
	    function write_Label(R, C, v, os, opts) {
	      var b8 = !opts || opts.biff == 8;
	      var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);
	      write_XLSCell(R, C, os, o);
	      o.write_shift(2, v.length);
	      if (b8) o.write_shift(1, 1);
	      o.write_shift((1 + b8) * v.length, v, b8 ? "utf16le" : "sbcs");
	      return o;
	    }
	    function parse_Format(blob, length, opts) {
	      var numFmtId = blob.read_shift(2);
	      var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
	      return [numFmtId, fmtstr];
	    }
	    function write_Format(i, f, opts, o) {
	      var b5 = opts && opts.biff == 5;
	      if (!o) o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);
	      o.write_shift(2, i);
	      o.write_shift(b5 ? 1 : 2, f.length);
	      if (!b5) o.write_shift(1, 1);
	      o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? "sbcs" : "utf16le");
	      var out = o.length > o.l ? o.slice(0, o.l) : o;
	      if (out.l == null) out.l = out.length;
	      return out;
	    }
	    var parse_BIFF2Format = parse_XLUnicodeString2;
	    function write_BIFF2Format(f) {
	      var o = new_buf(1 + f.length);
	      o.write_shift(1, f.length);
	      o.write_shift(f.length, f, "sbcs");
	      return o;
	    }
	    function write_BIFF4Format(f) {
	      var o = new_buf(3 + f.length);
	      o.l += 2;
	      o.write_shift(1, f.length);
	      o.write_shift(f.length, f, "sbcs");
	      return o;
	    }
	    function parse_Dimensions(blob, length, opts) {
	      var end = blob.l + length;
	      var w = opts.biff == 8 || !opts.biff ? 4 : 2;
	      var r = blob.read_shift(w), R = blob.read_shift(w);
	      var c = blob.read_shift(2), C = blob.read_shift(2);
	      blob.l = end;
	      return {
	        s: {
	          r: r,
	          c: c
	        },
	        e: {
	          r: R,
	          c: C
	        }
	      };
	    }
	    function write_Dimensions(range, opts) {
	      var w = opts.biff == 8 || !opts.biff ? 4 : 2;
	      var o = new_buf(2 * w + 6);
	      o.write_shift(w, range.s.r);
	      o.write_shift(w, range.e.r + 1);
	      o.write_shift(2, range.s.c);
	      o.write_shift(2, range.e.c + 1);
	      o.write_shift(2, 0);
	      return o;
	    }
	    function parse_RK(blob) {
	      var rw = blob.read_shift(2), col = blob.read_shift(2);
	      var rkrec = parse_RkRec(blob);
	      return {
	        r: rw,
	        c: col,
	        ixfe: rkrec[0],
	        rknum: rkrec[1]
	      };
	    }
	    function parse_MulRk(blob, length) {
	      var target = blob.l + length - 2;
	      var rw = blob.read_shift(2), col = blob.read_shift(2);
	      var rkrecs = [];
	      while (blob.l < target) rkrecs.push(parse_RkRec(blob));
	      if (blob.l !== target) throw new Error("MulRK read error");
	      var lastcol = blob.read_shift(2);
	      if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
	      return {
	        r: rw,
	        c: col,
	        C: lastcol,
	        rkrec: rkrecs
	      };
	    }
	    function parse_MulBlank(blob, length) {
	      var target = blob.l + length - 2;
	      var rw = blob.read_shift(2), col = blob.read_shift(2);
	      var ixfes = [];
	      while (blob.l < target) ixfes.push(blob.read_shift(2));
	      if (blob.l !== target) throw new Error("MulBlank read error");
	      var lastcol = blob.read_shift(2);
	      if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
	      return {
	        r: rw,
	        c: col,
	        C: lastcol,
	        ixfe: ixfes
	      };
	    }
	    function parse_CellStyleXF(blob, length, style, opts) {
	      var o = {};
	      var a = blob.read_shift(4), b = blob.read_shift(4);
	      var c = blob.read_shift(4), d = blob.read_shift(2);
	      o.patternType = XLSFillPattern[c >> 26];
	      if (!opts.cellStyles) return o;
	      o.alc = a & 7;
	      o.fWrap = a >> 3 & 1;
	      o.alcV = a >> 4 & 7;
	      o.fJustLast = a >> 7 & 1;
	      o.trot = a >> 8 & 255;
	      o.cIndent = a >> 16 & 15;
	      o.fShrinkToFit = a >> 20 & 1;
	      o.iReadOrder = a >> 22 & 2;
	      o.fAtrNum = a >> 26 & 1;
	      o.fAtrFnt = a >> 27 & 1;
	      o.fAtrAlc = a >> 28 & 1;
	      o.fAtrBdr = a >> 29 & 1;
	      o.fAtrPat = a >> 30 & 1;
	      o.fAtrProt = a >> 31 & 1;
	      o.dgLeft = b & 15;
	      o.dgRight = b >> 4 & 15;
	      o.dgTop = b >> 8 & 15;
	      o.dgBottom = b >> 12 & 15;
	      o.icvLeft = b >> 16 & 127;
	      o.icvRight = b >> 23 & 127;
	      o.grbitDiag = b >> 30 & 3;
	      o.icvTop = c & 127;
	      o.icvBottom = c >> 7 & 127;
	      o.icvDiag = c >> 14 & 127;
	      o.dgDiag = c >> 21 & 15;
	      o.icvFore = d & 127;
	      o.icvBack = d >> 7 & 127;
	      o.fsxButton = d >> 14 & 1;
	      return o;
	    }
	    function parse_XF(blob, length, opts) {
	      var o = {};
	      o.ifnt = blob.read_shift(2);
	      o.numFmtId = blob.read_shift(2);
	      o.flags = blob.read_shift(2);
	      o.fStyle = o.flags >> 2 & 1;
	      length -= 6;
	      o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
	      return o;
	    }
	    function write_XF(data, ixfeP, opts, o) {
	      var b5 = opts && opts.biff == 5;
	      if (!o) o = new_buf(b5 ? 16 : 20);
	      o.write_shift(2, 0);
	      if (data.style) {
	        o.write_shift(2, data.numFmtId || 0);
	        o.write_shift(2, 65524);
	      } else {
	        o.write_shift(2, data.numFmtId || 0);
	        o.write_shift(2, ixfeP << 4);
	      }
	      var f = 0;
	      if (data.numFmtId > 0 && b5) f |= 1024;
	      o.write_shift(4, f);
	      o.write_shift(4, 0);
	      if (!b5) o.write_shift(4, 0);
	      o.write_shift(2, 0);
	      return o;
	    }
	    function parse_BIFF2XF(blob) {
	      var o = {};
	      o.ifnt = blob.read_shift(1);
	      blob.l++;
	      o.flags = blob.read_shift(1);
	      o.numFmtId = o.flags & 63;
	      o.flags >>= 6;
	      o.fStyle = 0;
	      o.data = {};
	      return o;
	    }
	    function write_BIFF2XF(xf) {
	      var o = new_buf(4);
	      o.l += 2;
	      o.write_shift(1, xf.numFmtId);
	      o.l++;
	      return o;
	    }
	    function write_BIFF3XF(xf) {
	      var o = new_buf(12);
	      o.l++;
	      o.write_shift(1, xf.numFmtId);
	      o.l += 10;
	      return o;
	    }
	    var write_BIFF4XF = write_BIFF3XF;
	    function parse_BIFF3XF(blob) {
	      var o = {};
	      o.ifnt = blob.read_shift(1);
	      o.numFmtId = blob.read_shift(1);
	      o.flags = blob.read_shift(2);
	      o.fStyle = o.flags >> 2 & 1;
	      o.data = {};
	      return o;
	    }
	    function parse_BIFF4XF(blob) {
	      var o = {};
	      o.ifnt = blob.read_shift(1);
	      o.numFmtId = blob.read_shift(1);
	      o.flags = blob.read_shift(2);
	      o.fStyle = o.flags >> 2 & 1;
	      o.data = {};
	      return o;
	    }
	    function parse_Guts(blob) {
	      blob.l += 4;
	      var out = [blob.read_shift(2), blob.read_shift(2)];
	      if (out[0] !== 0) out[0]--;
	      if (out[1] !== 0) out[1]--;
	      if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
	      return out;
	    }
	    function write_Guts(guts) {
	      var o = new_buf(8);
	      o.write_shift(4, 0);
	      o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
	      o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
	      return o;
	    }
	    function parse_BoolErr(blob, length, opts) {
	      var cell = parse_XLSCell(blob, 6, opts);
	      var val = parse_Bes(blob);
	      cell.val = val;
	      cell.t = val === true || val === false ? "b" : "e";
	      return cell;
	    }
	    function write_BoolErr(R, C, v, os, opts, t) {
	      var o = new_buf(8);
	      write_XLSCell(R, C, os, o);
	      write_Bes(v, t, o);
	      return o;
	    }
	    function parse_Number(blob, length, opts) {
	      if (opts.biffguess && opts.biff == 2) opts.biff = 5;
	      var cell = parse_XLSCell(blob, 6, opts);
	      var xnum = parse_Xnum(blob);
	      cell.val = xnum;
	      return cell;
	    }
	    function write_Number(R, C, v, os) {
	      var o = new_buf(14);
	      write_XLSCell(R, C, os, o);
	      write_Xnum(v, o);
	      return o;
	    }
	    var parse_XLHeaderFooter = parse_OptXLUnicodeString;
	    function parse_SupBook(blob, length, opts) {
	      var end = blob.l + length;
	      var ctab = blob.read_shift(2);
	      var cch = blob.read_shift(2);
	      opts.sbcch = cch;
	      if (cch == 1025 || cch == 14849) return [cch, ctab];
	      if (cch < 1 || cch > 255) throw new Error("Unexpected SupBook type: " + cch);
	      var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
	      var rgst = [];
	      while (end > blob.l) rgst.push(parse_XLUnicodeString(blob));
	      return [cch, ctab, virtPath, rgst];
	    }
	    function parse_ExternName(blob, length, opts) {
	      var flags = blob.read_shift(2);
	      var body;
	      var o = {
	        fBuiltIn: flags & 1,
	        fWantAdvise: flags >>> 1 & 1,
	        fWantPict: flags >>> 2 & 1,
	        fOle: flags >>> 3 & 1,
	        fOleLink: flags >>> 4 & 1,
	        cf: flags >>> 5 & 1023,
	        fIcon: flags >>> 15 & 1
	      };
	      if (opts.sbcch === 14849) body = parse_AddinUdf(blob, length - 2, opts);
	      o.body = body || blob.read_shift(length - 2);
	      if (typeof body === "string") o.Name = body;
	      return o;
	    }
	    function parse_Lbl(blob, length, opts) {
	      var target = blob.l + length;
	      var flags = blob.read_shift(2);
	      var chKey = blob.read_shift(1);
	      var cch = blob.read_shift(1);
	      var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
	      var itab = 0;
	      if (!opts || opts.biff >= 5) {
	        if (opts.biff != 5) blob.l += 2;
	        itab = blob.read_shift(2);
	        if (opts.biff == 5) blob.l += 2;
	        blob.l += 4;
	      }
	      var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
	      if (flags & 32) name = XLSLblBuiltIn[name.charCodeAt(0)];
	      var npflen = target - blob.l;
	      if (opts && opts.biff == 2) --npflen;
	      var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
	      return {
	        chKey: chKey,
	        Name: name,
	        itab: itab,
	        rgce: rgce
	      };
	    }
	    function parse_ExternSheet(blob, length, opts) {
	      if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
	      if (!(opts.biff > 8) && length == blob[blob.l] + (blob[blob.l + 1] == 3 ? 1 : 0) + 1) return parse_BIFF5ExternSheet(blob, length, opts);
	      var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
	      while (len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
	      if (blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
	      return o;
	    }
	    function parse_BIFF5ExternSheet(blob, length, opts) {
	      if (blob[blob.l + 1] == 3) blob[blob.l]++;
	      var o = parse_ShortXLUnicodeString(blob, length, opts);
	      return o.charCodeAt(0) == 3 ? o.slice(1) : o;
	    }
	    function parse_NameCmt(blob, length, opts) {
	      if (opts.biff < 8) {
	        blob.l += length;
	        return;
	      }
	      var cchName = blob.read_shift(2);
	      var cchComment = blob.read_shift(2);
	      var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
	      var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
	      return [name, comment];
	    }
	    function parse_ShrFmla(blob, length, opts) {
	      var ref = parse_RefU(blob);
	      blob.l++;
	      var cUse = blob.read_shift(1);
	      length -= 8;
	      return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
	    }
	    function parse_Array(blob, length, opts) {
	      var ref = parse_Ref(blob);
	      switch (opts.biff) {
	        case 2:
	          blob.l++;
	          length -= 7;
	          break;
	        case 3:
	        case 4:
	          blob.l += 2;
	          length -= 8;
	          break;
	        default:
	          blob.l += 6;
	          length -= 12;
	      }
	      return [ref, parse_ArrayParsedFormula(blob, length, opts)];
	    }
	    function parse_MTRSettings(blob) {
	      var fMTREnabled = blob.read_shift(4) !== 0;
	      var fUserSetThreadCount = blob.read_shift(4) !== 0;
	      var cUserThreadCount = blob.read_shift(4);
	      return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
	    }
	    function parse_NoteSh(blob, length, opts) {
	      var row = blob.read_shift(2), col = blob.read_shift(2);
	      var flags = blob.read_shift(2), idObj = blob.read_shift(2);
	      var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
	      return [{
	        r: row,
	        c: col
	      }, stAuthor, idObj, flags];
	    }
	    function parse_Note(blob, length, opts) {
	      if (opts && opts.biff < 8) {
	        var row = blob.read_shift(2), col = blob.read_shift(2);
	        if (row == 65535 || row == -1) return;
	        var cch = blob.read_shift(2);
	        var cmnt = blob.read_shift(Math.min(cch, 2048), "cpstr");
	        return [{
	          r: row,
	          c: col
	        }, cmnt];
	      }
	      return parse_NoteSh(blob, length, opts);
	    }
	    function write_NOTE_BIFF2(text, R, C, len) {
	      var o = new_buf(6 + (len || text.length));
	      o.write_shift(2, R);
	      o.write_shift(2, C);
	      o.write_shift(2, len || text.length);
	      o.write_shift(text.length, text, "sbcs");
	      return o;
	    }
	    function parse_MergeCells(blob, length) {
	      var merges = [];
	      var cmcs = blob.read_shift(2);
	      while (cmcs--) merges.push(parse_Ref8U(blob));
	      return merges;
	    }
	    function write_MergeCells(merges) {
	      var o = new_buf(2 + merges.length * 8);
	      o.write_shift(2, merges.length);
	      for (var i = 0; i < merges.length; ++i) write_Ref8U(merges[i], o);
	      return o;
	    }
	    function parse_Obj(blob, length, opts) {
	      if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
	      var cmo = parse_FtCmo(blob);
	      var fts = parse_FtArray(blob, length - 22, cmo[1]);
	      return {
	        cmo: cmo,
	        ft: fts
	      };
	    }
	    var parse_BIFF5OT = {
	      8: function (blob, length) {
	        var tgt = blob.l + length;
	        blob.l += 10;
	        var cf = blob.read_shift(2);
	        blob.l += 4;
	        blob.l += 2;
	        blob.l += 2;
	        blob.l += 2;
	        blob.l += 4;
	        var cchName = blob.read_shift(1);
	        blob.l += cchName;
	        blob.l = tgt;
	        return {
	          fmt: cf
	        };
	      }
	    };
	    function parse_BIFF5Obj(blob, length, opts) {
	      blob.l += 4;
	      var ot = blob.read_shift(2);
	      var id = blob.read_shift(2);
	      var grbit = blob.read_shift(2);
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 2;
	      blob.l += 6;
	      length -= 36;
	      var fts = [];
	      fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
	      return {
	        cmo: [id, ot, grbit],
	        ft: fts
	      };
	    }
	    function parse_TxO(blob, length, opts) {
	      var s = blob.l;
	      var texts = "";
	      try {
	        blob.l += 4;
	        var ot = (opts.lastobj || ({
	          cmo: [0, 0]
	        })).cmo[1];
	        var controlInfo;
	        if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob.l += 6; else controlInfo = parse_ControlInfo(blob, 6, opts);
	        var cchText = blob.read_shift(2);
	        blob.read_shift(2);
	        parseuint16(blob, 2);
	        var len = blob.read_shift(2);
	        blob.l += len;
	        for (var i = 1; i < blob.lens.length - 1; ++i) {
	          if (blob.l - s != blob.lens[i]) throw new Error("TxO: bad continue record");
	          var hdr = blob[blob.l];
	          var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);
	          texts += t;
	          if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
	        }
	        if (texts.length !== cchText && texts.length !== cchText * 2) {
	          throw new Error("cchText: " + cchText + " != " + texts.length);
	        }
	        blob.l = s + length;
	        return {
	          t: texts
	        };
	      } catch (e) {
	        blob.l = s + length;
	        return {
	          t: texts
	        };
	      }
	    }
	    function parse_HLink(blob, length) {
	      var ref = parse_Ref8U(blob);
	      blob.l += 16;
	      var hlink = parse_Hyperlink(blob, length - 24);
	      return [ref, hlink];
	    }
	    function write_HLink(hl) {
	      var O = new_buf(24);
	      var ref = decode_cell(hl[0]);
	      O.write_shift(2, ref.r);
	      O.write_shift(2, ref.r);
	      O.write_shift(2, ref.c);
	      O.write_shift(2, ref.c);
	      var clsid = ("d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b").split(" ");
	      for (var i = 0; i < 16; ++i) O.write_shift(1, parseInt(clsid[i], 16));
	      return bconcat([O, write_Hyperlink(hl[1])]);
	    }
	    function parse_HLinkTooltip(blob, length) {
	      blob.read_shift(2);
	      var ref = parse_Ref8U(blob);
	      var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
	      wzTooltip = wzTooltip.replace(chr0, "");
	      return [ref, wzTooltip];
	    }
	    function write_HLinkTooltip(hl) {
	      var TT = hl[1].Tooltip;
	      var O = new_buf(10 + 2 * (TT.length + 1));
	      O.write_shift(2, 2048);
	      var ref = decode_cell(hl[0]);
	      O.write_shift(2, ref.r);
	      O.write_shift(2, ref.r);
	      O.write_shift(2, ref.c);
	      O.write_shift(2, ref.c);
	      for (var i = 0; i < TT.length; ++i) O.write_shift(2, TT.charCodeAt(i));
	      O.write_shift(2, 0);
	      return O;
	    }
	    function parse_Country(blob) {
	      var o = [0, 0], d;
	      d = blob.read_shift(2);
	      o[0] = CountryEnum[d] || d;
	      d = blob.read_shift(2);
	      o[1] = CountryEnum[d] || d;
	      return o;
	    }
	    function write_Country(o) {
	      if (!o) o = new_buf(4);
	      o.write_shift(2, 1);
	      o.write_shift(2, 1);
	      return o;
	    }
	    function parse_ClrtClient(blob) {
	      var ccv = blob.read_shift(2);
	      var o = [];
	      while (ccv-- > 0) o.push(parse_LongRGB(blob));
	      return o;
	    }
	    function parse_Palette(blob) {
	      var ccv = blob.read_shift(2);
	      var o = [];
	      while (ccv-- > 0) o.push(parse_LongRGB(blob));
	      return o;
	    }
	    function parse_XFCRC(blob) {
	      blob.l += 2;
	      var o = {
	        cxfs: 0,
	        crc: 0
	      };
	      o.cxfs = blob.read_shift(2);
	      o.crc = blob.read_shift(4);
	      return o;
	    }
	    function parse_ColInfo(blob, length, opts) {
	      if (!opts.cellStyles) return parsenoop(blob, length);
	      var w = opts && opts.biff >= 12 ? 4 : 2;
	      var colFirst = blob.read_shift(w);
	      var colLast = blob.read_shift(w);
	      var coldx = blob.read_shift(w);
	      var ixfe = blob.read_shift(w);
	      var flags = blob.read_shift(2);
	      if (w == 2) blob.l += 2;
	      var o = {
	        s: colFirst,
	        e: colLast,
	        w: coldx,
	        ixfe: ixfe,
	        flags: flags
	      };
	      if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 7;
	      return o;
	    }
	    function write_ColInfo(col, idx) {
	      var o = new_buf(12);
	      o.write_shift(2, idx);
	      o.write_shift(2, idx);
	      o.write_shift(2, col.width * 256);
	      o.write_shift(2, 0);
	      var f = 0;
	      if (col.hidden) f |= 1;
	      o.write_shift(1, f);
	      f = col.level || 0;
	      o.write_shift(1, f);
	      o.write_shift(2, 0);
	      return o;
	    }
	    function parse_Setup(blob, length) {
	      var o = {};
	      if (length < 32) return o;
	      blob.l += 16;
	      o.header = parse_Xnum(blob);
	      o.footer = parse_Xnum(blob);
	      blob.l += 2;
	      return o;
	    }
	    function parse_ShtProps(blob, length, opts) {
	      var def = {
	        area: false
	      };
	      if (opts.biff != 5) {
	        blob.l += length;
	        return def;
	      }
	      var d = blob.read_shift(1);
	      blob.l += 3;
	      if (d & 16) def.area = true;
	      return def;
	    }
	    function write_RRTabId(n) {
	      var out = new_buf(2 * n);
	      for (var i = 0; i < n; ++i) out.write_shift(2, i + 1);
	      return out;
	    }
	    var parse_Blank = parse_XLSCell;
	    var parse_Scl = parseuint16a;
	    var parse_String = parse_XLUnicodeString;
	    function parse_ImData(blob) {
	      var cf = blob.read_shift(2);
	      var env = blob.read_shift(2);
	      var lcb = blob.read_shift(4);
	      var o = {
	        fmt: cf,
	        env: env,
	        len: lcb,
	        data: blob.slice(blob.l, blob.l + lcb)
	      };
	      blob.l += lcb;
	      return o;
	    }
	    function write_BIFF2Cell(out, r, c, ixfe, ifmt) {
	      if (!out) out = new_buf(7);
	      out.write_shift(2, r);
	      out.write_shift(2, c);
	      out.write_shift(1, ixfe || 0);
	      out.write_shift(1, ifmt || 0);
	      out.write_shift(1, 0);
	      return out;
	    }
	    function parse_BIFF2STR(blob, length, opts) {
	      if (opts.biffguess && opts.biff == 5) opts.biff = 2;
	      var cell = parse_XLSCell(blob, 7, opts);
	      var str = parse_XLUnicodeString2(blob, length - 7, opts);
	      cell.t = "str";
	      cell.val = str;
	      return cell;
	    }
	    function parse_BIFF2NUM(blob, length, opts) {
	      var cell = parse_XLSCell(blob, 7, opts);
	      var num = parse_Xnum(blob);
	      cell.t = "n";
	      cell.val = num;
	      return cell;
	    }
	    function write_BIFF2NUM(r, c, val, ixfe, ifmt) {
	      var out = new_buf(15);
	      write_BIFF2Cell(out, r, c, ixfe || 0, ifmt || 0);
	      out.write_shift(8, val, "f");
	      return out;
	    }
	    function parse_BIFF2INT(blob, length, opts) {
	      var cell = parse_XLSCell(blob, 7, opts);
	      var num = blob.read_shift(2);
	      cell.t = "n";
	      cell.val = num;
	      return cell;
	    }
	    function write_BIFF2INT(r, c, val, ixfe, ifmt) {
	      var out = new_buf(9);
	      write_BIFF2Cell(out, r, c, ixfe || 0, ifmt || 0);
	      out.write_shift(2, val);
	      return out;
	    }
	    function parse_BIFF2STRING(blob) {
	      var cch = blob.read_shift(1);
	      if (cch === 0) {
	        blob.l++;
	        return "";
	      }
	      return blob.read_shift(cch, "sbcs-cont");
	    }
	    function parse_BIFF2BOOLERR(blob, length, opts) {
	      var bestart = blob.l + 7;
	      var cell = parse_XLSCell(blob, 6, opts);
	      blob.l = bestart;
	      var val = parse_Bes(blob);
	      cell.val = val;
	      cell.t = val === true || val === false ? "b" : "e";
	      return cell;
	    }
	    function parse_BIFF2FONTXTRA(blob, length) {
	      blob.l += 6;
	      blob.l += 2;
	      blob.l += 1;
	      blob.l += 3;
	      blob.l += 1;
	      blob.l += length - 13;
	    }
	    function parse_RString(blob, length, opts) {
	      var end = blob.l + length;
	      var cell = parse_XLSCell(blob, 6, opts);
	      var cch = blob.read_shift(2);
	      var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
	      blob.l = end;
	      cell.t = "str";
	      cell.val = str;
	      return cell;
	    }
	    function parse_BIFF4SheetInfo(blob) {
	      var flags = blob.read_shift(4);
	      var cch = blob.read_shift(1), name = blob.read_shift(cch, "sbcs");
	      if (name.length === 0) name = "Sheet1";
	      return {
	        flags: flags,
	        name: name
	      };
	    }
	    var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
	    var DBF = (function () {
	      var dbf_codepage_map = {
	        1: 437,
	        2: 850,
	        3: 1252,
	        4: 10000,
	        100: 852,
	        101: 866,
	        102: 865,
	        103: 861,
	        104: 895,
	        105: 620,
	        106: 737,
	        107: 857,
	        120: 950,
	        121: 949,
	        122: 936,
	        123: 932,
	        124: 874,
	        125: 1255,
	        126: 1256,
	        150: 10007,
	        151: 10029,
	        152: 10006,
	        200: 1250,
	        201: 1251,
	        202: 1254,
	        203: 1253,
	        0: 20127,
	        8: 865,
	        9: 437,
	        10: 850,
	        11: 437,
	        13: 437,
	        14: 850,
	        15: 437,
	        16: 850,
	        17: 437,
	        18: 850,
	        19: 932,
	        20: 850,
	        21: 437,
	        22: 850,
	        23: 865,
	        24: 437,
	        25: 437,
	        26: 850,
	        27: 437,
	        28: 863,
	        29: 850,
	        31: 852,
	        34: 852,
	        35: 852,
	        36: 860,
	        37: 850,
	        38: 866,
	        55: 850,
	        64: 852,
	        77: 936,
	        78: 949,
	        79: 950,
	        80: 874,
	        87: 1252,
	        88: 1252,
	        89: 1252,
	        108: 863,
	        134: 737,
	        135: 852,
	        136: 857,
	        204: 1257,
	        255: 16969
	      };
	      var dbf_reverse_map = evert({
	        1: 437,
	        2: 850,
	        3: 1252,
	        4: 10000,
	        100: 852,
	        101: 866,
	        102: 865,
	        103: 861,
	        104: 895,
	        105: 620,
	        106: 737,
	        107: 857,
	        120: 950,
	        121: 949,
	        122: 936,
	        123: 932,
	        124: 874,
	        125: 1255,
	        126: 1256,
	        150: 10007,
	        151: 10029,
	        152: 10006,
	        200: 1250,
	        201: 1251,
	        202: 1254,
	        203: 1253,
	        0: 20127
	      });
	      function dbf_to_aoa(buf, opts) {
	        var out = [];
	        var d = new_raw_buf(1);
	        switch (opts.type) {
	          case "base64":
	            d = s2a(Base64_decode(buf));
	            break;
	          case "binary":
	            d = s2a(buf);
	            break;
	          case "buffer":
	          case "array":
	            d = buf;
	            break;
	        }
	        prep_blob(d, 0);
	        var ft = d.read_shift(1);
	        var memo = !!(ft & 136);
	        var vfp = false, l7 = false;
	        switch (ft) {
	          case 2:
	            break;
	          case 3:
	            break;
	          case 48:
	            vfp = true;
	            memo = true;
	            break;
	          case 49:
	            vfp = true;
	            memo = true;
	            break;
	          case 131:
	            break;
	          case 139:
	            break;
	          case 140:
	            l7 = true;
	            break;
	          case 245:
	            break;
	          default:
	            throw new Error("DBF Unsupported Version: " + ft.toString(16));
	        }
	        var nrow = 0, fpos = 521;
	        if (ft == 2) nrow = d.read_shift(2);
	        d.l += 3;
	        if (ft != 2) nrow = d.read_shift(4);
	        if (nrow > 1048576) nrow = 1000000;
	        if (ft != 2) fpos = d.read_shift(2);
	        var rlen = d.read_shift(2);
	        var current_cp = opts.codepage || 1252;
	        if (ft != 2) {
	          d.l += 16;
	          d.read_shift(1);
	          if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
	          d.l += 1;
	          d.l += 2;
	        }
	        if (l7) d.l += 36;
	        var fields = [], field = {};
	        var hend = Math.min(d.length, ft == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
	        var ww = l7 ? 32 : 11;
	        while (d.l < hend && d[d.l] != 13) {
	          field = {};
	          field.name = (typeof $cptable !== "undefined" ? $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)) : a2s(d.slice(d.l, d.l + ww))).replace(/[\u0000\r\n].*$/g, "");
	          d.l += ww;
	          field.type = String.fromCharCode(d.read_shift(1));
	          if (ft != 2 && !l7) field.offset = d.read_shift(4);
	          field.len = d.read_shift(1);
	          if (ft == 2) field.offset = d.read_shift(2);
	          field.dec = d.read_shift(1);
	          if (field.name.length) fields.push(field);
	          if (ft != 2) d.l += l7 ? 13 : 14;
	          switch (field.type) {
	            case "B":
	              if ((!vfp || field.len != 8) && opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
	              break;
	            case "G":
	            case "P":
	              if (opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
	              break;
	            case "+":
	            case "0":
	            case "@":
	            case "C":
	            case "D":
	            case "F":
	            case "I":
	            case "L":
	            case "M":
	            case "N":
	            case "O":
	            case "T":
	            case "Y":
	              break;
	            default:
	              throw new Error("Unknown Field Type: " + field.type);
	          }
	        }
	        if (d[d.l] !== 13) d.l = fpos - 1;
	        if (d.read_shift(1) !== 13) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
	        d.l = fpos;
	        var R = 0, C = 0;
	        out[0] = [];
	        for (C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
	        while (nrow-- > 0) {
	          if (d[d.l] === 42) {
	            d.l += rlen;
	            continue;
	          }
	          ++d.l;
	          out[++R] = [];
	          C = 0;
	          for (C = 0; C != fields.length; ++C) {
	            var dd = d.slice(d.l, d.l + fields[C].len);
	            d.l += fields[C].len;
	            prep_blob(dd, 0);
	            var s = typeof $cptable !== "undefined" ? $cptable.utils.decode(current_cp, dd) : a2s(dd);
	            switch (fields[C].type) {
	              case "C":
	                if (s.trim().length) out[R][C] = s.replace(/\s+$/, "");
	                break;
	              case "D":
	                if (s.length === 8) {
	                  out[R][C] = new Date(Date.UTC(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8), 0, 0, 0, 0));
	                  if (!(opts && opts.UTC)) {
	                    out[R][C] = utc_to_local(out[R][C]);
	                  }
	                } else out[R][C] = s;
	                break;
	              case "F":
	                out[R][C] = parseFloat(s.trim());
	                break;
	              case "+":
	              case "I":
	                out[R][C] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
	                break;
	              case "L":
	                switch (s.trim().toUpperCase()) {
	                  case "Y":
	                  case "T":
	                    out[R][C] = true;
	                    break;
	                  case "N":
	                  case "F":
	                    out[R][C] = false;
	                    break;
	                  case "":
	                  case "?":
	                    break;
	                  default:
	                    throw new Error("DBF Unrecognized L:|" + s + "|");
	                }
	                break;
	              case "M":
	                if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
	                out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
	                break;
	              case "N":
	                s = s.replace(/\u0000/g, "").trim();
	                if (s && s != ".") out[R][C] = +s || 0;
	                break;
	              case "@":
	                out[R][C] = new Date(dd.read_shift(-8, "f") - 62135683200000);
	                break;
	              case "T":
	                {
	                  var hi = dd.read_shift(4), lo = dd.read_shift(4);
	                  if (hi == 0 && lo == 0) break;
	                  out[R][C] = new Date((hi - 2440588) * 86400000 + lo);
	                  if (!(opts && opts.UTC)) out[R][C] = utc_to_local(out[R][C]);
	                }
	                break;
	              case "Y":
	                out[R][C] = dd.read_shift(4, "i") / 10000 + dd.read_shift(4, "i") / 10000 * Math.pow(2, 32);
	                break;
	              case "O":
	                out[R][C] = -dd.read_shift(-8, "f");
	                break;
	              case "B":
	                if (vfp && fields[C].len == 8) {
	                  out[R][C] = dd.read_shift(8, "f");
	                  break;
	                }
	              case "G":
	              case "P":
	                dd.l += fields[C].len;
	                break;
	              case "0":
	                if (fields[C].name === "_NullFlags") break;
	              default:
	                throw new Error("DBF Unsupported data type " + fields[C].type);
	            }
	          }
	        }
	        if (ft != 2) if (d.l < d.length && d[d.l++] != 26) throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
	        if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
	        opts.DBF = fields;
	        return out;
	      }
	      function dbf_to_sheet(buf, opts) {
	        var o = opts || ({});
	        if (!o.dateNF) o.dateNF = "yyyymmdd";
	        var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
	        ws["!cols"] = o.DBF.map(function (field) {
	          return {
	            wch: field.len,
	            DBF: field
	          };
	        });
	        delete o.DBF;
	        return ws;
	      }
	      function dbf_to_workbook(buf, opts) {
	        try {
	          var o = sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
	          o.bookType = "dbf";
	          return o;
	        } catch (e) {
	          if (opts && opts.WTF) throw e;
	        }
	        return {
	          SheetNames: [],
	          Sheets: {}
	        };
	      }
	      var _RLEN = {
	        "B": 8,
	        "C": 250,
	        "L": 1,
	        "D": 8,
	        "?": 0,
	        "": 0
	      };
	      function sheet_to_dbf(ws, opts) {
	        var o = opts || ({});
	        var old_cp = current_codepage;
	        if (+o.codepage >= 0) set_cp(+o.codepage);
	        if (o.type == "string") throw new Error("Cannot write DBF to JS string");
	        var ba = buf_array();
	        var aoa = sheet_to_json(ws, {
	          header: 1,
	          raw: true,
	          cellDates: true
	        });
	        var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
	        var i = 0, j = 0, hcnt = 0, rlen = 1;
	        for (i = 0; i < headers.length; ++i) {
	          if (((cols[i] || ({})).DBF || ({})).name) {
	            headers[i] = cols[i].DBF.name;
	            ++hcnt;
	            continue;
	          }
	          if (headers[i] == null) continue;
	          ++hcnt;
	          if (typeof headers[i] === "number") headers[i] = headers[i].toString(10);
	          if (typeof headers[i] !== "string") throw new Error("DBF Invalid column name " + headers[i] + " |" + typeof headers[i] + "|");
	          if (headers.indexOf(headers[i]) !== i) for (j = 0; j < 1024; ++j) if (headers.indexOf(headers[i] + "_" + j) == -1) {
	            headers[i] += "_" + j;
	            break;
	          }
	        }
	        var range = safe_decode_range(ws["!ref"]);
	        var coltypes = [];
	        var colwidths = [];
	        var coldecimals = [];
	        for (i = 0; i <= range.e.c - range.s.c; ++i) {
	          var guess = "", _guess = "", maxlen = 0;
	          var col = [];
	          for (j = 0; j < data.length; ++j) {
	            if (data[j][i] != null) col.push(data[j][i]);
	          }
	          if (col.length == 0 || headers[i] == null) {
	            coltypes[i] = "?";
	            continue;
	          }
	          for (j = 0; j < col.length; ++j) {
	            switch (typeof col[j]) {
	              case "number":
	                _guess = "B";
	                break;
	              case "string":
	                _guess = "C";
	                break;
	              case "boolean":
	                _guess = "L";
	                break;
	              case "object":
	                _guess = col[j] instanceof Date ? "D" : "C";
	                break;
	              default:
	                _guess = "C";
	            }
	            maxlen = Math.max(maxlen, (typeof $cptable !== "undefined" && typeof col[j] == "string" ? $cptable.utils.encode(current_ansi, col[j]) : String(col[j])).length);
	            guess = guess && guess != _guess ? "C" : _guess;
	          }
	          if (maxlen > 250) maxlen = 250;
	          _guess = ((cols[i] || ({})).DBF || ({})).type;
	          if (_guess == "C") {
	            if (cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
	          }
	          if (guess == "B" && _guess == "N") {
	            guess = "N";
	            coldecimals[i] = cols[i].DBF.dec;
	            maxlen = cols[i].DBF.len;
	          }
	          colwidths[i] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
	          rlen += colwidths[i];
	          coltypes[i] = guess;
	        }
	        var h = ba.next(32);
	        h.write_shift(4, 318902576);
	        h.write_shift(4, data.length);
	        h.write_shift(2, 296 + 32 * hcnt);
	        h.write_shift(2, rlen);
	        for (i = 0; i < 4; ++i) h.write_shift(4, 0);
	        var cp = +dbf_reverse_map[current_codepage] || 3;
	        h.write_shift(4, 0 | cp << 8);
	        if (dbf_codepage_map[cp] != +o.codepage) {
	          if (o.codepage) console.error("DBF Unsupported codepage " + current_codepage + ", using 1252");
	          current_codepage = 1252;
	        }
	        for ((i = 0, j = 0); i < headers.length; ++i) {
	          if (headers[i] == null) continue;
	          var hf = ba.next(32);
	          var _f = (headers[i].slice(-10) + "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000").slice(0, 11);
	          hf.write_shift(1, _f, "sbcs");
	          hf.write_shift(1, coltypes[i] == "?" ? "C" : coltypes[i], "sbcs");
	          hf.write_shift(4, j);
	          hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
	          hf.write_shift(1, coldecimals[i] || 0);
	          hf.write_shift(1, 2);
	          hf.write_shift(4, 0);
	          hf.write_shift(1, 0);
	          hf.write_shift(4, 0);
	          hf.write_shift(4, 0);
	          j += colwidths[i] || _RLEN[coltypes[i]] || 0;
	        }
	        var hb = ba.next(264);
	        hb.write_shift(4, 13);
	        for (i = 0; i < 65; ++i) hb.write_shift(4, 0);
	        for (i = 0; i < data.length; ++i) {
	          var rout = ba.next(rlen);
	          rout.write_shift(1, 0);
	          for (j = 0; j < headers.length; ++j) {
	            if (headers[j] == null) continue;
	            switch (coltypes[j]) {
	              case "L":
	                rout.write_shift(1, data[i][j] == null ? 63 : data[i][j] ? 84 : 70);
	                break;
	              case "B":
	                rout.write_shift(8, data[i][j] || 0, "f");
	                break;
	              case "N":
	                var _n = "0";
	                if (typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j] || 0);
	                if (_n.length > colwidths[j]) _n = _n.slice(0, colwidths[j]);
	                for (hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt) rout.write_shift(1, 32);
	                rout.write_shift(1, _n, "sbcs");
	                break;
	              case "D":
	                if (!data[i][j]) rout.write_shift(8, "00000000", "sbcs"); else {
	                  rout.write_shift(4, ("0000" + data[i][j].getFullYear()).slice(-4), "sbcs");
	                  rout.write_shift(2, ("00" + (data[i][j].getMonth() + 1)).slice(-2), "sbcs");
	                  rout.write_shift(2, ("00" + data[i][j].getDate()).slice(-2), "sbcs");
	                }
	                break;
	              case "C":
	                var _l = rout.l;
	                var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
	                rout.write_shift(1, _s, "cpstr");
	                _l += colwidths[j] - rout.l;
	                for (hcnt = 0; hcnt < _l; ++hcnt) rout.write_shift(1, 32);
	                break;
	            }
	          }
	        }
	        current_codepage = old_cp;
	        ba.next(1).write_shift(1, 26);
	        return ba.end();
	      }
	      return {
	        to_workbook: dbf_to_workbook,
	        to_sheet: dbf_to_sheet,
	        from_sheet: sheet_to_dbf
	      };
	    })();
	    var SYLK = (function () {
	      var sylk_escapes = {
	        AA: "À",
	        BA: "Á",
	        CA: "Â",
	        DA: 195,
	        HA: "Ä",
	        JA: 197,
	        AE: "È",
	        BE: "É",
	        CE: "Ê",
	        HE: "Ë",
	        AI: "Ì",
	        BI: "Í",
	        CI: "Î",
	        HI: "Ï",
	        AO: "Ò",
	        BO: "Ó",
	        CO: "Ô",
	        DO: 213,
	        HO: "Ö",
	        AU: "Ù",
	        BU: "Ú",
	        CU: "Û",
	        HU: "Ü",
	        Aa: "à",
	        Ba: "á",
	        Ca: "â",
	        Da: 227,
	        Ha: "ä",
	        Ja: 229,
	        Ae: "è",
	        Be: "é",
	        Ce: "ê",
	        He: "ë",
	        Ai: "ì",
	        Bi: "í",
	        Ci: "î",
	        Hi: "ï",
	        Ao: "ò",
	        Bo: "ó",
	        Co: "ô",
	        Do: 245,
	        Ho: "ö",
	        Au: "ù",
	        Bu: "ú",
	        Cu: "û",
	        Hu: "ü",
	        KC: "Ç",
	        Kc: "ç",
	        q: "æ",
	        z: "œ",
	        a: "Æ",
	        j: "Œ",
	        DN: 209,
	        Dn: 241,
	        Hy: 255,
	        S: 169,
	        c: 170,
	        R: 174,
	        "B ": 180,
	        0: 176,
	        1: 177,
	        2: 178,
	        3: 179,
	        5: 181,
	        6: 182,
	        7: 183,
	        Q: 185,
	        k: 186,
	        b: 208,
	        i: 216,
	        l: 222,
	        s: 240,
	        y: 248,
	        "!": 161,
	        "\"": 162,
	        "#": 163,
	        "(": 164,
	        "%": 165,
	        "'": 167,
	        "H ": 168,
	        "+": 171,
	        ";": 187,
	        "<": 188,
	        "=": 189,
	        ">": 190,
	        "?": 191,
	        "{": 223
	      };
	      var sylk_char_regex = new RegExp("\u001bN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
	      var sylk_char_fn = function (_, $1) {
	        var o = sylk_escapes[$1];
	        return typeof o == "number" ? _getansi(o) : o;
	      };
	      var decode_sylk_char = function ($$, $1, $2) {
	        var newcc = $1.charCodeAt(0) - 32 << 4 | $2.charCodeAt(0) - 48;
	        return newcc == 59 ? $$ : _getansi(newcc);
	      };
	      sylk_escapes["|"] = 254;
	      var encode_sylk_str = function ($$) {
	        return $$.replace(/\n/g, "\u001b :").replace(/\r/g, "\u001b =");
	      };
	      function sylk_to_aoa(d, opts) {
	        switch (opts.type) {
	          case "base64":
	            return sylk_to_aoa_str(Base64_decode(d), opts);
	          case "binary":
	            return sylk_to_aoa_str(d, opts);
	          case "buffer":
	            return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
	          case "array":
	            return sylk_to_aoa_str(cc2str(d), opts);
	        }
	        throw new Error("Unrecognized type " + opts.type);
	      }
	      function sylk_to_aoa_str(str, opts) {
	        var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];
	        var formats = [];
	        var next_cell_format = null;
	        var sht = {}, rowinfo = [], colinfo = [], cw = [];
	        var Mval = 0, j;
	        var wb = {
	          Workbook: {
	            WBProps: {},
	            Names: []
	          }
	        };
	        if (+opts.codepage >= 0) set_cp(+opts.codepage);
	        for (; ri !== records.length; ++ri) {
	          Mval = 0;
	          var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
	          var record = rstr.replace(/;;/g, "\u0000").split(";").map(function (x) {
	            return x.replace(/\u0000/g, ";");
	          });
	          var RT = record[0], val;
	          if (rstr.length > 0) switch (RT) {
	            case "ID":
	              break;
	            case "E":
	              break;
	            case "B":
	              break;
	            case "O":
	              for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
	                case "V":
	                  {
	                    var d1904 = parseInt(record[rj].slice(1), 10);
	                    if (d1904 >= 1 && d1904 <= 4) wb.Workbook.WBProps.date1904 = true;
	                  }
	                  break;
	              }
	              break;
	            case "W":
	              break;
	            case "P":
	              switch (record[1].charAt(0)) {
	                case "P":
	                  formats.push(rstr.slice(3).replace(/;;/g, ";"));
	                  break;
	              }
	              break;
	            case "NN":
	              {
	                var nn = {
	                  Sheet: 0
	                };
	                for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
	                  case "N":
	                    nn.Name = record[rj].slice(1);
	                    break;
	                  case "E":
	                    nn.Ref = (opts && opts.sheet || "Sheet1") + "!" + rc_to_a1(record[rj].slice(1));
	                    break;
	                }
	                wb.Workbook.Names.push(nn);
	              }
	              break;
	            case "C":
	              var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1, formula = "", cell_t = "z";
	              var cmnt = "";
	              for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
	                case "A":
	                  cmnt = record[rj].slice(1);
	                  break;
	                case "X":
	                  C = parseInt(record[rj].slice(1), 10) - 1;
	                  C_seen_X = true;
	                  break;
	                case "Y":
	                  R = parseInt(record[rj].slice(1), 10) - 1;
	                  if (!C_seen_X) C = 0;
	                  for (j = arr.length; j <= R; ++j) arr[j] = [];
	                  break;
	                case "K":
	                  val = record[rj].slice(1);
	                  if (val.charAt(0) === "\"") {
	                    val = val.slice(1, val.length - 1);
	                    cell_t = "s";
	                  } else if (val === "TRUE" || val === "FALSE") {
	                    val = val === "TRUE";
	                    cell_t = "b";
	                  } else if (!isNaN(fuzzynum(val))) {
	                    val = fuzzynum(val);
	                    cell_t = "n";
	                    if (next_cell_format !== null && fmt_is_date(next_cell_format) && opts.cellDates) {
	                      val = numdate(wb.Workbook.WBProps.date1904 ? val + 1462 : val);
	                      cell_t = typeof val == "number" ? "n" : "d";
	                    }
	                  }
	                  if (typeof $cptable !== "undefined" && typeof val == "string" && (opts || ({})).type != "string" && (opts || ({})).codepage) val = $cptable.utils.decode(opts.codepage, val);
	                  C_seen_K = true;
	                  break;
	                case "E":
	                  C_seen_E = true;
	                  formula = rc_to_a1(record[rj].slice(1), {
	                    r: R,
	                    c: C
	                  });
	                  break;
	                case "S":
	                  C_seen_S = true;
	                  break;
	                case "G":
	                  break;
	                case "R":
	                  _R = parseInt(record[rj].slice(1), 10) - 1;
	                  break;
	                case "C":
	                  _C = parseInt(record[rj].slice(1), 10) - 1;
	                  break;
	                default:
	                  if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
	              }
	              if (C_seen_K) {
	                if (!arr[R][C]) arr[R][C] = {
	                  t: cell_t,
	                  v: val
	                }; else {
	                  arr[R][C].t = cell_t;
	                  arr[R][C].v = val;
	                }
	                if (next_cell_format) arr[R][C].z = next_cell_format;
	                if (opts.cellText !== false && next_cell_format) arr[R][C].w = SSF_format(arr[R][C].z, arr[R][C].v, {
	                  date1904: wb.Workbook.WBProps.date1904
	                });
	                next_cell_format = null;
	              }
	              if (C_seen_S) {
	                if (C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
	                var shrbase = _R > -1 && arr[_R][_C];
	                if (!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
	                formula = shift_formula_str(shrbase[1], {
	                  r: R - _R,
	                  c: C - _C
	                });
	              }
	              if (formula) {
	                if (!arr[R][C]) arr[R][C] = {
	                  t: "n",
	                  f: formula
	                }; else arr[R][C].f = formula;
	              }
	              if (cmnt) {
	                if (!arr[R][C]) arr[R][C] = {
	                  t: "z"
	                };
	                arr[R][C].c = [{
	                  a: "SheetJSYLK",
	                  t: cmnt
	                }];
	              }
	              break;
	            case "F":
	              var F_seen = 0;
	              for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
	                case "X":
	                  C = parseInt(record[rj].slice(1), 10) - 1;
	                  ++F_seen;
	                  break;
	                case "Y":
	                  R = parseInt(record[rj].slice(1), 10) - 1;
	                  for (j = arr.length; j <= R; ++j) arr[j] = [];
	                  break;
	                case "M":
	                  Mval = parseInt(record[rj].slice(1), 10) / 20;
	                  break;
	                case "F":
	                  break;
	                case "G":
	                  break;
	                case "P":
	                  next_cell_format = formats[parseInt(record[rj].slice(1), 10)];
	                  break;
	                case "S":
	                  break;
	                case "D":
	                  break;
	                case "N":
	                  break;
	                case "W":
	                  cw = record[rj].slice(1).split(" ");
	                  for (j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
	                    Mval = parseInt(cw[2], 10);
	                    colinfo[j - 1] = Mval === 0 ? {
	                      hidden: true
	                    } : {
	                      wch: Mval
	                    };
	                  }
	                  break;
	                case "C":
	                  C = parseInt(record[rj].slice(1), 10) - 1;
	                  if (!colinfo[C]) colinfo[C] = {};
	                  break;
	                case "R":
	                  R = parseInt(record[rj].slice(1), 10) - 1;
	                  if (!rowinfo[R]) rowinfo[R] = {};
	                  if (Mval > 0) {
	                    rowinfo[R].hpt = Mval;
	                    rowinfo[R].hpx = pt2px(Mval);
	                  } else if (Mval === 0) rowinfo[R].hidden = true;
	                  break;
	                default:
	                  if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
	              }
	              if (F_seen < 1) next_cell_format = null;
	              break;
	            default:
	              if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
	          }
	        }
	        if (rowinfo.length > 0) sht["!rows"] = rowinfo;
	        if (colinfo.length > 0) sht["!cols"] = colinfo;
	        colinfo.forEach(function (col) {
	          process_col(col);
	        });
	        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
	        return [arr, sht, wb];
	      }
	      function sylk_to_workbook(d, opts) {
	        var aoasht = sylk_to_aoa(d, opts);
	        var aoa = aoasht[0], ws = aoasht[1], wb = aoasht[2];
	        var _opts = dup(opts);
	        _opts.date1904 = (((wb || ({})).Workbook || ({})).WBProps || ({})).date1904;
	        var o = aoa_to_sheet(aoa, _opts);
	        keys(ws).forEach(function (k) {
	          o[k] = ws[k];
	        });
	        var outwb = sheet_to_workbook(o, opts);
	        keys(wb).forEach(function (k) {
	          outwb[k] = wb[k];
	        });
	        outwb.bookType = "sylk";
	        return outwb;
	      }
	      function write_ws_cell_sylk(cell, ws, R, C, opts, date1904) {
	        var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";
	        switch (cell.t) {
	          case "n":
	            o += cell.v || 0;
	            if (cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {
	              r: R,
	              c: C
	            });
	            break;
	          case "b":
	            o += cell.v ? "TRUE" : "FALSE";
	            break;
	          case "e":
	            o += cell.w || cell.v;
	            break;
	          case "d":
	            o += datenum(parseDate(cell.v, date1904), date1904);
	            break;
	          case "s":
	            o += "\"" + (cell.v == null ? "" : String(cell.v)).replace(/"/g, "").replace(/;/g, ";;") + "\"";
	            break;
	        }
	        return o;
	      }
	      function write_ws_cmnt_sylk(cmnt, R, C) {
	        var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";A";
	        o += encode_sylk_str(cmnt.map(function (c) {
	          return c.t;
	        }).join(""));
	        return o;
	      }
	      function write_ws_cols_sylk(out, cols) {
	        cols.forEach(function (col, i) {
	          var rec = "F;W" + (i + 1) + " " + (i + 1) + " ";
	          if (col.hidden) rec += "0"; else {
	            if (typeof col.width == "number" && !col.wpx) col.wpx = width2px(col.width);
	            if (typeof col.wpx == "number" && !col.wch) col.wch = px2char(col.wpx);
	            if (typeof col.wch == "number") rec += Math.round(col.wch);
	          }
	          if (rec.charAt(rec.length - 1) != " ") out.push(rec);
	        });
	      }
	      function write_ws_rows_sylk(out, rows) {
	        rows.forEach(function (row, i) {
	          var rec = "F;";
	          if (row.hidden) rec += "M0;"; else if (row.hpt) rec += "M" + 20 * row.hpt + ";"; else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
	          if (rec.length > 2) out.push(rec + "R" + (i + 1));
	        });
	      }
	      function sheet_to_sylk(ws, opts, wb) {
	        if (!opts) opts = {};
	        opts._formats = ["General"];
	        var preamble = ["ID;PSheetJS;N;E"], o = [];
	        var r = safe_decode_range(ws["!ref"]), cell;
	        var dense = ws["!data"] != null;
	        var RS = "\r\n";
	        var d1904 = (((wb || ({})).Workbook || ({})).WBProps || ({})).date1904;
	        var _lastfmt = "General";
	        preamble.push("P;PGeneral");
	        var R = r.s.r, C = r.s.c, p = [];
	        for (R = r.s.r; R <= r.e.r; ++R) {
	          if (dense && !ws["!data"][R]) continue;
	          p = [];
	          for (C = r.s.c; C <= r.e.c; ++C) {
	            cell = dense ? ws["!data"][R][C] : ws[encode_col(C) + encode_row(R)];
	            if (!cell || !cell.c) continue;
	            p.push(write_ws_cmnt_sylk(cell.c, R, C));
	          }
	          if (p.length) o.push(p.join(RS));
	        }
	        for (R = r.s.r; R <= r.e.r; ++R) {
	          if (dense && !ws["!data"][R]) continue;
	          p = [];
	          for (C = r.s.c; C <= r.e.c; ++C) {
	            cell = dense ? ws["!data"][R][C] : ws[encode_col(C) + encode_row(R)];
	            if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
	            if ((cell.z || (cell.t == "d" ? table_fmt[14] : "General")) != _lastfmt) {
	              var ifmt = opts._formats.indexOf(cell.z);
	              if (ifmt == -1) {
	                opts._formats.push(cell.z);
	                ifmt = opts._formats.length - 1;
	                preamble.push("P;P" + cell.z.replace(/;/g, ";;"));
	              }
	              p.push("F;P" + ifmt + ";Y" + (R + 1) + ";X" + (C + 1));
	            }
	            p.push(write_ws_cell_sylk(cell, ws, R, C, opts, d1904));
	          }
	          o.push(p.join(RS));
	        }
	        preamble.push("F;P0;DG0G8;M255");
	        if (ws["!cols"]) write_ws_cols_sylk(preamble, ws["!cols"]);
	        if (ws["!rows"]) write_ws_rows_sylk(preamble, ws["!rows"]);
	        preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c, r.s.r, r.e.c, r.e.r].join(" "));
	        preamble.push("O;L;D;B" + (d1904 ? ";V4" : "") + ";K47;G100 0.001");
	        delete opts._formats;
	        return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
	      }
	      return {
	        to_workbook: sylk_to_workbook,
	        from_sheet: sheet_to_sylk
	      };
	    })();
	    var DIF = (function () {
	      function dif_to_aoa(d, opts) {
	        switch (opts.type) {
	          case "base64":
	            return dif_to_aoa_str(Base64_decode(d), opts);
	          case "binary":
	            return dif_to_aoa_str(d, opts);
	          case "buffer":
	            return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
	          case "array":
	            return dif_to_aoa_str(cc2str(d), opts);
	        }
	        throw new Error("Unrecognized type " + opts.type);
	      }
	      function dif_to_aoa_str(str, opts) {
	        var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
	        for (; ri !== records.length; ++ri) {
	          if (records[ri].trim() === "BOT") {
	            arr[++R] = [];
	            C = 0;
	            continue;
	          }
	          if (R < 0) continue;
	          var metadata = records[ri].trim().split(",");
	          var type = metadata[0], value = metadata[1];
	          ++ri;
	          var data = records[ri] || "";
	          while ((data.match(/["]/g) || []).length & 1 && ri < records.length - 1) data += "\n" + records[++ri];
	          data = data.trim();
	          switch (+type) {
	            case -1:
	              if (data === "BOT") {
	                arr[++R] = [];
	                C = 0;
	                continue;
	              } else if (data !== "EOD") throw new Error("Unrecognized DIF special command " + data);
	              break;
	            case 0:
	              if (data === "TRUE") arr[R][C] = true; else if (data === "FALSE") arr[R][C] = false; else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value); else if (!isNaN(fuzzydate(value).getDate())) {
	                arr[R][C] = parseDate(value);
	                if (!(opts && opts.UTC)) {
	                  arr[R][C] = utc_to_local(arr[R][C]);
	                }
	              } else arr[R][C] = value;
	              ++C;
	              break;
	            case 1:
	              data = data.slice(1, data.length - 1);
	              data = data.replace(/""/g, "\"");
	              if (data && data.match(/^=".*"$/)) data = data.slice(2, -1);
	              arr[R][C++] = data !== "" ? data : null;
	              break;
	          }
	          if (data === "EOD") break;
	        }
	        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
	        return arr;
	      }
	      function dif_to_sheet(str, opts) {
	        return aoa_to_sheet(dif_to_aoa(str, opts), opts);
	      }
	      function dif_to_workbook(str, opts) {
	        var o = sheet_to_workbook(dif_to_sheet(str, opts), opts);
	        o.bookType = "dif";
	        return o;
	      }
	      function make_value(v, s) {
	        return "0," + String(v) + "\r\n" + s;
	      }
	      function make_value_str(s) {
	        return "1,0\r\n\"" + s.replace(/"/g, "\"\"") + "\"";
	      }
	      function sheet_to_dif(ws) {
	        var r = safe_decode_range(ws["!ref"]);
	        var dense = ws["!data"] != null;
	        var o = ["TABLE\r\n0,1\r\n\"sheetjs\"\r\n", "VECTORS\r\n0," + (r.e.r - r.s.r + 1) + "\r\n\"\"\r\n", "TUPLES\r\n0," + (r.e.c - r.s.c + 1) + "\r\n\"\"\r\n", "DATA\r\n0,0\r\n\"\"\r\n"];
	        for (var R = r.s.r; R <= r.e.r; ++R) {
	          var row = dense ? ws["!data"][R] : [];
	          var p = "-1,0\r\nBOT\r\n";
	          for (var C = r.s.c; C <= r.e.c; ++C) {
	            var cell = dense ? row && row[C] : ws[encode_cell({
	              r: R,
	              c: C
	            })];
	            if (cell == null) {
	              p += "1,0\r\n\"\"\r\n";
	              continue;
	            }
	            switch (cell.t) {
	              case "n":
	                {
	                  if (cell.w != null) p += "0," + cell.w + "\r\nV"; else if (cell.v != null) p += make_value(cell.v, "V"); else if (cell.f != null && !cell.F) p += make_value_str("=" + cell.f); else p += "1,0\r\n\"\"";
	                }
	                break;
	              case "b":
	                p += cell.v ? make_value(1, "TRUE") : make_value(0, "FALSE");
	                break;
	              case "s":
	                p += make_value_str(isNaN(+cell.v) ? cell.v : "=\"" + cell.v + "\"");
	                break;
	              case "d":
	                if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
	                p += make_value(cell.w, "V");
	                break;
	              default:
	                p += "1,0\r\n\"\"";
	            }
	            p += "\r\n";
	          }
	          o.push(p);
	        }
	        return o.join("") + "-1,0\r\nEOD";
	      }
	      return {
	        to_workbook: dif_to_workbook,
	        to_sheet: dif_to_sheet,
	        from_sheet: sheet_to_dif
	      };
	    })();
	    var ETH = (function () {
	      function decode(s) {
	        return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
	      }
	      function encode(s) {
	        return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
	      }
	      function eth_to_aoa(str, opts) {
	        var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
	        for (; ri !== records.length; ++ri) {
	          var record = records[ri].trim().split(":");
	          if (record[0] !== "cell") continue;
	          var addr = decode_cell(record[1]);
	          if (arr.length <= addr.r) for (R = arr.length; R <= addr.r; ++R) if (!arr[R]) arr[R] = [];
	          R = addr.r;
	          C = addr.c;
	          switch (record[2]) {
	            case "t":
	              arr[R][C] = decode(record[3]);
	              break;
	            case "v":
	              arr[R][C] = +record[3];
	              break;
	            case "vtf":
	              var _f = record[record.length - 1];
	            case "vtc":
	              switch (record[3]) {
	                case "nl":
	                  arr[R][C] = +record[4] ? true : false;
	                  break;
	                default:
	                  arr[R][C] = +record[4];
	                  break;
	              }
	              if (record[2] == "vtf") arr[R][C] = [arr[R][C], _f];
	          }
	        }
	        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
	        return arr;
	      }
	      function eth_to_sheet(d, opts) {
	        return aoa_to_sheet(eth_to_aoa(d, opts), opts);
	      }
	      function eth_to_workbook(d, opts) {
	        return sheet_to_workbook(eth_to_sheet(d, opts), opts);
	      }
	      var header = ["socialcalc:version:1.5", "MIME-Version: 1.0", "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"].join("\n");
	      var sep = ["--SocialCalcSpreadsheetControlSave", "Content-type: text/plain; charset=UTF-8"].join("\n") + "\n";
	      var meta = ["# SocialCalc Spreadsheet Control Save", "part:sheet"].join("\n");
	      var end = "--SocialCalcSpreadsheetControlSave--";
	      function sheet_to_eth_data(ws) {
	        if (!ws || !ws["!ref"]) return "";
	        var o = [], oo = [], cell, coord = "";
	        var r = decode_range(ws["!ref"]);
	        var dense = ws["!data"] != null;
	        for (var R = r.s.r; R <= r.e.r; ++R) {
	          for (var C = r.s.c; C <= r.e.c; ++C) {
	            coord = encode_cell({
	              r: R,
	              c: C
	            });
	            cell = dense ? (ws["!data"][R] || [])[C] : ws[coord];
	            if (!cell || cell.v == null || cell.t === "z") continue;
	            oo = ["cell", coord, "t"];
	            switch (cell.t) {
	              case "s":
	              case "str":
	                oo.push(encode(cell.v));
	                break;
	              case "n":
	                if (!cell.f) {
	                  oo[2] = "v";
	                  oo[3] = cell.v;
	                } else {
	                  oo[2] = "vtf";
	                  oo[3] = "n";
	                  oo[4] = cell.v;
	                  oo[5] = encode(cell.f);
	                }
	                break;
	              case "b":
	                oo[2] = "vt" + (cell.f ? "f" : "c");
	                oo[3] = "nl";
	                oo[4] = cell.v ? "1" : "0";
	                oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
	                break;
	              case "d":
	                var t = datenum(parseDate(cell.v));
	                oo[2] = "vtc";
	                oo[3] = "nd";
	                oo[4] = "" + t;
	                oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
	                break;
	              case "e":
	                continue;
	            }
	            o.push(oo.join(":"));
	          }
	        }
	        o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
	        o.push("valueformat:1:text-wiki");
	        return o.join("\n");
	      }
	      function sheet_to_eth(ws) {
	        return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
	      }
	      return {
	        to_workbook: eth_to_workbook,
	        to_sheet: eth_to_sheet,
	        from_sheet: sheet_to_eth
	      };
	    })();
	    var PRN = (function () {
	      function set_text_arr(data, arr, R, C, o) {
	        if (o.raw) arr[R][C] = data; else if (data === "") ; else if (data === "TRUE") arr[R][C] = true; else if (data === "FALSE") arr[R][C] = false; else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data); else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data); else arr[R][C] = data;
	      }
	      function prn_to_aoa_str(f, opts) {
	        var o = opts || ({});
	        var arr = [];
	        if (!f || f.length === 0) return arr;
	        var lines = f.split(/[\r\n]/);
	        var L = lines.length - 1;
	        while (L >= 0 && lines[L].length === 0) --L;
	        var start = 10, idx = 0;
	        var R = 0;
	        for (; R <= L; ++R) {
	          idx = lines[R].indexOf(" ");
	          if (idx == -1) idx = lines[R].length; else idx++;
	          start = Math.max(start, idx);
	        }
	        for (R = 0; R <= L; ++R) {
	          arr[R] = [];
	          var C = 0;
	          set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
	          for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C) set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
	        }
	        if (o.sheetRows) arr = arr.slice(0, o.sheetRows);
	        return arr;
	      }
	      var guess_seps = {
	        44: ",",
	        9: "\t",
	        59: ";",
	        124: "|"
	      };
	      var guess_sep_weights = {
	        44: 3,
	        9: 2,
	        59: 1,
	        124: 0
	      };
	      function guess_sep(str) {
	        var cnt = {}, instr = false, end = 0, cc = 0;
	        for (; end < str.length; ++end) {
	          if ((cc = str.charCodeAt(end)) == 34) instr = !instr; else if (!instr && (cc in guess_seps)) cnt[cc] = (cnt[cc] || 0) + 1;
	        }
	        cc = [];
	        for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
	          cc.push([cnt[end], end]);
	        }
	        if (!cc.length) {
	          cnt = guess_sep_weights;
	          for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
	            cc.push([cnt[end], end]);
	          }
	        }
	        cc.sort(function (a, b) {
	          return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
	        });
	        return guess_seps[cc.pop()[1]] || 44;
	      }
	      function dsv_to_sheet_str(str, opts) {
	        var o = opts || ({});
	        var sep = "";
	        var ws = {};
	        if (o.dense) ws["!data"] = [];
	        var range = {
	          s: {
	            c: 0,
	            r: 0
	          },
	          e: {
	            c: 0,
	            r: 0
	          }
	        };
	        if (str.slice(0, 4) == "sep=") {
	          if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
	            sep = str.charAt(4);
	            str = str.slice(7);
	          } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
	            sep = str.charAt(4);
	            str = str.slice(6);
	          } else sep = guess_sep(str.slice(0, 1024));
	        } else if (o && o.FS) sep = o.FS; else sep = guess_sep(str.slice(0, 1024));
	        var R = 0, C = 0, v = 0;
	        var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
	        var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
	        function finish_cell() {
	          var s = str.slice(start, end);
	          if (s.slice(-1) == "\r") s = s.slice(0, -1);
	          var cell = {};
	          if (s.charAt(0) == "\"" && s.charAt(s.length - 1) == "\"") s = s.slice(1, -1).replace(/""/g, "\"");
	          if (o.cellText !== false) cell.w = s;
	          if (s.length === 0) cell.t = "z"; else if (o.raw) {
	            cell.t = "s";
	            cell.v = s;
	          } else if (s.trim().length === 0) {
	            cell.t = "s";
	            cell.v = s;
	          } else if (s.charCodeAt(0) == 61) {
	            if (s.charCodeAt(1) == 34 && s.charCodeAt(s.length - 1) == 34) {
	              cell.t = "s";
	              cell.v = s.slice(2, -1).replace(/""/g, "\"");
	            } else if (fuzzyfmla(s)) {
	              cell.t = "n";
	              cell.f = s.slice(1);
	            } else {
	              cell.t = "s";
	              cell.v = s;
	            }
	          } else if (s == "TRUE") {
	            cell.t = "b";
	            cell.v = true;
	          } else if (s == "FALSE") {
	            cell.t = "b";
	            cell.v = false;
	          } else if (!isNaN(v = fuzzynum(s))) {
	            cell.t = "n";
	            cell.v = v;
	          } else if (!isNaN((v = fuzzydate(s)).getDate()) || _re && s.match(_re)) {
	            cell.z = o.dateNF || table_fmt[14];
	            if (_re && s.match(_re)) {
	              var news = dateNF_fix(s, o.dateNF, s.match(_re) || []);
	              v = parseDate(news);
	              if (o && o.UTC === false) v = utc_to_local(v);
	            } else if (o && o.UTC === false) v = utc_to_local(v); else if (o.cellText !== false && o.dateNF) cell.w = SSF_format(cell.z, v);
	            if (o.cellDates) {
	              cell.t = "d";
	              cell.v = v;
	            } else {
	              cell.t = "n";
	              cell.v = datenum(v);
	            }
	            if (!o.cellNF) delete cell.z;
	          } else {
	            cell.t = "s";
	            cell.v = s;
	          }
	          if (cell.t == "z") ; else if (o.dense) {
	            if (!ws["!data"][R]) ws["!data"][R] = [];
	            ws["!data"][R][C] = cell;
	          } else ws[encode_cell({
	            c: C,
	            r: R
	          })] = cell;
	          start = end + 1;
	          startcc = str.charCodeAt(start);
	          if (range.e.c < C) range.e.c = C;
	          if (range.e.r < R) range.e.r = R;
	          if (cc == sepcc) ++C; else {
	            C = 0;
	            ++R;
	            if (o.sheetRows && o.sheetRows <= R) return true;
	          }
	        }
	        outer: for (; end < str.length; ++end) switch (cc = str.charCodeAt(end)) {
	          case 34:
	            if (startcc === 34) instr = !instr;
	            break;
	          case 13:
	            if (instr) break;
	            if (str.charCodeAt(end + 1) == 10) ++end;
	          case sepcc:
	          case 10:
	            if (!instr && finish_cell()) break outer;
	            break;
	        }
	        if (end - start > 0) finish_cell();
	        ws["!ref"] = encode_range(range);
	        return ws;
	      }
	      function prn_to_sheet_str(str, opts) {
	        if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
	        if (opts.FS) return dsv_to_sheet_str(str, opts);
	        if (str.slice(0, 4) == "sep=") return dsv_to_sheet_str(str, opts);
	        if (str.indexOf("\t") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
	        return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
	      }
	      function prn_to_sheet(d, opts) {
	        var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d, opts);
	        switch (opts.type) {
	          case "base64":
	            str = Base64_decode(d);
	            break;
	          case "binary":
	            str = d;
	            break;
	          case "buffer":
	            if (opts.codepage == 65001) str = d.toString("utf8"); else if (opts.codepage && typeof $cptable !== "undefined") str = $cptable.utils.decode(opts.codepage, d); else str = has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d);
	            break;
	          case "array":
	            str = cc2str(d);
	            break;
	          case "string":
	            str = d;
	            break;
	          default:
	            throw new Error("Unrecognized type " + opts.type);
	        }
	        if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str.slice(3)); else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001) str = utf8read(str); else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
	        if (str.slice(0, 19) == "socialcalc:version:") return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
	        return prn_to_sheet_str(str, opts);
	      }
	      function prn_to_workbook(d, opts) {
	        return sheet_to_workbook(prn_to_sheet(d, opts), opts);
	      }
	      function sheet_to_prn(ws) {
	        var o = [];
	        var r = safe_decode_range(ws["!ref"]), cell;
	        var dense = ws["!data"] != null;
	        for (var R = r.s.r; R <= r.e.r; ++R) {
	          var oo = [];
	          for (var C = r.s.c; C <= r.e.c; ++C) {
	            var coord = encode_cell({
	              r: R,
	              c: C
	            });
	            cell = dense ? (ws["!data"][R] || [])[C] : ws[coord];
	            if (!cell || cell.v == null) {
	              oo.push("          ");
	              continue;
	            }
	            var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
	            while (w.length < 10) w += " ";
	            oo.push(w + (C === 0 ? " " : ""));
	          }
	          o.push(oo.join(""));
	        }
	        return o.join("\n");
	      }
	      return {
	        to_workbook: prn_to_workbook,
	        to_sheet: prn_to_sheet,
	        from_sheet: sheet_to_prn
	      };
	    })();
	    function read_wb_ID(d, opts) {
	      var o = opts || ({}), OLD_WTF = !!o.WTF;
	      o.WTF = true;
	      try {
	        var out = SYLK.to_workbook(d, o);
	        o.WTF = OLD_WTF;
	        return out;
	      } catch (e) {
	        o.WTF = OLD_WTF;
	        if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
	        return PRN.to_workbook(d, opts);
	      }
	    }
	    var WK_ = (function () {
	      function lotushopper(data, cb, opts) {
	        if (!data) return;
	        prep_blob(data, data.l || 0);
	        var Enum = opts.Enum || WK1Enum;
	        while (data.l < data.length) {
	          var RT = data.read_shift(2);
	          var R = Enum[RT] || Enum[65535];
	          var length = data.read_shift(2);
	          var tgt = data.l + length;
	          var d = R.f && R.f(data, length, opts);
	          data.l = tgt;
	          if (cb(d, R, RT)) return;
	        }
	      }
	      function lotus_to_workbook(d, opts) {
	        switch (opts.type) {
	          case "base64":
	            return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
	          case "binary":
	            return lotus_to_workbook_buf(s2a(d), opts);
	          case "buffer":
	          case "array":
	            return lotus_to_workbook_buf(d, opts);
	        }
	        throw "Unsupported type " + opts.type;
	      }
	      var LOTUS_DATE_FMTS = ["mmmm", "dd-mmm-yyyy", "dd-mmm", "mmm-yyyy", "@", "mm/dd", "hh:mm:ss AM/PM", "hh:mm AM/PM", "mm/dd/yyyy", "mm/dd", "hh:mm:ss", "hh:mm"];
	      function lotus_to_workbook_buf(d, opts) {
	        if (!d) return d;
	        var o = opts || ({});
	        var s = {}, n = "Sheet1", next_n = "", sidx = 0;
	        var sheets = {}, snames = [], realnames = [], sdata = [];
	        if (o.dense) sdata = s["!data"] = [];
	        var refguess = {
	          s: {
	            r: 0,
	            c: 0
	          },
	          e: {
	            r: 0,
	            c: 0
	          }
	        };
	        var sheetRows = o.sheetRows || 0;
	        var lastcell = {};
	        if (d[4] == 81 && d[5] == 80 && d[6] == 87) return qpw_to_workbook_buf(d, opts);
	        if (d[2] == 0) {
	          if (d[3] == 8 || d[3] == 9) {
	            if (d.length >= 16 && d[14] == 5 && d[15] === 108) throw new Error("Unsupported Works 3 for Mac file");
	          }
	        }
	        if (d[2] == 2) {
	          o.Enum = WK1Enum;
	          lotushopper(d, function (val, R, RT) {
	            switch (RT) {
	              case 0:
	                o.vers = val;
	                if (val >= 4096) o.qpro = true;
	                break;
	              case 255:
	                o.vers = val;
	                o.works = true;
	                break;
	              case 6:
	                refguess = val;
	                break;
	              case 204:
	                if (val) next_n = val;
	                break;
	              case 222:
	                next_n = val;
	                break;
	              case 15:
	              case 51:
	                if ((!o.qpro && !o.works || RT == 51) && val[1].v.charCodeAt(0) < 48) val[1].v = val[1].v.slice(1);
	                if (o.works || o.works2) val[1].v = val[1].v.replace(/\r\n/g, "\n");
	              case 13:
	              case 14:
	              case 16:
	                if ((val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) {
	                  val[1].z = o.dateNF || LOTUS_DATE_FMTS[(val[2] & 15) - 1] || table_fmt[14];
	                  if (o.cellDates) {
	                    val[1].v = numdate(val[1].v);
	                    val[1].t = typeof val[1].v == "number" ? "n" : "d";
	                  }
	                }
	                if (o.qpro) {
	                  if (val[3] > sidx) {
	                    s["!ref"] = encode_range(refguess);
	                    sheets[n] = s;
	                    snames.push(n);
	                    s = {};
	                    if (o.dense) sdata = s["!data"] = [];
	                    refguess = {
	                      s: {
	                        r: 0,
	                        c: 0
	                      },
	                      e: {
	                        r: 0,
	                        c: 0
	                      }
	                    };
	                    sidx = val[3];
	                    n = next_n || "Sheet" + (sidx + 1);
	                    next_n = "";
	                  }
	                }
	                var tmpcell = o.dense ? (sdata[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];
	                if (tmpcell) {
	                  tmpcell.t = val[1].t;
	                  tmpcell.v = val[1].v;
	                  if (val[1].z != null) tmpcell.z = val[1].z;
	                  if (val[1].f != null) tmpcell.f = val[1].f;
	                  lastcell = tmpcell;
	                  break;
	                }
	                if (o.dense) {
	                  if (!sdata[val[0].r]) sdata[val[0].r] = [];
	                  sdata[val[0].r][val[0].c] = val[1];
	                } else s[encode_cell(val[0])] = val[1];
	                lastcell = val[1];
	                break;
	              case 21509:
	                o.works2 = true;
	                break;
	              case 21506:
	                {
	                  if (val == 5281) {
	                    lastcell.z = "hh:mm:ss";
	                    if (o.cellDates && lastcell.t == "n") {
	                      lastcell.v = numdate(lastcell.v);
	                      lastcell.t = typeof lastcell.v == "number" ? "n" : "d";
	                    }
	                  }
	                }
	                break;
	            }
	          }, o);
	        } else if (d[2] == 26 || d[2] == 14) {
	          o.Enum = WK3Enum;
	          if (d[2] == 14) {
	            o.qpro = true;
	            d.l = 0;
	          }
	          lotushopper(d, function (val, R, RT) {
	            switch (RT) {
	              case 204:
	                n = val;
	                break;
	              case 22:
	                if (val[1].v.charCodeAt(0) < 48) val[1].v = val[1].v.slice(1);
	                val[1].v = val[1].v.replace(/\x0F./g, function ($$) {
	                  return String.fromCharCode($$.charCodeAt(1) - 32);
	                }).replace(/\r\n/g, "\n");
	              case 23:
	              case 24:
	              case 25:
	              case 37:
	              case 39:
	              case 40:
	                if (val[3] > sidx) {
	                  s["!ref"] = encode_range(refguess);
	                  sheets[n] = s;
	                  snames.push(n);
	                  s = {};
	                  if (o.dense) sdata = s["!data"] = [];
	                  refguess = {
	                    s: {
	                      r: 0,
	                      c: 0
	                    },
	                    e: {
	                      r: 0,
	                      c: 0
	                    }
	                  };
	                  sidx = val[3];
	                  n = "Sheet" + (sidx + 1);
	                }
	                if (sheetRows > 0 && val[0].r >= sheetRows) break;
	                if (o.dense) {
	                  if (!sdata[val[0].r]) sdata[val[0].r] = [];
	                  sdata[val[0].r][val[0].c] = val[1];
	                } else s[encode_cell(val[0])] = val[1];
	                if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;
	                if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;
	                break;
	              case 27:
	                if (val[14000]) realnames[val[14000][0]] = val[14000][1];
	                break;
	              case 1537:
	                realnames[val[0]] = val[1];
	                if (val[0] == sidx) n = val[1];
	                break;
	            }
	          }, o);
	        } else throw new Error("Unrecognized LOTUS BOF " + d[2]);
	        s["!ref"] = encode_range(refguess);
	        sheets[next_n || n] = s;
	        snames.push(next_n || n);
	        if (!realnames.length) return {
	          SheetNames: snames,
	          Sheets: sheets
	        };
	        var osheets = {}, rnames = [];
	        for (var i = 0; i < realnames.length; ++i) if (sheets[snames[i]]) {
	          rnames.push(realnames[i] || snames[i]);
	          osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
	        } else {
	          rnames.push(realnames[i]);
	          osheets[realnames[i]] = {
	            "!ref": "A1"
	          };
	        }
	        return {
	          SheetNames: rnames,
	          Sheets: osheets
	        };
	      }
	      function sheet_to_wk1(ws, opts) {
	        var o = opts || ({});
	        if (+o.codepage >= 0) set_cp(+o.codepage);
	        if (o.type == "string") throw new Error("Cannot write WK1 to JS string");
	        var ba = buf_array();
	        var range = safe_decode_range(ws["!ref"]);
	        var dense = ws["!data"] != null;
	        var cols = [];
	        write_biff_rec(ba, 0, write_BOF_WK1(1030));
	        write_biff_rec(ba, 6, write_RANGE(range));
	        var max_R = Math.min(range.e.r, 8191);
	        for (var C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
	        for (var R = range.s.r; R <= max_R; ++R) {
	          var rr = encode_row(R);
	          for (C = range.s.c; C <= range.e.c; ++C) {
	            var cell = dense ? (ws["!data"][R] || [])[C] : ws[cols[C] + rr];
	            if (!cell || cell.t == "z") continue;
	            switch (cell.t) {
	              case "n":
	                if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 13, write_INTEGER(R, C, cell)); else write_biff_rec(ba, 14, write_NUMBER(R, C, cell));
	                break;
	              case "d":
	                var dc = datenum(cell.v);
	                if ((dc | 0) == dc && dc >= -32768 && dc <= 32767) write_biff_rec(ba, 13, write_INTEGER(R, C, {
	                  t: "n",
	                  v: dc,
	                  z: cell.z || table_fmt[14]
	                })); else write_biff_rec(ba, 14, write_NUMBER(R, C, {
	                  t: "n",
	                  v: dc,
	                  z: cell.z || table_fmt[14]
	                }));
	                break;
	              default:
	                var str = format_cell(cell);
	                write_biff_rec(ba, 15, write_LABEL(R, C, str.slice(0, 239)));
	            }
	          }
	        }
	        write_biff_rec(ba, 1);
	        return ba.end();
	      }
	      function book_to_wk3(wb, opts) {
	        var o = opts || ({});
	        if (+o.codepage >= 0) set_cp(+o.codepage);
	        if (o.type == "string") throw new Error("Cannot write WK3 to JS string");
	        var ba = buf_array();
	        write_biff_rec(ba, 0, write_BOF_WK3(wb));
	        for (var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) if ((wb.Sheets[wb.SheetNames[i]] || ({}))["!ref"]) write_biff_rec(ba, 27, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));
	        var wsidx = 0;
	        for (i = 0; i < wb.SheetNames.length; ++i) {
	          var ws = wb.Sheets[wb.SheetNames[i]];
	          if (!ws || !ws["!ref"]) continue;
	          var range = safe_decode_range(ws["!ref"]);
	          var dense = ws["!data"] != null;
	          var cols = [];
	          var max_R = Math.min(range.e.r, 8191);
	          for (var R = range.s.r; R <= max_R; ++R) {
	            var rr = encode_row(R);
	            for (var C = range.s.c; C <= range.e.c; ++C) {
	              if (R === range.s.r) cols[C] = encode_col(C);
	              var ref = cols[C] + rr;
	              var cell = dense ? (ws["!data"][R] || [])[C] : ws[ref];
	              if (!cell || cell.t == "z") continue;
	              if (cell.t == "n") {
	                write_biff_rec(ba, 23, write_NUMBER_17(R, C, wsidx, cell.v));
	              } else {
	                var str = format_cell(cell);
	                write_biff_rec(ba, 22, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
	              }
	            }
	          }
	          ++wsidx;
	        }
	        write_biff_rec(ba, 1);
	        return ba.end();
	      }
	      function write_BOF_WK1(v) {
	        var out = new_buf(2);
	        out.write_shift(2, v);
	        return out;
	      }
	      function write_BOF_WK3(wb) {
	        var out = new_buf(26);
	        out.write_shift(2, 4096);
	        out.write_shift(2, 4);
	        out.write_shift(4, 0);
	        var rows = 0, cols = 0, wscnt = 0;
	        for (var i = 0; i < wb.SheetNames.length; ++i) {
	          var name = wb.SheetNames[i];
	          var ws = wb.Sheets[name];
	          if (!ws || !ws["!ref"]) continue;
	          ++wscnt;
	          var range = decode_range(ws["!ref"]);
	          if (rows < range.e.r) rows = range.e.r;
	          if (cols < range.e.c) cols = range.e.c;
	        }
	        if (rows > 8191) rows = 8191;
	        out.write_shift(2, rows);
	        out.write_shift(1, wscnt);
	        out.write_shift(1, cols);
	        out.write_shift(2, 0);
	        out.write_shift(2, 0);
	        out.write_shift(1, 1);
	        out.write_shift(1, 2);
	        out.write_shift(4, 0);
	        out.write_shift(4, 0);
	        return out;
	      }
	      function parse_RANGE(blob, length, opts) {
	        var o = {
	          s: {
	            c: 0,
	            r: 0
	          },
	          e: {
	            c: 0,
	            r: 0
	          }
	        };
	        if (length == 8 && opts.qpro) {
	          o.s.c = blob.read_shift(1);
	          blob.l++;
	          o.s.r = blob.read_shift(2);
	          o.e.c = blob.read_shift(1);
	          blob.l++;
	          o.e.r = blob.read_shift(2);
	          return o;
	        }
	        o.s.c = blob.read_shift(2);
	        o.s.r = blob.read_shift(2);
	        if (length == 12 && opts.qpro) blob.l += 2;
	        o.e.c = blob.read_shift(2);
	        o.e.r = blob.read_shift(2);
	        if (length == 12 && opts.qpro) blob.l += 2;
	        if (o.s.c == 65535) o.s.c = o.e.c = o.s.r = o.e.r = 0;
	        return o;
	      }
	      function write_RANGE(range) {
	        var out = new_buf(8);
	        out.write_shift(2, range.s.c);
	        out.write_shift(2, range.s.r);
	        out.write_shift(2, range.e.c);
	        out.write_shift(2, range.e.r);
	        return out;
	      }
	      function parse_cell(blob, length, opts) {
	        var o = [{
	          c: 0,
	          r: 0
	        }, {
	          t: "n",
	          v: 0
	        }, 0, 0];
	        if (opts.qpro && opts.vers != 20768) {
	          o[0].c = blob.read_shift(1);
	          o[3] = blob.read_shift(1);
	          o[0].r = blob.read_shift(2);
	          blob.l += 2;
	        } else if (opts.works) {
	          o[0].c = blob.read_shift(2);
	          o[0].r = blob.read_shift(2);
	          o[2] = blob.read_shift(2);
	        } else {
	          o[2] = blob.read_shift(1);
	          o[0].c = blob.read_shift(2);
	          o[0].r = blob.read_shift(2);
	        }
	        return o;
	      }
	      function get_wk1_fmt(cell) {
	        if (cell.z && fmt_is_date(cell.z)) {
	          return 240 | (LOTUS_DATE_FMTS.indexOf(cell.z) + 1 || 2);
	        }
	        return 255;
	      }
	      function parse_LABEL(blob, length, opts) {
	        var tgt = blob.l + length;
	        var o = parse_cell(blob, length, opts);
	        o[1].t = "s";
	        if ((opts.vers & 65534) == 20768) {
	          blob.l++;
	          var len = blob.read_shift(1);
	          o[1].v = blob.read_shift(len, "utf8");
	          return o;
	        }
	        if (opts.qpro) blob.l++;
	        o[1].v = blob.read_shift(tgt - blob.l, "cstr");
	        return o;
	      }
	      function write_LABEL(R, C, s) {
	        var o = new_buf(7 + s.length);
	        o.write_shift(1, 255);
	        o.write_shift(2, C);
	        o.write_shift(2, R);
	        o.write_shift(1, 39);
	        for (var i = 0; i < o.length; ++i) {
	          var cc = s.charCodeAt(i);
	          o.write_shift(1, cc >= 128 ? 95 : cc);
	        }
	        o.write_shift(1, 0);
	        return o;
	      }
	      function parse_STRING(blob, length, opts) {
	        var tgt = blob.l + length;
	        var o = parse_cell(blob, length, opts);
	        o[1].t = "s";
	        if (opts.vers == 20768) {
	          var len = blob.read_shift(1);
	          o[1].v = blob.read_shift(len, "utf8");
	          return o;
	        }
	        o[1].v = blob.read_shift(tgt - blob.l, "cstr");
	        return o;
	      }
	      function parse_INTEGER(blob, length, opts) {
	        var o = parse_cell(blob, length, opts);
	        o[1].v = blob.read_shift(2, "i");
	        return o;
	      }
	      function write_INTEGER(R, C, cell) {
	        var o = new_buf(7);
	        o.write_shift(1, get_wk1_fmt(cell));
	        o.write_shift(2, C);
	        o.write_shift(2, R);
	        o.write_shift(2, cell.v, "i");
	        return o;
	      }
	      function parse_NUMBER(blob, length, opts) {
	        var o = parse_cell(blob, length, opts);
	        o[1].v = blob.read_shift(8, "f");
	        return o;
	      }
	      function write_NUMBER(R, C, cell) {
	        var o = new_buf(13);
	        o.write_shift(1, get_wk1_fmt(cell));
	        o.write_shift(2, C);
	        o.write_shift(2, R);
	        o.write_shift(8, cell.v, "f");
	        return o;
	      }
	      function parse_FORMULA(blob, length, opts) {
	        var tgt = blob.l + length;
	        var o = parse_cell(blob, length, opts);
	        o[1].v = blob.read_shift(8, "f");
	        if (opts.qpro) blob.l = tgt; else {
	          var flen = blob.read_shift(2);
	          wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
	          blob.l += flen;
	        }
	        return o;
	      }
	      function wk1_parse_rc(B, V, col) {
	        var rel = V & 32768;
	        V &= ~32768;
	        V = (rel ? B : 0) + (V >= 8192 ? V - 16384 : V);
	        return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
	      }
	      var FuncTab = {
	        31: ["NA", 0],
	        33: ["ABS", 1],
	        34: ["TRUNC", 1],
	        35: ["SQRT", 1],
	        36: ["LOG", 1],
	        37: ["LN", 1],
	        38: ["PI", 0],
	        39: ["SIN", 1],
	        40: ["COS", 1],
	        41: ["TAN", 1],
	        42: ["ATAN2", 2],
	        43: ["ATAN", 1],
	        44: ["ASIN", 1],
	        45: ["ACOS", 1],
	        46: ["EXP", 1],
	        47: ["MOD", 2],
	        49: ["ISNA", 1],
	        50: ["ISERR", 1],
	        51: ["FALSE", 0],
	        52: ["TRUE", 0],
	        53: ["RAND", 0],
	        54: ["DATE", 3],
	        63: ["ROUND", 2],
	        64: ["TIME", 3],
	        68: ["ISNUMBER", 1],
	        69: ["ISTEXT", 1],
	        70: ["LEN", 1],
	        71: ["VALUE", 1],
	        73: ["MID", 3],
	        74: ["CHAR", 1],
	        80: ["SUM", 69],
	        81: ["AVERAGEA", 69],
	        82: ["COUNTA", 69],
	        83: ["MINA", 69],
	        84: ["MAXA", 69],
	        102: ["UPPER", 1],
	        103: ["LOWER", 1],
	        107: ["PROPER", 1],
	        109: ["TRIM", 1],
	        111: ["T", 1]
	      };
	      var BinOpTab = ["", "", "", "", "", "", "", "", "", "+", "-", "*", "/", "^", "=", "<>", "<=", ">=", "<", ">", "", "", "", "", "&", "", "", "", "", "", "", ""];
	      function wk1_fmla_to_csf(blob, o) {
	        prep_blob(blob, 0);
	        var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
	        while (blob.l < blob.length) {
	          var cc = blob[blob.l++];
	          switch (cc) {
	            case 0:
	              out.push(blob.read_shift(8, "f"));
	              break;
	            case 1:
	              {
	                C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
	                R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
	                out.push(C + R);
	              }
	              break;
	            case 2:
	              {
	                var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
	                var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
	                C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
	                R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
	                out.push(c + r + ":" + C + R);
	              }
	              break;
	            case 3:
	              if (blob.l < blob.length) {
	                console.error("WK1 premature formula end");
	                return;
	              }
	              break;
	            case 4:
	              out.push("(" + out.pop() + ")");
	              break;
	            case 5:
	              out.push(blob.read_shift(2));
	              break;
	            case 6:
	              {
	                var Z = "";
	                while (cc = blob[blob.l++]) Z += String.fromCharCode(cc);
	                out.push("\"" + Z.replace(/"/g, "\"\"") + "\"");
	              }
	              break;
	            case 8:
	              out.push("-" + out.pop());
	              break;
	            case 23:
	              out.push("+" + out.pop());
	              break;
	            case 22:
	              out.push("NOT(" + out.pop() + ")");
	              break;
	            case 20:
	            case 21:
	              {
	                argR = out.pop();
	                argL = out.pop();
	                out.push(["AND", "OR"][cc - 20] + "(" + argL + "," + argR + ")");
	              }
	              break;
	            default:
	              if (cc < 32 && BinOpTab[cc]) {
	                argR = out.pop();
	                argL = out.pop();
	                out.push(argL + BinOpTab[cc] + argR);
	              } else if (FuncTab[cc]) {
	                argc = FuncTab[cc][1];
	                if (argc == 69) argc = blob[blob.l++];
	                if (argc > out.length) {
	                  console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
	                  return;
	                }
	                var args = out.slice(-argc);
	                out.length -= argc;
	                out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
	              } else if (cc <= 7) return console.error("WK1 invalid opcode " + cc.toString(16)); else if (cc <= 24) return console.error("WK1 unsupported op " + cc.toString(16)); else if (cc <= 30) return console.error("WK1 invalid opcode " + cc.toString(16)); else if (cc <= 115) return console.error("WK1 unsupported function opcode " + cc.toString(16)); else return console.error("WK1 unrecognized opcode " + cc.toString(16));
	          }
	        }
	        if (out.length == 1) o[1].f = "" + out[0]; else console.error("WK1 bad formula parse |" + out.join("|") + "|");
	      }
	      function parse_cell_3(blob) {
	        var o = [{
	          c: 0,
	          r: 0
	        }, {
	          t: "n",
	          v: 0
	        }, 0];
	        o[0].r = blob.read_shift(2);
	        o[3] = blob[blob.l++];
	        o[0].c = blob[blob.l++];
	        return o;
	      }
	      function parse_LABEL_16(blob, length) {
	        var o = parse_cell_3(blob);
	        o[1].t = "s";
	        o[1].v = blob.read_shift(length - 4, "cstr");
	        return o;
	      }
	      function write_LABEL_16(R, C, wsidx, s) {
	        var o = new_buf(6 + s.length);
	        o.write_shift(2, R);
	        o.write_shift(1, wsidx);
	        o.write_shift(1, C);
	        o.write_shift(1, 39);
	        for (var i = 0; i < s.length; ++i) {
	          var cc = s.charCodeAt(i);
	          o.write_shift(1, cc >= 128 ? 95 : cc);
	        }
	        o.write_shift(1, 0);
	        return o;
	      }
	      function parse_NUMBER_18(blob, length) {
	        var o = parse_cell_3(blob);
	        o[1].v = blob.read_shift(2);
	        var v = o[1].v >> 1;
	        if (o[1].v & 1) {
	          switch (v & 7) {
	            case 0:
	              v = (v >> 3) * 5000;
	              break;
	            case 1:
	              v = (v >> 3) * 500;
	              break;
	            case 2:
	              v = (v >> 3) / 20;
	              break;
	            case 3:
	              v = (v >> 3) / 200;
	              break;
	            case 4:
	              v = (v >> 3) / 2000;
	              break;
	            case 5:
	              v = (v >> 3) / 20000;
	              break;
	            case 6:
	              v = (v >> 3) / 16;
	              break;
	            case 7:
	              v = (v >> 3) / 64;
	              break;
	          }
	        }
	        o[1].v = v;
	        return o;
	      }
	      function parse_NUMBER_17(blob, length) {
	        var o = parse_cell_3(blob);
	        var v1 = blob.read_shift(4);
	        var v2 = blob.read_shift(4);
	        var e = blob.read_shift(2);
	        if (e == 65535) {
	          if (v1 === 0 && v2 === 3221225472) {
	            o[1].t = "e";
	            o[1].v = 15;
	          } else if (v1 === 0 && v2 === 3489660928) {
	            o[1].t = "e";
	            o[1].v = 42;
	          } else o[1].v = 0;
	          return o;
	        }
	        var s = e & 32768;
	        e = (e & 32767) - 16446;
	        o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));
	        return o;
	      }
	      function write_NUMBER_17(R, C, wsidx, v) {
	        var o = new_buf(14);
	        o.write_shift(2, R);
	        o.write_shift(1, wsidx);
	        o.write_shift(1, C);
	        if (v == 0) {
	          o.write_shift(4, 0);
	          o.write_shift(4, 0);
	          o.write_shift(2, 65535);
	          return o;
	        }
	        var s = 0, e = 0, v1 = 0, v2 = 0;
	        if (v < 0) {
	          s = 1;
	          v = -v;
	        }
	        e = Math.log2(v) | 0;
	        v /= Math.pow(2, e - 31);
	        v2 = v >>> 0;
	        if ((v2 & 2147483648) == 0) {
	          v /= 2;
	          ++e;
	          v2 = v >>> 0;
	        }
	        v -= v2;
	        v2 |= 2147483648;
	        v2 >>>= 0;
	        v *= Math.pow(2, 32);
	        v1 = v >>> 0;
	        o.write_shift(4, v1);
	        o.write_shift(4, v2);
	        e += 16383 + (s ? 32768 : 0);
	        o.write_shift(2, e);
	        return o;
	      }
	      function parse_FORMULA_19(blob, length) {
	        var o = parse_NUMBER_17(blob);
	        blob.l += length - 14;
	        return o;
	      }
	      function parse_NUMBER_25(blob, length) {
	        var o = parse_cell_3(blob);
	        var v1 = blob.read_shift(4);
	        o[1].v = v1 >> 6;
	        return o;
	      }
	      function parse_NUMBER_27(blob, length) {
	        var o = parse_cell_3(blob);
	        var v1 = blob.read_shift(8, "f");
	        o[1].v = v1;
	        return o;
	      }
	      function parse_FORMULA_28(blob, length) {
	        var o = parse_NUMBER_27(blob);
	        blob.l += length - 12;
	        return o;
	      }
	      function parse_SHEETNAMECS(blob, length) {
	        return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
	      }
	      function parse_SHEETNAMELP(blob, length) {
	        var len = blob[blob.l++];
	        if (len > length - 1) len = length - 1;
	        var o = "";
	        while (o.length < len) o += String.fromCharCode(blob[blob.l++]);
	        return o;
	      }
	      function parse_SHEETINFOQP(blob, length, opts) {
	        if (!opts.qpro || length < 21) return;
	        var id = blob.read_shift(1);
	        blob.l += 17;
	        blob.l += 1;
	        blob.l += 2;
	        var nm = blob.read_shift(length - 21, "cstr");
	        return [id, nm];
	      }
	      function parse_XFORMAT(blob, length) {
	        var o = {}, tgt = blob.l + length;
	        while (blob.l < tgt) {
	          var dt = blob.read_shift(2);
	          if (dt == 14000) {
	            o[dt] = [0, ""];
	            o[dt][0] = blob.read_shift(2);
	            while (blob[blob.l]) {
	              o[dt][1] += String.fromCharCode(blob[blob.l]);
	              blob.l++;
	            }
	            blob.l++;
	          }
	        }
	        return o;
	      }
	      function write_XFORMAT_SHEETNAME(name, wsidx) {
	        var out = new_buf(5 + name.length);
	        out.write_shift(2, 14000);
	        out.write_shift(2, wsidx);
	        for (var i = 0; i < name.length; ++i) {
	          var cc = name.charCodeAt(i);
	          out[out.l++] = cc > 127 ? 95 : cc;
	        }
	        out[out.l++] = 0;
	        return out;
	      }
	      var WK1Enum = {
	        0: {
	          n: "BOF",
	          f: parseuint16
	        },
	        1: {
	          n: "EOF"
	        },
	        2: {
	          n: "CALCMODE"
	        },
	        3: {
	          n: "CALCORDER"
	        },
	        4: {
	          n: "SPLIT"
	        },
	        5: {
	          n: "SYNC"
	        },
	        6: {
	          n: "RANGE",
	          f: parse_RANGE
	        },
	        7: {
	          n: "WINDOW1"
	        },
	        8: {
	          n: "COLW1"
	        },
	        9: {
	          n: "WINTWO"
	        },
	        10: {
	          n: "COLW2"
	        },
	        11: {
	          n: "NAME"
	        },
	        12: {
	          n: "BLANK"
	        },
	        13: {
	          n: "INTEGER",
	          f: parse_INTEGER
	        },
	        14: {
	          n: "NUMBER",
	          f: parse_NUMBER
	        },
	        15: {
	          n: "LABEL",
	          f: parse_LABEL
	        },
	        16: {
	          n: "FORMULA",
	          f: parse_FORMULA
	        },
	        24: {
	          n: "TABLE"
	        },
	        25: {
	          n: "ORANGE"
	        },
	        26: {
	          n: "PRANGE"
	        },
	        27: {
	          n: "SRANGE"
	        },
	        28: {
	          n: "FRANGE"
	        },
	        29: {
	          n: "KRANGE1"
	        },
	        32: {
	          n: "HRANGE"
	        },
	        35: {
	          n: "KRANGE2"
	        },
	        36: {
	          n: "PROTEC"
	        },
	        37: {
	          n: "FOOTER"
	        },
	        38: {
	          n: "HEADER"
	        },
	        39: {
	          n: "SETUP"
	        },
	        40: {
	          n: "MARGINS"
	        },
	        41: {
	          n: "LABELFMT"
	        },
	        42: {
	          n: "TITLES"
	        },
	        43: {
	          n: "SHEETJS"
	        },
	        45: {
	          n: "GRAPH"
	        },
	        46: {
	          n: "NGRAPH"
	        },
	        47: {
	          n: "CALCCOUNT"
	        },
	        48: {
	          n: "UNFORMATTED"
	        },
	        49: {
	          n: "CURSORW12"
	        },
	        50: {
	          n: "WINDOW"
	        },
	        51: {
	          n: "STRING",
	          f: parse_STRING
	        },
	        55: {
	          n: "PASSWORD"
	        },
	        56: {
	          n: "LOCKED"
	        },
	        60: {
	          n: "QUERY"
	        },
	        61: {
	          n: "QUERYNAME"
	        },
	        62: {
	          n: "PRINT"
	        },
	        63: {
	          n: "PRINTNAME"
	        },
	        64: {
	          n: "GRAPH2"
	        },
	        65: {
	          n: "GRAPHNAME"
	        },
	        66: {
	          n: "ZOOM"
	        },
	        67: {
	          n: "SYMSPLIT"
	        },
	        68: {
	          n: "NSROWS"
	        },
	        69: {
	          n: "NSCOLS"
	        },
	        70: {
	          n: "RULER"
	        },
	        71: {
	          n: "NNAME"
	        },
	        72: {
	          n: "ACOMM"
	        },
	        73: {
	          n: "AMACRO"
	        },
	        74: {
	          n: "PARSE"
	        },
	        102: {
	          n: "PRANGES??"
	        },
	        103: {
	          n: "RRANGES??"
	        },
	        104: {
	          n: "FNAME??"
	        },
	        105: {
	          n: "MRANGES??"
	        },
	        204: {
	          n: "SHEETNAMECS",
	          f: parse_SHEETNAMECS
	        },
	        222: {
	          n: "SHEETNAMELP",
	          f: parse_SHEETNAMELP
	        },
	        255: {
	          n: "BOF",
	          f: parseuint16
	        },
	        21506: {
	          n: "WKSNF",
	          f: parseuint16
	        },
	        65535: {
	          n: ""
	        }
	      };
	      var WK3Enum = {
	        0: {
	          n: "BOF"
	        },
	        1: {
	          n: "EOF"
	        },
	        2: {
	          n: "PASSWORD"
	        },
	        3: {
	          n: "CALCSET"
	        },
	        4: {
	          n: "WINDOWSET"
	        },
	        5: {
	          n: "SHEETCELLPTR"
	        },
	        6: {
	          n: "SHEETLAYOUT"
	        },
	        7: {
	          n: "COLUMNWIDTH"
	        },
	        8: {
	          n: "HIDDENCOLUMN"
	        },
	        9: {
	          n: "USERRANGE"
	        },
	        10: {
	          n: "SYSTEMRANGE"
	        },
	        11: {
	          n: "ZEROFORCE"
	        },
	        12: {
	          n: "SORTKEYDIR"
	        },
	        13: {
	          n: "FILESEAL"
	        },
	        14: {
	          n: "DATAFILLNUMS"
	        },
	        15: {
	          n: "PRINTMAIN"
	        },
	        16: {
	          n: "PRINTSTRING"
	        },
	        17: {
	          n: "GRAPHMAIN"
	        },
	        18: {
	          n: "GRAPHSTRING"
	        },
	        19: {
	          n: "??"
	        },
	        20: {
	          n: "ERRCELL"
	        },
	        21: {
	          n: "NACELL"
	        },
	        22: {
	          n: "LABEL16",
	          f: parse_LABEL_16
	        },
	        23: {
	          n: "NUMBER17",
	          f: parse_NUMBER_17
	        },
	        24: {
	          n: "NUMBER18",
	          f: parse_NUMBER_18
	        },
	        25: {
	          n: "FORMULA19",
	          f: parse_FORMULA_19
	        },
	        26: {
	          n: "FORMULA1A"
	        },
	        27: {
	          n: "XFORMAT",
	          f: parse_XFORMAT
	        },
	        28: {
	          n: "DTLABELMISC"
	        },
	        29: {
	          n: "DTLABELCELL"
	        },
	        30: {
	          n: "GRAPHWINDOW"
	        },
	        31: {
	          n: "CPA"
	        },
	        32: {
	          n: "LPLAUTO"
	        },
	        33: {
	          n: "QUERY"
	        },
	        34: {
	          n: "HIDDENSHEET"
	        },
	        35: {
	          n: "??"
	        },
	        37: {
	          n: "NUMBER25",
	          f: parse_NUMBER_25
	        },
	        38: {
	          n: "??"
	        },
	        39: {
	          n: "NUMBER27",
	          f: parse_NUMBER_27
	        },
	        40: {
	          n: "FORMULA28",
	          f: parse_FORMULA_28
	        },
	        142: {
	          n: "??"
	        },
	        147: {
	          n: "??"
	        },
	        150: {
	          n: "??"
	        },
	        151: {
	          n: "??"
	        },
	        152: {
	          n: "??"
	        },
	        153: {
	          n: "??"
	        },
	        154: {
	          n: "??"
	        },
	        155: {
	          n: "??"
	        },
	        156: {
	          n: "??"
	        },
	        163: {
	          n: "??"
	        },
	        174: {
	          n: "??"
	        },
	        175: {
	          n: "??"
	        },
	        176: {
	          n: "??"
	        },
	        177: {
	          n: "??"
	        },
	        184: {
	          n: "??"
	        },
	        185: {
	          n: "??"
	        },
	        186: {
	          n: "??"
	        },
	        187: {
	          n: "??"
	        },
	        188: {
	          n: "??"
	        },
	        195: {
	          n: "??"
	        },
	        201: {
	          n: "??"
	        },
	        204: {
	          n: "SHEETNAMECS",
	          f: parse_SHEETNAMECS
	        },
	        205: {
	          n: "??"
	        },
	        206: {
	          n: "??"
	        },
	        207: {
	          n: "??"
	        },
	        208: {
	          n: "??"
	        },
	        256: {
	          n: "??"
	        },
	        259: {
	          n: "??"
	        },
	        260: {
	          n: "??"
	        },
	        261: {
	          n: "??"
	        },
	        262: {
	          n: "??"
	        },
	        263: {
	          n: "??"
	        },
	        265: {
	          n: "??"
	        },
	        266: {
	          n: "??"
	        },
	        267: {
	          n: "??"
	        },
	        268: {
	          n: "??"
	        },
	        270: {
	          n: "??"
	        },
	        271: {
	          n: "??"
	        },
	        384: {
	          n: "??"
	        },
	        389: {
	          n: "??"
	        },
	        390: {
	          n: "??"
	        },
	        393: {
	          n: "??"
	        },
	        396: {
	          n: "??"
	        },
	        512: {
	          n: "??"
	        },
	        514: {
	          n: "??"
	        },
	        513: {
	          n: "??"
	        },
	        516: {
	          n: "??"
	        },
	        517: {
	          n: "??"
	        },
	        640: {
	          n: "??"
	        },
	        641: {
	          n: "??"
	        },
	        642: {
	          n: "??"
	        },
	        643: {
	          n: "??"
	        },
	        644: {
	          n: "??"
	        },
	        645: {
	          n: "??"
	        },
	        646: {
	          n: "??"
	        },
	        647: {
	          n: "??"
	        },
	        648: {
	          n: "??"
	        },
	        658: {
	          n: "??"
	        },
	        659: {
	          n: "??"
	        },
	        660: {
	          n: "??"
	        },
	        661: {
	          n: "??"
	        },
	        662: {
	          n: "??"
	        },
	        665: {
	          n: "??"
	        },
	        666: {
	          n: "??"
	        },
	        768: {
	          n: "??"
	        },
	        772: {
	          n: "??"
	        },
	        1537: {
	          n: "SHEETINFOQP",
	          f: parse_SHEETINFOQP
	        },
	        1600: {
	          n: "??"
	        },
	        1602: {
	          n: "??"
	        },
	        1793: {
	          n: "??"
	        },
	        1794: {
	          n: "??"
	        },
	        1795: {
	          n: "??"
	        },
	        1796: {
	          n: "??"
	        },
	        1920: {
	          n: "??"
	        },
	        2048: {
	          n: "??"
	        },
	        2049: {
	          n: "??"
	        },
	        2052: {
	          n: "??"
	        },
	        2688: {
	          n: "??"
	        },
	        10998: {
	          n: "??"
	        },
	        12849: {
	          n: "??"
	        },
	        28233: {
	          n: "??"
	        },
	        28484: {
	          n: "??"
	        },
	        65535: {
	          n: ""
	        }
	      };
	      var QPWNFTable = {
	        5: "dd-mmm-yy",
	        6: "dd-mmm",
	        7: "mmm-yy",
	        8: "mm/dd/yy",
	        10: "hh:mm:ss AM/PM",
	        11: "hh:mm AM/PM",
	        14: "dd-mmm-yyyy",
	        15: "mmm-yyyy",
	        34: "0.00",
	        50: "0.00;[Red]0.00",
	        66: "0.00;(0.00)",
	        82: "0.00;[Red](0.00)",
	        162: "\"$\"#,##0;\\(\"$\"#,##0\\)"
	      };
	      function qpw_to_workbook_buf(d, opts) {
	        prep_blob(d, 0);
	        var o = opts || ({});
	        var s = {};
	        if (o.dense) s["!data"] = [];
	        var SST = [], sname = "";
	        var range = {
	          s: {
	            r: -1,
	            c: -1
	          },
	          e: {
	            r: -1,
	            c: -1
	          }
	        };
	        var cnt = 0, type = 0, C = 0, R = 0;
	        var wb = {
	          SheetNames: [],
	          Sheets: {}
	        };
	        var FMTS = [];
	        outer: while (d.l < d.length) {
	          var RT = d.read_shift(2), length = d.read_shift(2);
	          var p = d.slice(d.l, d.l + length);
	          prep_blob(p, 0);
	          switch (RT) {
	            case 1:
	              if (p.read_shift(4) != 962023505) throw "Bad QPW9 BOF!";
	              break;
	            case 2:
	              break outer;
	            case 8:
	              break;
	            case 10:
	              {
	                var fcnt = p.read_shift(4);
	                var step = (p.length - p.l) / fcnt | 0;
	                for (var ifmt = 0; ifmt < fcnt; ++ifmt) {
	                  var end = p.l + step;
	                  var fmt = {};
	                  p.l += 2;
	                  fmt.numFmtId = p.read_shift(2);
	                  if (QPWNFTable[fmt.numFmtId]) fmt.z = QPWNFTable[fmt.numFmtId];
	                  p.l = end;
	                  FMTS.push(fmt);
	                }
	              }
	              break;
	            case 1025:
	              break;
	            case 1026:
	              break;
	            case 1031:
	              {
	                p.l += 12;
	                while (p.l < p.length) {
	                  cnt = p.read_shift(2);
	                  type = p.read_shift(1);
	                  SST.push(p.read_shift(cnt, "cstr"));
	                }
	              }
	              break;
	            case 1032:
	              break;
	            case 1537:
	              {
	                var sidx = p.read_shift(2);
	                s = {};
	                if (o.dense) s["!data"] = [];
	                range.s.c = p.read_shift(2);
	                range.e.c = p.read_shift(2);
	                range.s.r = p.read_shift(4);
	                range.e.r = p.read_shift(4);
	                p.l += 4;
	                if (p.l + 2 < p.length) {
	                  cnt = p.read_shift(2);
	                  type = p.read_shift(1);
	                  sname = cnt == 0 ? "" : p.read_shift(cnt, "cstr");
	                }
	                if (!sname) sname = encode_col(sidx);
	              }
	              break;
	            case 1538:
	              {
	                if (range.s.c > 255 || range.s.r > 999999) break;
	                if (range.e.c < range.s.c) range.e.c = range.s.c;
	                if (range.e.r < range.s.r) range.e.r = range.s.r;
	                s["!ref"] = encode_range(range);
	                book_append_sheet(wb, s, sname);
	              }
	              break;
	            case 2561:
	              {
	                C = p.read_shift(2);
	                if (range.e.c < C) range.e.c = C;
	                if (range.s.c > C) range.s.c = C;
	                R = p.read_shift(4);
	                if (range.s.r > R) range.s.r = R;
	                R = p.read_shift(4);
	                if (range.e.r < R) range.e.r = R;
	              }
	              break;
	            case 3073:
	              {
	                (R = p.read_shift(4), cnt = p.read_shift(4));
	                if (range.s.r > R) range.s.r = R;
	                if (range.e.r < R + cnt - 1) range.e.r = R + cnt - 1;
	                var CC = encode_col(C);
	                while (p.l < p.length) {
	                  var cell = {
	                    t: "z"
	                  };
	                  var flags = p.read_shift(1), fmtidx = -1;
	                  if (flags & 128) fmtidx = p.read_shift(2);
	                  var mul = flags & 64 ? p.read_shift(2) - 1 : 0;
	                  switch (flags & 31) {
	                    case 0:
	                      break;
	                    case 1:
	                      break;
	                    case 2:
	                      cell = {
	                        t: "n",
	                        v: p.read_shift(2)
	                      };
	                      break;
	                    case 3:
	                      cell = {
	                        t: "n",
	                        v: p.read_shift(2, "i")
	                      };
	                      break;
	                    case 4:
	                      cell = {
	                        t: "n",
	                        v: parse_RkNumber(p)
	                      };
	                      break;
	                    case 5:
	                      cell = {
	                        t: "n",
	                        v: p.read_shift(8, "f")
	                      };
	                      break;
	                    case 7:
	                      cell = {
	                        t: "s",
	                        v: SST[type = p.read_shift(4) - 1]
	                      };
	                      break;
	                    case 8:
	                      cell = {
	                        t: "n",
	                        v: p.read_shift(8, "f")
	                      };
	                      p.l += 2;
	                      p.l += 4;
	                      break;
	                    default:
	                      throw "Unrecognized QPW cell type " + (flags & 31);
	                  }
	                  if (fmtidx != -1 && (FMTS[fmtidx - 1] || ({})).z) cell.z = FMTS[fmtidx - 1].z;
	                  var delta = 0;
	                  if (flags & 32) switch (flags & 31) {
	                    case 2:
	                      delta = p.read_shift(2);
	                      break;
	                    case 3:
	                      delta = p.read_shift(2, "i");
	                      break;
	                    case 7:
	                      delta = p.read_shift(2);
	                      break;
	                    default:
	                      throw "Unsupported delta for QPW cell type " + (flags & 31);
	                  }
	                  if (!(!o.sheetStubs && cell.t == "z")) {
	                    var newcell = dup(cell);
	                    if (cell.t == "n" && cell.z && fmt_is_date(cell.z) && o.cellDates) {
	                      newcell.v = numdate(cell.v);
	                      newcell.t = typeof newcell.v == "number" ? "n" : "d";
	                    }
	                    if (s["!data"] != null) {
	                      if (!s["!data"][R]) s["!data"][R] = [];
	                      s["!data"][R][C] = newcell;
	                    } else s[CC + encode_row(R)] = newcell;
	                  }
	                  ++R;
	                  --cnt;
	                  while (mul-- > 0 && cnt >= 0) {
	                    if (flags & 32) switch (flags & 31) {
	                      case 2:
	                        cell = {
	                          t: "n",
	                          v: cell.v + delta & 65535
	                        };
	                        break;
	                      case 3:
	                        cell = {
	                          t: "n",
	                          v: cell.v + delta & 65535
	                        };
	                        if (cell.v > 32767) cell.v -= 65536;
	                        break;
	                      case 7:
	                        cell = {
	                          t: "s",
	                          v: SST[type = type + delta >>> 0]
	                        };
	                        break;
	                      default:
	                        throw "Cannot apply delta for QPW cell type " + (flags & 31);
	                    } else switch (flags & 31) {
	                      case 1:
	                        cell = {
	                          t: "z"
	                        };
	                        break;
	                      case 2:
	                        cell = {
	                          t: "n",
	                          v: p.read_shift(2)
	                        };
	                        break;
	                      case 7:
	                        cell = {
	                          t: "s",
	                          v: SST[type = p.read_shift(4) - 1]
	                        };
	                        break;
	                      default:
	                        throw "Cannot apply repeat for QPW cell type " + (flags & 31);
	                    }
	                    if (!(!o.sheetStubs && cell.t == "z")) {
	                      if (s["!data"] != null) {
	                        if (!s["!data"][R]) s["!data"][R] = [];
	                        s["!data"][R][C] = cell;
	                      } else s[CC + encode_row(R)] = cell;
	                    }
	                    ++R;
	                    --cnt;
	                  }
	                }
	              }
	              break;
	          }
	          d.l += length;
	        }
	        return wb;
	      }
	      return {
	        sheet_to_wk1: sheet_to_wk1,
	        book_to_wk3: book_to_wk3,
	        to_workbook: lotus_to_workbook
	      };
	    })();
	    function parse_rpr(rpr) {
	      var font = {}, m = rpr.match(tagregex), i = 0;
	      var pass = false;
	      if (m) for (; i != m.length; ++i) {
	        var y = parsexmltag(m[i]);
	        switch (y[0].replace(/\w*:/g, "")) {
	          case "<condense":
	            break;
	          case "<extend":
	            break;
	          case "<shadow":
	            if (!y.val) break;
	          case "<shadow>":
	          case "<shadow/>":
	            font.shadow = 1;
	            break;
	          case "</shadow>":
	            break;
	          case "<charset":
	            if (y.val == "1") break;
	            font.cp = CS2CP[parseInt(y.val, 10)];
	            break;
	          case "<outline":
	            if (!y.val) break;
	          case "<outline>":
	          case "<outline/>":
	            font.outline = 1;
	            break;
	          case "</outline>":
	            break;
	          case "<rFont":
	            font.name = y.val;
	            break;
	          case "<sz":
	            font.sz = y.val;
	            break;
	          case "<strike":
	            if (!y.val) break;
	          case "<strike>":
	          case "<strike/>":
	            font.strike = 1;
	            break;
	          case "</strike>":
	            break;
	          case "<u":
	            if (!y.val) break;
	            switch (y.val) {
	              case "double":
	                font.uval = "double";
	                break;
	              case "singleAccounting":
	                font.uval = "single-accounting";
	                break;
	              case "doubleAccounting":
	                font.uval = "double-accounting";
	                break;
	            }
	          case "<u>":
	          case "<u/>":
	            font.u = 1;
	            break;
	          case "</u>":
	            break;
	          case "<b":
	            if (y.val == "0") break;
	          case "<b>":
	          case "<b/>":
	            font.b = 1;
	            break;
	          case "</b>":
	            break;
	          case "<i":
	            if (y.val == "0") break;
	          case "<i>":
	          case "<i/>":
	            font.i = 1;
	            break;
	          case "</i>":
	            break;
	          case "<color":
	            if (y.rgb) font.color = y.rgb.slice(2, 8);
	            break;
	          case "<color>":
	          case "<color/>":
	          case "</color>":
	            break;
	          case "<family":
	            font.family = y.val;
	            break;
	          case "<family>":
	          case "<family/>":
	          case "</family>":
	            break;
	          case "<vertAlign":
	            font.valign = y.val;
	            break;
	          case "<vertAlign>":
	          case "<vertAlign/>":
	          case "</vertAlign>":
	            break;
	          case "<scheme":
	            break;
	          case "<scheme>":
	          case "<scheme/>":
	          case "</scheme>":
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error("Unrecognized rich format " + y[0]);
	        }
	      }
	      return font;
	    }
	    var parse_rs = (function () {
	      var tregex = matchtag("t"), rpregex = matchtag("rPr");
	      function parse_r(r) {
	        var t = r.match(tregex);
	        if (!t) return {
	          t: "s",
	          v: ""
	        };
	        var o = {
	          t: "s",
	          v: unescapexml(t[1])
	        };
	        var rpr = r.match(rpregex);
	        if (rpr) o.s = parse_rpr(rpr[1]);
	        return o;
	      }
	      var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
	      return function parse_rs(rs) {
	        return rs.replace(rregex, "").split(rend).map(parse_r).filter(function (r) {
	          return r.v;
	        });
	      };
	    })();
	    var rs_to_html = (function parse_rs_factory() {
	      var nlregex = /(\r\n|\n)/g;
	      function parse_rpr2(font, intro, outro) {
	        var style = [];
	        if (font.u) style.push("text-decoration: underline;");
	        if (font.uval) style.push("text-underline-style:" + font.uval + ";");
	        if (font.sz) style.push("font-size:" + font.sz + "pt;");
	        if (font.outline) style.push("text-effect: outline;");
	        if (font.shadow) style.push("text-shadow: auto;");
	        intro.push("<span style=\"" + style.join("") + "\">");
	        if (font.b) {
	          intro.push("<b>");
	          outro.push("</b>");
	        }
	        if (font.i) {
	          intro.push("<i>");
	          outro.push("</i>");
	        }
	        if (font.strike) {
	          intro.push("<s>");
	          outro.push("</s>");
	        }
	        var align = font.valign || "";
	        if (align == "superscript" || align == "super") align = "sup"; else if (align == "subscript") align = "sub";
	        if (align != "") {
	          intro.push("<" + align + ">");
	          outro.push("</" + align + ">");
	        }
	        outro.push("</span>");
	        return font;
	      }
	      function r_to_html(r) {
	        var terms = [[], r.v, []];
	        if (!r.v) return "";
	        if (r.s) parse_rpr2(r.s, terms[0], terms[2]);
	        return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
	      }
	      return function parse_rs(rs) {
	        return rs.map(r_to_html).join("");
	      };
	    })();
	    var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r\b[^>]*>/;
	    var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
	    function parse_si(x, opts) {
	      var html = opts ? opts.cellHTML : true;
	      var z = {};
	      if (!x) return {
	        t: ""
	      };
	      if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
	        z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""), true);
	        z.r = utf8read(x);
	        if (html) z.h = escapehtml(z.t);
	      } else if (x.match(sirregex)) {
	        z.r = utf8read(x);
	        z.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")), true);
	        if (html) z.h = rs_to_html(parse_rs(z.r));
	      }
	      return z;
	    }
	    var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
	    var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
	    var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
	    function parse_sst_xml(data, opts) {
	      var s = [], ss = "";
	      if (!data) return s;
	      var sst = data.match(sstr0);
	      if (sst) {
	        ss = sst[2].replace(sstr1, "").split(sstr2);
	        for (var i = 0; i != ss.length; ++i) {
	          var o = parse_si(ss[i].trim(), opts);
	          if (o != null) s[s.length] = o;
	        }
	        sst = parsexmltag(sst[1]);
	        s.Count = sst.count;
	        s.Unique = sst.uniqueCount;
	      }
	      return s;
	    }
	    var straywsregex = /^\s|\s$|[\t\n\r]/;
	    function write_sst_xml(sst, opts) {
	      if (!opts.bookSST) return "";
	      var o = [XML_HEADER];
	      o[o.length] = writextag("sst", null, {
	        xmlns: XMLNS_main[0],
	        count: sst.Count,
	        uniqueCount: sst.Unique
	      });
	      for (var i = 0; i != sst.length; ++i) {
	        if (sst[i] == null) continue;
	        var s = sst[i];
	        var sitag = "<si>";
	        if (s.r) sitag += s.r; else {
	          sitag += "<t";
	          if (!s.t) s.t = "";
	          if (typeof s.t !== "string") s.t = String(s.t);
	          if (s.t.match(straywsregex)) sitag += " xml:space=\"preserve\"";
	          sitag += ">" + escapexml(s.t) + "</t>";
	        }
	        sitag += "</si>";
	        o[o.length] = sitag;
	      }
	      if (o.length > 2) {
	        o[o.length] = "</sst>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    function parse_BrtBeginSst(data) {
	      return [data.read_shift(4), data.read_shift(4)];
	    }
	    function parse_sst_bin(data, opts) {
	      var s = [];
	      var pass = false;
	      recordhopper(data, function hopper_sst(val, R, RT) {
	        switch (RT) {
	          case 159:
	            s.Count = val[0];
	            s.Unique = val[1];
	            break;
	          case 19:
	            s.push(val);
	            break;
	          case 160:
	            return true;
	          case 35:
	            pass = true;
	            break;
	          case 36:
	            pass = false;
	            break;
	          default:
	            if (R.T) ;
	            if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      });
	      return s;
	    }
	    function write_BrtBeginSst(sst, o) {
	      if (!o) o = new_buf(8);
	      o.write_shift(4, sst.Count);
	      o.write_shift(4, sst.Unique);
	      return o;
	    }
	    var write_BrtSSTItem = write_RichStr;
	    function write_sst_bin(sst) {
	      var ba = buf_array();
	      write_record(ba, 159, write_BrtBeginSst(sst));
	      for (var i = 0; i < sst.length; ++i) write_record(ba, 19, write_BrtSSTItem(sst[i]));
	      write_record(ba, 160);
	      return ba.end();
	    }
	    function _JS2ANSI(str) {
	      if (typeof $cptable !== "undefined") return $cptable.utils.encode(current_ansi, str);
	      var o = [], oo = str.split("");
	      for (var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
	      return o;
	    }
	    function parse_CRYPTOVersion(blob, length) {
	      var o = {};
	      o.Major = blob.read_shift(2);
	      o.Minor = blob.read_shift(2);
	      if (length >= 4) blob.l += length - 4;
	      return o;
	    }
	    function parse_DataSpaceVersionInfo(blob) {
	      var o = {};
	      o.id = blob.read_shift(0, "lpp4");
	      o.R = parse_CRYPTOVersion(blob, 4);
	      o.U = parse_CRYPTOVersion(blob, 4);
	      o.W = parse_CRYPTOVersion(blob, 4);
	      return o;
	    }
	    function parse_DataSpaceMapEntry(blob) {
	      var len = blob.read_shift(4);
	      var end = blob.l + len - 4;
	      var o = {};
	      var cnt = blob.read_shift(4);
	      var comps = [];
	      while (cnt-- > 0) comps.push({
	        t: blob.read_shift(4),
	        v: blob.read_shift(0, "lpp4")
	      });
	      o.name = blob.read_shift(0, "lpp4");
	      o.comps = comps;
	      if (blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
	      return o;
	    }
	    function parse_DataSpaceMap(blob) {
	      var o = [];
	      blob.l += 4;
	      var cnt = blob.read_shift(4);
	      while (cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
	      return o;
	    }
	    function parse_DataSpaceDefinition(blob) {
	      var o = [];
	      blob.l += 4;
	      var cnt = blob.read_shift(4);
	      while (cnt-- > 0) o.push(blob.read_shift(0, "lpp4"));
	      return o;
	    }
	    function parse_TransformInfoHeader(blob) {
	      var o = {};
	      blob.read_shift(4);
	      blob.l += 4;
	      o.id = blob.read_shift(0, "lpp4");
	      o.name = blob.read_shift(0, "lpp4");
	      o.R = parse_CRYPTOVersion(blob, 4);
	      o.U = parse_CRYPTOVersion(blob, 4);
	      o.W = parse_CRYPTOVersion(blob, 4);
	      return o;
	    }
	    function parse_Primary(blob) {
	      var hdr = parse_TransformInfoHeader(blob);
	      hdr.ename = blob.read_shift(0, "8lpp4");
	      hdr.blksz = blob.read_shift(4);
	      hdr.cmode = blob.read_shift(4);
	      if (blob.read_shift(4) != 4) throw new Error("Bad !Primary record");
	      return hdr;
	    }
	    function parse_EncryptionHeader(blob, length) {
	      var tgt = blob.l + length;
	      var o = {};
	      o.Flags = blob.read_shift(4) & 63;
	      blob.l += 4;
	      o.AlgID = blob.read_shift(4);
	      var valid = false;
	      switch (o.AlgID) {
	        case 26126:
	        case 26127:
	        case 26128:
	          valid = o.Flags == 36;
	          break;
	        case 26625:
	          valid = o.Flags == 4;
	          break;
	        case 0:
	          valid = o.Flags == 16 || o.Flags == 4 || o.Flags == 36;
	          break;
	        default:
	          throw "Unrecognized encryption algorithm: " + o.AlgID;
	      }
	      if (!valid) throw new Error("Encryption Flags/AlgID mismatch");
	      o.AlgIDHash = blob.read_shift(4);
	      o.KeySize = blob.read_shift(4);
	      o.ProviderType = blob.read_shift(4);
	      blob.l += 8;
	      o.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
	      blob.l = tgt;
	      return o;
	    }
	    function parse_EncryptionVerifier(blob, length) {
	      var o = {}, tgt = blob.l + length;
	      blob.l += 4;
	      o.Salt = blob.slice(blob.l, blob.l + 16);
	      blob.l += 16;
	      o.Verifier = blob.slice(blob.l, blob.l + 16);
	      blob.l += 16;
	      blob.read_shift(4);
	      o.VerifierHash = blob.slice(blob.l, tgt);
	      blob.l = tgt;
	      return o;
	    }
	    function parse_EncryptionInfo(blob) {
	      var vers = parse_CRYPTOVersion(blob);
	      switch (vers.Minor) {
	        case 2:
	          return [vers.Minor, parse_EncInfoStd(blob)];
	        case 3:
	          return [vers.Minor, parse_EncInfoExt()];
	        case 4:
	          return [vers.Minor, parse_EncInfoAgl(blob)];
	      }
	      throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
	    }
	    function parse_EncInfoStd(blob) {
	      var flags = blob.read_shift(4);
	      if ((flags & 63) != 36) throw new Error("EncryptionInfo mismatch");
	      var sz = blob.read_shift(4);
	      var hdr = parse_EncryptionHeader(blob, sz);
	      var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
	      return {
	        t: "Std",
	        h: hdr,
	        v: verifier
	      };
	    }
	    function parse_EncInfoExt() {
	      throw new Error("File is password-protected: ECMA-376 Extensible");
	    }
	    function parse_EncInfoAgl(blob) {
	      var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
	      blob.l += 4;
	      var xml = blob.read_shift(blob.length - blob.l, "utf8");
	      var o = {};
	      xml.replace(tagregex, function xml_agile(x) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<?xml":
	            break;
	          case "<encryption":
	          case "</encryption>":
	            break;
	          case "<keyData":
	            KeyData.forEach(function (k) {
	              o[k] = y[k];
	            });
	            break;
	          case "<dataIntegrity":
	            o.encryptedHmacKey = y.encryptedHmacKey;
	            o.encryptedHmacValue = y.encryptedHmacValue;
	            break;
	          case "<keyEncryptors>":
	          case "<keyEncryptors":
	            o.encs = [];
	            break;
	          case "</keyEncryptors>":
	            break;
	          case "<keyEncryptor":
	            o.uri = y.uri;
	            break;
	          case "</keyEncryptor>":
	            break;
	          case "<encryptedKey":
	            o.encs.push(y);
	            break;
	          default:
	            throw y[0];
	        }
	      });
	      return o;
	    }
	    function parse_RC4CryptoHeader(blob, length) {
	      var o = {};
	      var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
	      length -= 4;
	      if (vers.Minor != 2) throw new Error("unrecognized minor version code: " + vers.Minor);
	      if (vers.Major > 4 || vers.Major < 2) throw new Error("unrecognized major version code: " + vers.Major);
	      o.Flags = blob.read_shift(4);
	      length -= 4;
	      var sz = blob.read_shift(4);
	      length -= 4;
	      o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
	      length -= sz;
	      o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
	      return o;
	    }
	    function parse_RC4Header(blob) {
	      var o = {};
	      var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
	      if (vers.Major != 1 || vers.Minor != 1) throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
	      o.Salt = blob.read_shift(16);
	      o.EncryptedVerifier = blob.read_shift(16);
	      o.EncryptedVerifierHash = blob.read_shift(16);
	      return o;
	    }
	    function crypto_CreatePasswordVerifier_Method1(Password) {
	      var Verifier = 0, PasswordArray;
	      var PasswordDecoded = _JS2ANSI(Password);
	      var len = PasswordDecoded.length + 1, i, PasswordByte;
	      var Intermediate1, Intermediate2, Intermediate3;
	      PasswordArray = new_raw_buf(len);
	      PasswordArray[0] = PasswordDecoded.length;
	      for (i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i - 1];
	      for (i = len - 1; i >= 0; --i) {
	        PasswordByte = PasswordArray[i];
	        Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
	        Intermediate2 = Verifier << 1 & 32767;
	        Intermediate3 = Intermediate1 | Intermediate2;
	        Verifier = Intermediate3 ^ PasswordByte;
	      }
	      return Verifier ^ 52811;
	    }
	    var crypto_CreateXorArray_Method1 = (function () {
	      var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
	      var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
	      var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
	      var Ror = function (Byte) {
	        return (Byte / 2 | Byte * 128) & 255;
	      };
	      var XorRor = function (byte1, byte2) {
	        return Ror(byte1 ^ byte2);
	      };
	      var CreateXorKey_Method1 = function (Password) {
	        var XorKey = InitialCode[Password.length - 1];
	        var CurrentElement = 104;
	        for (var i = Password.length - 1; i >= 0; --i) {
	          var Char = Password[i];
	          for (var j = 0; j != 7; ++j) {
	            if (Char & 64) XorKey ^= XorMatrix[CurrentElement];
	            Char *= 2;
	            --CurrentElement;
	          }
	        }
	        return XorKey;
	      };
	      return function (password) {
	        var Password = _JS2ANSI(password);
	        var XorKey = CreateXorKey_Method1(Password);
	        var Index = Password.length;
	        var ObfuscationArray = new_raw_buf(16);
	        for (var i = 0; i != 16; ++i) ObfuscationArray[i] = 0;
	        var Temp, PasswordLastChar, PadIndex;
	        if ((Index & 1) === 1) {
	          Temp = XorKey >> 8;
	          ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
	          --Index;
	          Temp = XorKey & 255;
	          PasswordLastChar = Password[Password.length - 1];
	          ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
	        }
	        while (Index > 0) {
	          --Index;
	          Temp = XorKey >> 8;
	          ObfuscationArray[Index] = XorRor(Password[Index], Temp);
	          --Index;
	          Temp = XorKey & 255;
	          ObfuscationArray[Index] = XorRor(Password[Index], Temp);
	        }
	        Index = 15;
	        PadIndex = 15 - Password.length;
	        while (PadIndex > 0) {
	          Temp = XorKey >> 8;
	          ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
	          --Index;
	          --PadIndex;
	          Temp = XorKey & 255;
	          ObfuscationArray[Index] = XorRor(Password[Index], Temp);
	          --Index;
	          --PadIndex;
	        }
	        return ObfuscationArray;
	      };
	    })();
	    var crypto_DecryptData_Method1 = function (password, Data, XorArrayIndex, XorArray, O) {
	      if (!O) O = Data;
	      if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
	      var Index, Value;
	      for (Index = 0; Index != Data.length; ++Index) {
	        Value = Data[Index];
	        Value ^= XorArray[XorArrayIndex];
	        Value = (Value >> 5 | Value << 3) & 255;
	        O[Index] = Value;
	        ++XorArrayIndex;
	      }
	      return [O, XorArrayIndex, XorArray];
	    };
	    var crypto_MakeXorDecryptor = function (password) {
	      var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
	      return function (Data) {
	        var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
	        XorArrayIndex = O[1];
	        return O[0];
	      };
	    };
	    function parse_XORObfuscation(blob, length, opts, out) {
	      var o = {
	        key: parseuint16(blob),
	        verificationBytes: parseuint16(blob)
	      };
	      if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
	      out.valid = o.verificationBytes === o.verifier;
	      if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
	      return o;
	    }
	    function parse_FilePassHeader(blob, length, oo) {
	      var o = oo || ({});
	      o.Info = blob.read_shift(2);
	      blob.l -= 2;
	      if (o.Info === 1) o.Data = parse_RC4Header(blob); else o.Data = parse_RC4CryptoHeader(blob, length);
	      return o;
	    }
	    function parse_FilePass(blob, length, opts) {
	      var o = {
	        Type: opts.biff >= 8 ? blob.read_shift(2) : 0
	      };
	      if (o.Type) parse_FilePassHeader(blob, length - 2, o); else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
	      return o;
	    }
	    function rtf_to_sheet(d, opts) {
	      switch (opts.type) {
	        case "base64":
	          return rtf_to_sheet_str(Base64_decode(d), opts);
	        case "binary":
	          return rtf_to_sheet_str(d, opts);
	        case "buffer":
	          return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
	        case "array":
	          return rtf_to_sheet_str(cc2str(d), opts);
	      }
	      throw new Error("Unrecognized type " + opts.type);
	    }
	    function rtf_to_sheet_str(str, opts) {
	      var o = opts || ({});
	      var ws = {};
	      var dense = o.dense;
	      if (dense) ws["!data"] = [];
	      var rows = str.match(/\\trowd[\s\S]*?\\row\b/g);
	      if (!rows) throw new Error("RTF missing table");
	      var range = {
	        s: {
	          c: 0,
	          r: 0
	        },
	        e: {
	          c: 0,
	          r: rows.length - 1
	        }
	      };
	      var row = [];
	      rows.forEach(function (rowtf, R) {
	        if (dense) row = ws["!data"][R] = [];
	        var rtfre = /\\[\w\-]+\b/g;
	        var last_index = 0;
	        var res;
	        var C = -1;
	        var payload = [];
	        while ((res = rtfre.exec(rowtf)) != null) {
	          var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
	          if (data.charCodeAt(0) == 32) data = data.slice(1);
	          if (data.length) payload.push(data);
	          switch (res[0]) {
	            case "\\cell":
	              ++C;
	              if (payload.length) {
	                var cell = {
	                  v: payload.join(""),
	                  t: "s"
	                };
	                if (cell.v == "TRUE" || cell.v == "FALSE") {
	                  cell.v = cell.v == "TRUE";
	                  cell.t = "b";
	                } else if (!isNaN(fuzzynum(cell.v))) {
	                  cell.t = "n";
	                  if (o.cellText !== false) cell.w = cell.v;
	                  cell.v = fuzzynum(cell.v);
	                }
	                if (dense) row[C] = cell; else ws[encode_cell({
	                  r: R,
	                  c: C
	                })] = cell;
	              }
	              payload = [];
	              break;
	            case "\\par":
	              payload.push("\n");
	              break;
	          }
	          last_index = rtfre.lastIndex;
	        }
	        if (C > range.e.c) range.e.c = C;
	      });
	      ws["!ref"] = encode_range(range);
	      return ws;
	    }
	    function rtf_to_workbook(d, opts) {
	      var wb = sheet_to_workbook(rtf_to_sheet(d, opts), opts);
	      wb.bookType = "rtf";
	      return wb;
	    }
	    function sheet_to_rtf(ws, opts) {
	      var o = ["{\\rtf1\\ansi"];
	      if (!ws["!ref"]) return o[0] + "}";
	      var r = safe_decode_range(ws["!ref"]), cell;
	      var dense = ws["!data"] != null, row = [];
	      for (var R = r.s.r; R <= r.e.r; ++R) {
	        o.push("\\trowd\\trautofit1");
	        for (var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C + 1));
	        o.push("\\pard\\intbl");
	        if (dense) row = ws["!data"][R] || [];
	        for (C = r.s.c; C <= r.e.c; ++C) {
	          var coord = encode_cell({
	            r: R,
	            c: C
	          });
	          cell = dense ? row[C] : ws[coord];
	          if (!cell || cell.v == null && (!cell.f || cell.F)) {
	            o.push(" \\cell");
	            continue;
	          }
	          o.push(" " + (cell.w || (format_cell(cell), cell.w) || "").replace(/[\r\n]/g, "\\par "));
	          o.push("\\cell");
	        }
	        o.push("\\pard\\intbl\\row");
	      }
	      return o.join("") + "}";
	    }
	    function hex2RGB(h) {
	      var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
	      return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4, 6), 16)];
	    }
	    function rgb2Hex(rgb) {
	      for (var i = 0, o = 1; i != 3; ++i) o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
	      return o.toString(16).toUpperCase().slice(1);
	    }
	    function rgb2HSL(rgb) {
	      var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;
	      var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
	      if (C === 0) return [0, 0, R];
	      var H6 = 0, S = 0, L2 = M + m;
	      S = C / (L2 > 1 ? 2 - L2 : L2);
	      switch (M) {
	        case R:
	          H6 = ((G - B) / C + 6) % 6;
	          break;
	        case G:
	          H6 = (B - R) / C + 2;
	          break;
	        case B:
	          H6 = (R - G) / C + 4;
	          break;
	      }
	      return [H6 / 6, S, L2 / 2];
	    }
	    function hsl2RGB(hsl) {
	      var H = hsl[0], S = hsl[1], L = hsl[2];
	      var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;
	      var rgb = [m, m, m], h6 = 6 * H;
	      var X;
	      if (S !== 0) switch (h6 | 0) {
	        case 0:
	        case 6:
	          X = C * h6;
	          rgb[0] += C;
	          rgb[1] += X;
	          break;
	        case 1:
	          X = C * (2 - h6);
	          rgb[0] += X;
	          rgb[1] += C;
	          break;
	        case 2:
	          X = C * (h6 - 2);
	          rgb[1] += C;
	          rgb[2] += X;
	          break;
	        case 3:
	          X = C * (4 - h6);
	          rgb[1] += X;
	          rgb[2] += C;
	          break;
	        case 4:
	          X = C * (h6 - 4);
	          rgb[2] += C;
	          rgb[0] += X;
	          break;
	        case 5:
	          X = C * (6 - h6);
	          rgb[2] += X;
	          rgb[0] += C;
	          break;
	      }
	      for (var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i] * 255);
	      return rgb;
	    }
	    function rgb_tint(hex, tint) {
	      if (tint === 0) return hex;
	      var hsl = rgb2HSL(hex2RGB(hex));
	      if (tint < 0) hsl[2] = hsl[2] * (1 + tint); else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
	      return rgb2Hex(hsl2RGB(hsl));
	    }
	    var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
	    function width2px(width) {
	      return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
	    }
	    function px2char(px) {
	      return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
	    }
	    function char2width(chr) {
	      return Math.round((chr * MDW + 5) / MDW * 256) / 256;
	    }
	    function cycle_width(collw) {
	      return char2width(px2char(width2px(collw)));
	    }
	    function find_mdw_colw(collw) {
	      var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
	      if (delta > 0.005) for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) if (Math.abs(collw - cycle_width(collw)) <= delta) {
	        delta = Math.abs(collw - cycle_width(collw));
	        _MDW = MDW;
	      }
	      MDW = _MDW;
	    }
	    function process_col(coll) {
	      if (coll.width) {
	        coll.wpx = width2px(coll.width);
	        coll.wch = px2char(coll.wpx);
	        coll.MDW = MDW;
	      } else if (coll.wpx) {
	        coll.wch = px2char(coll.wpx);
	        coll.width = char2width(coll.wch);
	        coll.MDW = MDW;
	      } else if (typeof coll.wch == "number") {
	        coll.width = char2width(coll.wch);
	        coll.wpx = width2px(coll.width);
	        coll.MDW = MDW;
	      }
	      if (coll.customWidth) delete coll.customWidth;
	    }
	    var DEF_PPI = 96, PPI = DEF_PPI;
	    function px2pt(px) {
	      return px * 96 / PPI;
	    }
	    function pt2px(pt) {
	      return pt * PPI / 96;
	    }
	    var XLMLPatternTypeMap = {
	      "None": "none",
	      "Solid": "solid",
	      "Gray50": "mediumGray",
	      "Gray75": "darkGray",
	      "Gray25": "lightGray",
	      "HorzStripe": "darkHorizontal",
	      "VertStripe": "darkVertical",
	      "ReverseDiagStripe": "darkDown",
	      "DiagStripe": "darkUp",
	      "DiagCross": "darkGrid",
	      "ThickDiagCross": "darkTrellis",
	      "ThinHorzStripe": "lightHorizontal",
	      "ThinVertStripe": "lightVertical",
	      "ThinReverseDiagStripe": "lightDown",
	      "ThinHorzCross": "lightGrid"
	    };
	    function parse_borders(t, styles, themes, opts) {
	      styles.Borders = [];
	      var border = {};
	      var pass = false;
	      (t[0].match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<borders":
	          case "<borders>":
	          case "</borders>":
	            break;
	          case "<border":
	          case "<border>":
	          case "<border/>":
	            border = {};
	            if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
	            if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
	            styles.Borders.push(border);
	            break;
	          case "</border>":
	            break;
	          case "<left/>":
	            break;
	          case "<left":
	          case "<left>":
	            break;
	          case "</left>":
	            break;
	          case "<right/>":
	            break;
	          case "<right":
	          case "<right>":
	            break;
	          case "</right>":
	            break;
	          case "<top/>":
	            break;
	          case "<top":
	          case "<top>":
	            break;
	          case "</top>":
	            break;
	          case "<bottom/>":
	            break;
	          case "<bottom":
	          case "<bottom>":
	            break;
	          case "</bottom>":
	            break;
	          case "<diagonal":
	          case "<diagonal>":
	          case "<diagonal/>":
	            break;
	          case "</diagonal>":
	            break;
	          case "<horizontal":
	          case "<horizontal>":
	          case "<horizontal/>":
	            break;
	          case "</horizontal>":
	            break;
	          case "<vertical":
	          case "<vertical>":
	          case "<vertical/>":
	            break;
	          case "</vertical>":
	            break;
	          case "<start":
	          case "<start>":
	          case "<start/>":
	            break;
	          case "</start>":
	            break;
	          case "<end":
	          case "<end>":
	          case "<end/>":
	            break;
	          case "</end>":
	            break;
	          case "<color":
	          case "<color>":
	            break;
	          case "<color/>":
	          case "</color>":
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (opts && opts.WTF) {
	              if (!pass) throw new Error("unrecognized " + y[0] + " in borders");
	            }
	        }
	      });
	    }
	    function parse_fills(t, styles, themes, opts) {
	      styles.Fills = [];
	      var fill = {};
	      var pass = false;
	      (t[0].match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<fills":
	          case "<fills>":
	          case "</fills>":
	            break;
	          case "<fill>":
	          case "<fill":
	          case "<fill/>":
	            fill = {};
	            styles.Fills.push(fill);
	            break;
	          case "</fill>":
	            break;
	          case "<gradientFill>":
	            break;
	          case "<gradientFill":
	          case "</gradientFill>":
	            styles.Fills.push(fill);
	            fill = {};
	            break;
	          case "<patternFill":
	          case "<patternFill>":
	            if (y.patternType) fill.patternType = y.patternType;
	            break;
	          case "<patternFill/>":
	          case "</patternFill>":
	            break;
	          case "<bgColor":
	            if (!fill.bgColor) fill.bgColor = {};
	            if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
	            if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
	            if (y.tint) fill.bgColor.tint = parseFloat(y.tint);
	            if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
	            break;
	          case "<bgColor/>":
	          case "</bgColor>":
	            break;
	          case "<fgColor":
	            if (!fill.fgColor) fill.fgColor = {};
	            if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
	            if (y.tint) fill.fgColor.tint = parseFloat(y.tint);
	            if (y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
	            break;
	          case "<fgColor/>":
	          case "</fgColor>":
	            break;
	          case "<stop":
	          case "<stop/>":
	            break;
	          case "</stop>":
	            break;
	          case "<color":
	          case "<color/>":
	            break;
	          case "</color>":
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (opts && opts.WTF) {
	              if (!pass) throw new Error("unrecognized " + y[0] + " in fills");
	            }
	        }
	      });
	    }
	    function parse_fonts(t, styles, themes, opts) {
	      styles.Fonts = [];
	      var font = {};
	      var pass = false;
	      (t[0].match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<fonts":
	          case "<fonts>":
	          case "</fonts>":
	            break;
	          case "<font":
	          case "<font>":
	            break;
	          case "</font>":
	          case "<font/>":
	            styles.Fonts.push(font);
	            font = {};
	            break;
	          case "<name":
	            if (y.val) font.name = utf8read(y.val);
	            break;
	          case "<name/>":
	          case "</name>":
	            break;
	          case "<b":
	            font.bold = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<b/>":
	            font.bold = 1;
	            break;
	          case "<i":
	            font.italic = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<i/>":
	            font.italic = 1;
	            break;
	          case "<u":
	            switch (y.val) {
	              case "none":
	                font.underline = 0;
	                break;
	              case "single":
	                font.underline = 1;
	                break;
	              case "double":
	                font.underline = 2;
	                break;
	              case "singleAccounting":
	                font.underline = 33;
	                break;
	              case "doubleAccounting":
	                font.underline = 34;
	                break;
	            }
	            break;
	          case "<u/>":
	            font.underline = 1;
	            break;
	          case "<strike":
	            font.strike = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<strike/>":
	            font.strike = 1;
	            break;
	          case "<outline":
	            font.outline = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<outline/>":
	            font.outline = 1;
	            break;
	          case "<shadow":
	            font.shadow = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<shadow/>":
	            font.shadow = 1;
	            break;
	          case "<condense":
	            font.condense = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<condense/>":
	            font.condense = 1;
	            break;
	          case "<extend":
	            font.extend = y.val ? parsexmlbool(y.val) : 1;
	            break;
	          case "<extend/>":
	            font.extend = 1;
	            break;
	          case "<sz":
	            if (y.val) font.sz = +y.val;
	            break;
	          case "<sz/>":
	          case "</sz>":
	            break;
	          case "<vertAlign":
	            if (y.val) font.vertAlign = y.val;
	            break;
	          case "<vertAlign/>":
	          case "</vertAlign>":
	            break;
	          case "<family":
	            if (y.val) font.family = parseInt(y.val, 10);
	            break;
	          case "<family/>":
	          case "</family>":
	            break;
	          case "<scheme":
	            if (y.val) font.scheme = y.val;
	            break;
	          case "<scheme/>":
	          case "</scheme>":
	            break;
	          case "<charset":
	            if (y.val == "1") break;
	            y.codepage = CS2CP[parseInt(y.val, 10)];
	            break;
	          case "<color":
	            if (!font.color) font.color = {};
	            if (y.auto) font.color.auto = parsexmlbool(y.auto);
	            if (y.rgb) font.color.rgb = y.rgb.slice(-6); else if (y.indexed) {
	              font.color.index = parseInt(y.indexed, 10);
	              var icv = XLSIcv[font.color.index];
	              if (font.color.index == 81) icv = XLSIcv[1];
	              if (!icv) icv = XLSIcv[1];
	              font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
	            } else if (y.theme) {
	              font.color.theme = parseInt(y.theme, 10);
	              if (y.tint) font.color.tint = parseFloat(y.tint);
	              if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {
	                font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
	              }
	            }
	            break;
	          case "<color/>":
	          case "</color>":
	            break;
	          case "<AlternateContent":
	            pass = true;
	            break;
	          case "</AlternateContent>":
	            pass = false;
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (opts && opts.WTF) {
	              if (!pass) throw new Error("unrecognized " + y[0] + " in fonts");
	            }
	        }
	      });
	    }
	    function parse_numFmts(t, styles, opts) {
	      styles.NumberFmt = [];
	      var k = keys(table_fmt);
	      for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = table_fmt[k[i]];
	      var m = t[0].match(tagregex);
	      if (!m) return;
	      for (i = 0; i < m.length; ++i) {
	        var y = parsexmltag(m[i]);
	        switch (strip_ns(y[0])) {
	          case "<numFmts":
	          case "</numFmts>":
	          case "<numFmts/>":
	          case "<numFmts>":
	            break;
	          case "<numFmt":
	            {
	              var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);
	              styles.NumberFmt[j] = f;
	              if (j > 0) {
	                if (j > 392) {
	                  for (j = 392; j > 60; --j) if (styles.NumberFmt[j] == null) break;
	                  styles.NumberFmt[j] = f;
	                }
	                SSF__load(f, j);
	              }
	            }
	            break;
	          case "</numFmt>":
	            break;
	          default:
	            if (opts.WTF) throw new Error("unrecognized " + y[0] + " in numFmts");
	        }
	      }
	    }
	    function write_numFmts(NF) {
	      var o = ["<numFmts>"];
	      [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) {
	        for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) o[o.length] = writextag("numFmt", null, {
	          numFmtId: i,
	          formatCode: escapexml(NF[i])
	        });
	      });
	      if (o.length === 1) return "";
	      o[o.length] = "</numFmts>";
	      o[0] = writextag("numFmts", null, {
	        count: o.length - 2
	      }).replace("/>", ">");
	      return o.join("");
	    }
	    var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
	    var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
	    function parse_cellXfs(t, styles, opts) {
	      styles.CellXf = [];
	      var xf;
	      var pass = false;
	      (t[0].match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x), i = 0;
	        switch (strip_ns(y[0])) {
	          case "<cellXfs":
	          case "<cellXfs>":
	          case "<cellXfs/>":
	          case "</cellXfs>":
	            break;
	          case "<xf":
	          case "<xf/>":
	            xf = y;
	            delete xf[0];
	            for (i = 0; i < cellXF_uint.length; ++i) if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
	            for (i = 0; i < cellXF_bool.length; ++i) if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
	            if (styles.NumberFmt && xf.numFmtId > 392) {
	              for (i = 392; i > 60; --i) if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {
	                xf.numFmtId = i;
	                break;
	              }
	            }
	            styles.CellXf.push(xf);
	            break;
	          case "</xf>":
	            break;
	          case "<alignment":
	          case "<alignment/>":
	            var alignment = {};
	            if (y.vertical) alignment.vertical = y.vertical;
	            if (y.horizontal) alignment.horizontal = y.horizontal;
	            if (y.textRotation != null) alignment.textRotation = y.textRotation;
	            if (y.indent) alignment.indent = y.indent;
	            if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
	            xf.alignment = alignment;
	            break;
	          case "</alignment>":
	            break;
	          case "<protection":
	            break;
	          case "</protection>":
	          case "<protection/>":
	            break;
	          case "<AlternateContent":
	            pass = true;
	            break;
	          case "</AlternateContent>":
	            pass = false;
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (opts && opts.WTF) {
	              if (!pass) throw new Error("unrecognized " + y[0] + " in cellXfs");
	            }
	        }
	      });
	    }
	    function write_cellXfs(cellXfs) {
	      var o = [];
	      o[o.length] = writextag("cellXfs", null);
	      cellXfs.forEach(function (c) {
	        o[o.length] = writextag("xf", null, c);
	      });
	      o[o.length] = "</cellXfs>";
	      if (o.length === 2) return "";
	      o[0] = writextag("cellXfs", null, {
	        count: o.length - 2
	      }).replace("/>", ">");
	      return o.join("");
	    }
	    var parse_sty_xml = (function make_pstyx() {
	      var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
	      var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
	      var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
	      var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
	      var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
	      return function parse_sty_xml(data, themes, opts) {
	        var styles = {};
	        if (!data) return styles;
	        data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
	        var t;
	        if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);
	        if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);
	        if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);
	        if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);
	        if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);
	        return styles;
	      };
	    })();
	    function write_sty_xml(wb, opts) {
	      var o = [XML_HEADER, writextag("styleSheet", null, {
	        "xmlns": XMLNS_main[0],
	        "xmlns:vt": XMLNS.vt
	      })], w;
	      if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
	      o[o.length] = "<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>";
	      o[o.length] = "<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>";
	      o[o.length] = "<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>";
	      o[o.length] = "<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>";
	      if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;
	      o[o.length] = "<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>";
	      o[o.length] = "<dxfs count=\"0\"/>";
	      o[o.length] = "<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>";
	      if (o.length > 2) {
	        o[o.length] = "</styleSheet>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    function parse_BrtFmt(data, length) {
	      var numFmtId = data.read_shift(2);
	      var stFmtCode = parse_XLWideString(data);
	      return [numFmtId, stFmtCode];
	    }
	    function write_BrtFmt(i, f, o) {
	      if (!o) o = new_buf(6 + 4 * f.length);
	      o.write_shift(2, i);
	      write_XLWideString(f, o);
	      var out = o.length > o.l ? o.slice(0, o.l) : o;
	      if (o.l == null) o.l = o.length;
	      return out;
	    }
	    function parse_BrtFont(data, length, opts) {
	      var out = {};
	      out.sz = data.read_shift(2) / 20;
	      var grbit = parse_FontFlags(data);
	      if (grbit.fItalic) out.italic = 1;
	      if (grbit.fCondense) out.condense = 1;
	      if (grbit.fExtend) out.extend = 1;
	      if (grbit.fShadow) out.shadow = 1;
	      if (grbit.fOutline) out.outline = 1;
	      if (grbit.fStrikeout) out.strike = 1;
	      var bls = data.read_shift(2);
	      if (bls === 700) out.bold = 1;
	      switch (data.read_shift(2)) {
	        case 1:
	          out.vertAlign = "superscript";
	          break;
	        case 2:
	          out.vertAlign = "subscript";
	          break;
	      }
	      var underline = data.read_shift(1);
	      if (underline != 0) out.underline = underline;
	      var family = data.read_shift(1);
	      if (family > 0) out.family = family;
	      var bCharSet = data.read_shift(1);
	      if (bCharSet > 0) out.charset = bCharSet;
	      data.l++;
	      out.color = parse_BrtColor(data);
	      switch (data.read_shift(1)) {
	        case 1:
	          out.scheme = "major";
	          break;
	        case 2:
	          out.scheme = "minor";
	          break;
	      }
	      out.name = parse_XLWideString(data);
	      return out;
	    }
	    function write_BrtFont(font, o) {
	      if (!o) o = new_buf(25 + 4 * 32);
	      o.write_shift(2, font.sz * 20);
	      write_FontFlags(font, o);
	      o.write_shift(2, font.bold ? 700 : 400);
	      var sss = 0;
	      if (font.vertAlign == "superscript") sss = 1; else if (font.vertAlign == "subscript") sss = 2;
	      o.write_shift(2, sss);
	      o.write_shift(1, font.underline || 0);
	      o.write_shift(1, font.family || 0);
	      o.write_shift(1, font.charset || 0);
	      o.write_shift(1, 0);
	      write_BrtColor(font.color, o);
	      var scheme = 0;
	      if (font.scheme == "major") scheme = 1;
	      if (font.scheme == "minor") scheme = 2;
	      o.write_shift(1, scheme);
	      write_XLWideString(font.name, o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    var XLSBFillPTNames = ["none", "solid", "mediumGray", "darkGray", "lightGray", "darkHorizontal", "darkVertical", "darkDown", "darkUp", "darkGrid", "darkTrellis", "lightHorizontal", "lightVertical", "lightDown", "lightUp", "lightGrid", "lightTrellis", "gray125", "gray0625"];
	    var rev_XLSBFillPTNames;
	    var parse_BrtFill = parsenoop;
	    function write_BrtFill(fill, o) {
	      if (!o) o = new_buf(4 * 3 + 8 * 7 + 16 * 1);
	      if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames);
	      var fls = rev_XLSBFillPTNames[fill.patternType];
	      if (fls == null) fls = 40;
	      o.write_shift(4, fls);
	      var j = 0;
	      if (fls != 40) {
	        write_BrtColor({
	          auto: 1
	        }, o);
	        write_BrtColor({
	          auto: 1
	        }, o);
	        for (; j < 12; ++j) o.write_shift(4, 0);
	      } else {
	        for (; j < 4; ++j) o.write_shift(4, 0);
	        for (; j < 12; ++j) o.write_shift(4, 0);
	      }
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function parse_BrtXF(data, length) {
	      var tgt = data.l + length;
	      var ixfeParent = data.read_shift(2);
	      var ifmt = data.read_shift(2);
	      data.l = tgt;
	      return {
	        ixfe: ixfeParent,
	        numFmtId: ifmt
	      };
	    }
	    function write_BrtXF(data, ixfeP, o) {
	      if (!o) o = new_buf(16);
	      o.write_shift(2, ixfeP || 0);
	      o.write_shift(2, data.numFmtId || 0);
	      o.write_shift(2, 0);
	      o.write_shift(2, 0);
	      o.write_shift(2, 0);
	      o.write_shift(1, 0);
	      o.write_shift(1, 0);
	      var flow = 0;
	      o.write_shift(1, flow);
	      o.write_shift(1, 0);
	      o.write_shift(1, 0);
	      o.write_shift(1, 0);
	      return o;
	    }
	    function write_Blxf(data, o) {
	      if (!o) o = new_buf(10);
	      o.write_shift(1, 0);
	      o.write_shift(1, 0);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      return o;
	    }
	    var parse_BrtBorder = parsenoop;
	    function write_BrtBorder(border, o) {
	      if (!o) o = new_buf(51);
	      o.write_shift(1, 0);
	      write_Blxf(null, o);
	      write_Blxf(null, o);
	      write_Blxf(null, o);
	      write_Blxf(null, o);
	      write_Blxf(null, o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function write_BrtStyle(style, o) {
	      if (!o) o = new_buf(12 + 4 * 10);
	      o.write_shift(4, style.xfId);
	      o.write_shift(2, 1);
	      o.write_shift(1, +style.builtinId);
	      o.write_shift(1, 0);
	      write_XLNullableWideString(style.name || "", o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
	      var o = new_buf(4 + 256 * 2 * 4);
	      o.write_shift(4, cnt);
	      write_XLNullableWideString(defTableStyle, o);
	      write_XLNullableWideString(defPivotStyle, o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function parse_sty_bin(data, themes, opts) {
	      var styles = {};
	      styles.NumberFmt = [];
	      for (var y in table_fmt) styles.NumberFmt[y] = table_fmt[y];
	      styles.CellXf = [];
	      styles.Fonts = [];
	      var state = [];
	      var pass = false;
	      recordhopper(data, function hopper_sty(val, R, RT) {
	        switch (RT) {
	          case 44:
	            styles.NumberFmt[val[0]] = val[1];
	            SSF__load(val[1], val[0]);
	            break;
	          case 43:
	            styles.Fonts.push(val);
	            if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
	              val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
	            }
	            break;
	          case 1025:
	            break;
	          case 45:
	            break;
	          case 46:
	            break;
	          case 47:
	            if (state[state.length - 1] == 617) {
	              styles.CellXf.push(val);
	            }
	            break;
	          case 48:
	          case 507:
	          case 572:
	          case 475:
	            break;
	          case 1171:
	          case 2102:
	          case 1130:
	          case 512:
	          case 2095:
	          case 3072:
	            break;
	          case 35:
	            pass = true;
	            break;
	          case 36:
	            pass = false;
	            break;
	          case 37:
	            state.push(RT);
	            pass = true;
	            break;
	          case 38:
	            state.pop();
	            pass = false;
	            break;
	          default:
	            if (R.T > 0) state.push(RT); else if (R.T < 0) state.pop(); else if (!pass || opts.WTF && state[state.length - 1] != 37) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      });
	      return styles;
	    }
	    function write_FMTS_bin(ba, NF) {
	      if (!NF) return;
	      var cnt = 0;
	      [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) {
	        for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) ++cnt;
	      });
	      if (cnt == 0) return;
	      write_record(ba, 615, write_UInt32LE(cnt));
	      [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) {
	        for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) write_record(ba, 44, write_BrtFmt(i, NF[i]));
	      });
	      write_record(ba, 616);
	    }
	    function write_FONTS_bin(ba) {
	      var cnt = 1;
	      write_record(ba, 611, write_UInt32LE(cnt));
	      write_record(ba, 43, write_BrtFont({
	        sz: 12,
	        color: {
	          theme: 1
	        },
	        name: "Calibri",
	        family: 2,
	        scheme: "minor"
	      }));
	      write_record(ba, 612);
	    }
	    function write_FILLS_bin(ba) {
	      var cnt = 2;
	      write_record(ba, 603, write_UInt32LE(cnt));
	      write_record(ba, 45, write_BrtFill({
	        patternType: "none"
	      }));
	      write_record(ba, 45, write_BrtFill({
	        patternType: "gray125"
	      }));
	      write_record(ba, 604);
	    }
	    function write_BORDERS_bin(ba) {
	      var cnt = 1;
	      write_record(ba, 613, write_UInt32LE(cnt));
	      write_record(ba, 46, write_BrtBorder());
	      write_record(ba, 614);
	    }
	    function write_CELLSTYLEXFS_bin(ba) {
	      var cnt = 1;
	      write_record(ba, 626, write_UInt32LE(cnt));
	      write_record(ba, 47, write_BrtXF({
	        numFmtId: 0,
	        fontId: 0,
	        fillId: 0,
	        borderId: 0
	      }, 65535));
	      write_record(ba, 627);
	    }
	    function write_CELLXFS_bin(ba, data) {
	      write_record(ba, 617, write_UInt32LE(data.length));
	      data.forEach(function (c) {
	        write_record(ba, 47, write_BrtXF(c, 0));
	      });
	      write_record(ba, 618);
	    }
	    function write_STYLES_bin(ba) {
	      var cnt = 1;
	      write_record(ba, 619, write_UInt32LE(cnt));
	      write_record(ba, 48, write_BrtStyle({
	        xfId: 0,
	        builtinId: 0,
	        name: "Normal"
	      }));
	      write_record(ba, 620);
	    }
	    function write_DXFS_bin(ba) {
	      var cnt = 0;
	      write_record(ba, 505, write_UInt32LE(cnt));
	      write_record(ba, 506);
	    }
	    function write_TABLESTYLES_bin(ba) {
	      var cnt = 0;
	      write_record(ba, 508, write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
	      write_record(ba, 509);
	    }
	    function write_sty_bin(wb, opts) {
	      var ba = buf_array();
	      write_record(ba, 278);
	      write_FMTS_bin(ba, wb.SSF);
	      write_FONTS_bin(ba);
	      write_FILLS_bin(ba);
	      write_BORDERS_bin(ba);
	      write_CELLSTYLEXFS_bin(ba);
	      write_CELLXFS_bin(ba, opts.cellXfs);
	      write_STYLES_bin(ba);
	      write_DXFS_bin(ba);
	      write_TABLESTYLES_bin(ba);
	      write_record(ba, 279);
	      return ba.end();
	    }
	    var XLSXThemeClrScheme = ["</a:lt1>", "</a:dk1>", "</a:lt2>", "</a:dk2>", "</a:accent1>", "</a:accent2>", "</a:accent3>", "</a:accent4>", "</a:accent5>", "</a:accent6>", "</a:hlink>", "</a:folHlink>"];
	    function parse_clrScheme(t, themes, opts) {
	      themes.themeElements.clrScheme = [];
	      var color = {};
	      (t[0].match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        switch (y[0]) {
	          case "<a:clrScheme":
	          case "</a:clrScheme>":
	            break;
	          case "<a:srgbClr":
	            color.rgb = y.val;
	            break;
	          case "<a:sysClr":
	            color.rgb = y.lastClr;
	            break;
	          case "<a:dk1>":
	          case "</a:dk1>":
	          case "<a:lt1>":
	          case "</a:lt1>":
	          case "<a:dk2>":
	          case "</a:dk2>":
	          case "<a:lt2>":
	          case "</a:lt2>":
	          case "<a:accent1>":
	          case "</a:accent1>":
	          case "<a:accent2>":
	          case "</a:accent2>":
	          case "<a:accent3>":
	          case "</a:accent3>":
	          case "<a:accent4>":
	          case "</a:accent4>":
	          case "<a:accent5>":
	          case "</a:accent5>":
	          case "<a:accent6>":
	          case "</a:accent6>":
	          case "<a:hlink>":
	          case "</a:hlink>":
	          case "<a:folHlink>":
	          case "</a:folHlink>":
	            if (y[0].charAt(1) === "/") {
	              themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
	              color = {};
	            } else {
	              color.name = y[0].slice(3, y[0].length - 1);
	            }
	            break;
	          default:
	            if (opts && opts.WTF) throw new Error("Unrecognized " + y[0] + " in clrScheme");
	        }
	      });
	    }
	    function parse_fontScheme() {}
	    function parse_fmtScheme() {}
	    var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
	    var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
	    var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
	    function parse_themeElements(data, themes, opts) {
	      themes.themeElements = {};
	      var t;
	      [["clrScheme", clrsregex, parse_clrScheme], ["fontScheme", fntsregex, parse_fontScheme], ["fmtScheme", fmtsregex, parse_fmtScheme]].forEach(function (m) {
	        if (!(t = data.match(m[1]))) throw new Error(m[0] + " not found in themeElements");
	        m[2](t, themes, opts);
	      });
	    }
	    var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
	    function parse_theme_xml(data, opts) {
	      if (!data || data.length === 0) data = write_theme();
	      var t;
	      var themes = {};
	      if (!(t = data.match(themeltregex))) throw new Error("themeElements not found in theme");
	      parse_themeElements(t[0], themes, opts);
	      themes.raw = data;
	      return themes;
	    }
	    function write_theme(Themes, opts) {
	      if (opts && opts.themeXLSX) return opts.themeXLSX;
	      if (Themes && typeof Themes.raw == "string") return Themes.raw;
	      var o = [XML_HEADER];
	      o[o.length] = "<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\">";
	      o[o.length] = "<a:themeElements>";
	      o[o.length] = "<a:clrScheme name=\"Office\">";
	      o[o.length] = "<a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1>";
	      o[o.length] = "<a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1>";
	      o[o.length] = "<a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2>";
	      o[o.length] = "<a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2>";
	      o[o.length] = "<a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1>";
	      o[o.length] = "<a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2>";
	      o[o.length] = "<a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3>";
	      o[o.length] = "<a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4>";
	      o[o.length] = "<a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5>";
	      o[o.length] = "<a:accent6><a:srgbClr val=\"F79646\"/></a:accent6>";
	      o[o.length] = "<a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink>";
	      o[o.length] = "<a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink>";
	      o[o.length] = "</a:clrScheme>";
	      o[o.length] = "<a:fontScheme name=\"Office\">";
	      o[o.length] = "<a:majorFont>";
	      o[o.length] = "<a:latin typeface=\"Cambria\"/>";
	      o[o.length] = "<a:ea typeface=\"\"/>";
	      o[o.length] = "<a:cs typeface=\"\"/>";
	      o[o.length] = "<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>";
	      o[o.length] = "<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>";
	      o[o.length] = "<a:font script=\"Hans\" typeface=\"宋体\"/>";
	      o[o.length] = "<a:font script=\"Hant\" typeface=\"新細明體\"/>";
	      o[o.length] = "<a:font script=\"Arab\" typeface=\"Times New Roman\"/>";
	      o[o.length] = "<a:font script=\"Hebr\" typeface=\"Times New Roman\"/>";
	      o[o.length] = "<a:font script=\"Thai\" typeface=\"Tahoma\"/>";
	      o[o.length] = "<a:font script=\"Ethi\" typeface=\"Nyala\"/>";
	      o[o.length] = "<a:font script=\"Beng\" typeface=\"Vrinda\"/>";
	      o[o.length] = "<a:font script=\"Gujr\" typeface=\"Shruti\"/>";
	      o[o.length] = "<a:font script=\"Khmr\" typeface=\"MoolBoran\"/>";
	      o[o.length] = "<a:font script=\"Knda\" typeface=\"Tunga\"/>";
	      o[o.length] = "<a:font script=\"Guru\" typeface=\"Raavi\"/>";
	      o[o.length] = "<a:font script=\"Cans\" typeface=\"Euphemia\"/>";
	      o[o.length] = "<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>";
	      o[o.length] = "<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>";
	      o[o.length] = "<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>";
	      o[o.length] = "<a:font script=\"Thaa\" typeface=\"MV Boli\"/>";
	      o[o.length] = "<a:font script=\"Deva\" typeface=\"Mangal\"/>";
	      o[o.length] = "<a:font script=\"Telu\" typeface=\"Gautami\"/>";
	      o[o.length] = "<a:font script=\"Taml\" typeface=\"Latha\"/>";
	      o[o.length] = "<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>";
	      o[o.length] = "<a:font script=\"Orya\" typeface=\"Kalinga\"/>";
	      o[o.length] = "<a:font script=\"Mlym\" typeface=\"Kartika\"/>";
	      o[o.length] = "<a:font script=\"Laoo\" typeface=\"DokChampa\"/>";
	      o[o.length] = "<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>";
	      o[o.length] = "<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>";
	      o[o.length] = "<a:font script=\"Viet\" typeface=\"Times New Roman\"/>";
	      o[o.length] = "<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>";
	      o[o.length] = "<a:font script=\"Geor\" typeface=\"Sylfaen\"/>";
	      o[o.length] = "</a:majorFont>";
	      o[o.length] = "<a:minorFont>";
	      o[o.length] = "<a:latin typeface=\"Calibri\"/>";
	      o[o.length] = "<a:ea typeface=\"\"/>";
	      o[o.length] = "<a:cs typeface=\"\"/>";
	      o[o.length] = "<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>";
	      o[o.length] = "<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>";
	      o[o.length] = "<a:font script=\"Hans\" typeface=\"宋体\"/>";
	      o[o.length] = "<a:font script=\"Hant\" typeface=\"新細明體\"/>";
	      o[o.length] = "<a:font script=\"Arab\" typeface=\"Arial\"/>";
	      o[o.length] = "<a:font script=\"Hebr\" typeface=\"Arial\"/>";
	      o[o.length] = "<a:font script=\"Thai\" typeface=\"Tahoma\"/>";
	      o[o.length] = "<a:font script=\"Ethi\" typeface=\"Nyala\"/>";
	      o[o.length] = "<a:font script=\"Beng\" typeface=\"Vrinda\"/>";
	      o[o.length] = "<a:font script=\"Gujr\" typeface=\"Shruti\"/>";
	      o[o.length] = "<a:font script=\"Khmr\" typeface=\"DaunPenh\"/>";
	      o[o.length] = "<a:font script=\"Knda\" typeface=\"Tunga\"/>";
	      o[o.length] = "<a:font script=\"Guru\" typeface=\"Raavi\"/>";
	      o[o.length] = "<a:font script=\"Cans\" typeface=\"Euphemia\"/>";
	      o[o.length] = "<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>";
	      o[o.length] = "<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>";
	      o[o.length] = "<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>";
	      o[o.length] = "<a:font script=\"Thaa\" typeface=\"MV Boli\"/>";
	      o[o.length] = "<a:font script=\"Deva\" typeface=\"Mangal\"/>";
	      o[o.length] = "<a:font script=\"Telu\" typeface=\"Gautami\"/>";
	      o[o.length] = "<a:font script=\"Taml\" typeface=\"Latha\"/>";
	      o[o.length] = "<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>";
	      o[o.length] = "<a:font script=\"Orya\" typeface=\"Kalinga\"/>";
	      o[o.length] = "<a:font script=\"Mlym\" typeface=\"Kartika\"/>";
	      o[o.length] = "<a:font script=\"Laoo\" typeface=\"DokChampa\"/>";
	      o[o.length] = "<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>";
	      o[o.length] = "<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>";
	      o[o.length] = "<a:font script=\"Viet\" typeface=\"Arial\"/>";
	      o[o.length] = "<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>";
	      o[o.length] = "<a:font script=\"Geor\" typeface=\"Sylfaen\"/>";
	      o[o.length] = "</a:minorFont>";
	      o[o.length] = "</a:fontScheme>";
	      o[o.length] = "<a:fmtScheme name=\"Office\">";
	      o[o.length] = "<a:fillStyleLst>";
	      o[o.length] = "<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>";
	      o[o.length] = "<a:gradFill rotWithShape=\"1\">";
	      o[o.length] = "<a:gsLst>";
	      o[o.length] = "<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "<a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "</a:gsLst>";
	      o[o.length] = "<a:lin ang=\"16200000\" scaled=\"1\"/>";
	      o[o.length] = "</a:gradFill>";
	      o[o.length] = "<a:gradFill rotWithShape=\"1\">";
	      o[o.length] = "<a:gsLst>";
	      o[o.length] = "<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "</a:gsLst>";
	      o[o.length] = "<a:lin ang=\"16200000\" scaled=\"0\"/>";
	      o[o.length] = "</a:gradFill>";
	      o[o.length] = "</a:fillStyleLst>";
	      o[o.length] = "<a:lnStyleLst>";
	      o[o.length] = "<a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln>";
	      o[o.length] = "<a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>";
	      o[o.length] = "<a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>";
	      o[o.length] = "</a:lnStyleLst>";
	      o[o.length] = "<a:effectStyleLst>";
	      o[o.length] = "<a:effectStyle>";
	      o[o.length] = "<a:effectLst>";
	      o[o.length] = "<a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw>";
	      o[o.length] = "</a:effectLst>";
	      o[o.length] = "</a:effectStyle>";
	      o[o.length] = "<a:effectStyle>";
	      o[o.length] = "<a:effectLst>";
	      o[o.length] = "<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>";
	      o[o.length] = "</a:effectLst>";
	      o[o.length] = "</a:effectStyle>";
	      o[o.length] = "<a:effectStyle>";
	      o[o.length] = "<a:effectLst>";
	      o[o.length] = "<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>";
	      o[o.length] = "</a:effectLst>";
	      o[o.length] = "<a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d>";
	      o[o.length] = "<a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d>";
	      o[o.length] = "</a:effectStyle>";
	      o[o.length] = "</a:effectStyleLst>";
	      o[o.length] = "<a:bgFillStyleLst>";
	      o[o.length] = "<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>";
	      o[o.length] = "<a:gradFill rotWithShape=\"1\">";
	      o[o.length] = "<a:gsLst>";
	      o[o.length] = "<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "<a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "</a:gsLst>";
	      o[o.length] = "<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path>";
	      o[o.length] = "</a:gradFill>";
	      o[o.length] = "<a:gradFill rotWithShape=\"1\">";
	      o[o.length] = "<a:gsLst>";
	      o[o.length] = "<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs>";
	      o[o.length] = "</a:gsLst>";
	      o[o.length] = "<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path>";
	      o[o.length] = "</a:gradFill>";
	      o[o.length] = "</a:bgFillStyleLst>";
	      o[o.length] = "</a:fmtScheme>";
	      o[o.length] = "</a:themeElements>";
	      o[o.length] = "<a:objectDefaults>";
	      o[o.length] = "<a:spDef>";
	      o[o.length] = "<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style>";
	      o[o.length] = "</a:spDef>";
	      o[o.length] = "<a:lnDef>";
	      o[o.length] = "<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style>";
	      o[o.length] = "</a:lnDef>";
	      o[o.length] = "</a:objectDefaults>";
	      o[o.length] = "<a:extraClrSchemeLst/>";
	      o[o.length] = "</a:theme>";
	      return o.join("");
	    }
	    function parse_Theme(blob, length, opts) {
	      var end = blob.l + length;
	      var dwThemeVersion = blob.read_shift(4);
	      if (dwThemeVersion === 124226) return;
	      if (!opts.cellStyles) {
	        blob.l = end;
	        return;
	      }
	      var data = blob.slice(blob.l);
	      blob.l = end;
	      var zip;
	      try {
	        zip = zip_read(data, {
	          type: "array"
	        });
	      } catch (e) {
	        return;
	      }
	      var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
	      if (!themeXML) return;
	      return parse_theme_xml(themeXML, opts);
	    }
	    function parse_ColorTheme(blob) {
	      return blob.read_shift(4);
	    }
	    function parse_FullColorExt(blob) {
	      var o = {};
	      o.xclrType = blob.read_shift(2);
	      o.nTintShade = blob.read_shift(2);
	      switch (o.xclrType) {
	        case 0:
	          blob.l += 4;
	          break;
	        case 1:
	          o.xclrValue = parse_IcvXF(blob, 4);
	          break;
	        case 2:
	          o.xclrValue = parse_LongRGBA(blob);
	          break;
	        case 3:
	          o.xclrValue = parse_ColorTheme(blob);
	          break;
	        case 4:
	          blob.l += 4;
	          break;
	      }
	      blob.l += 8;
	      return o;
	    }
	    function parse_IcvXF(blob, length) {
	      return parsenoop(blob, length);
	    }
	    function parse_XFExtGradient(blob, length) {
	      return parsenoop(blob, length);
	    }
	    function parse_ExtProp(blob) {
	      var extType = blob.read_shift(2);
	      var cb = blob.read_shift(2) - 4;
	      var o = [extType];
	      switch (extType) {
	        case 4:
	        case 5:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 13:
	          o[1] = parse_FullColorExt(blob);
	          break;
	        case 6:
	          o[1] = parse_XFExtGradient(blob, cb);
	          break;
	        case 14:
	        case 15:
	          o[1] = blob.read_shift(cb === 1 ? 1 : 2);
	          break;
	        default:
	          throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
	      }
	      return o;
	    }
	    function parse_XFExt(blob, length) {
	      var end = blob.l + length;
	      blob.l += 2;
	      var ixfe = blob.read_shift(2);
	      blob.l += 2;
	      var cexts = blob.read_shift(2);
	      var ext = [];
	      while (cexts-- > 0) ext.push(parse_ExtProp(blob, end - blob.l));
	      return {
	        ixfe: ixfe,
	        ext: ext
	      };
	    }
	    function update_xfext(xf, xfext) {
	      xfext.forEach(function (xfe) {
	        switch (xfe[0]) {
	                  }
	      });
	    }
	    function parse_BrtMdtinfo(data, length) {
	      return {
	        flags: data.read_shift(4),
	        version: data.read_shift(4),
	        name: parse_XLWideString(data)
	      };
	    }
	    function write_BrtMdtinfo(data) {
	      var o = new_buf(12 + 2 * data.name.length);
	      o.write_shift(4, data.flags);
	      o.write_shift(4, data.version);
	      write_XLWideString(data.name, o);
	      return o.slice(0, o.l);
	    }
	    function parse_BrtMdb(data) {
	      var out = [];
	      var cnt = data.read_shift(4);
	      while (cnt-- > 0) out.push([data.read_shift(4), data.read_shift(4)]);
	      return out;
	    }
	    function write_BrtMdb(mdb) {
	      var o = new_buf(4 + 8 * mdb.length);
	      o.write_shift(4, mdb.length);
	      for (var i = 0; i < mdb.length; ++i) {
	        o.write_shift(4, mdb[i][0]);
	        o.write_shift(4, mdb[i][1]);
	      }
	      return o;
	    }
	    function write_BrtBeginEsfmd(cnt, name) {
	      var o = new_buf(8 + 2 * name.length);
	      o.write_shift(4, cnt);
	      write_XLWideString(name, o);
	      return o.slice(0, o.l);
	    }
	    function parse_BrtBeginEsmdb(data) {
	      data.l += 4;
	      return data.read_shift(4) != 0;
	    }
	    function write_BrtBeginEsmdb(cnt, cm) {
	      var o = new_buf(8);
	      o.write_shift(4, cnt);
	      o.write_shift(4, cm ? 1 : 0);
	      return o;
	    }
	    function parse_xlmeta_bin(data, name, _opts) {
	      var out = {
	        Types: [],
	        Cell: [],
	        Value: []
	      };
	      var opts = _opts || ({});
	      var state = [];
	      var pass = false;
	      var metatype = 2;
	      recordhopper(data, function (val, R, RT) {
	        switch (RT) {
	          case 335:
	            out.Types.push({
	              name: val.name
	            });
	            break;
	          case 51:
	            val.forEach(function (r) {
	              if (metatype == 1) out.Cell.push({
	                type: out.Types[r[0] - 1].name,
	                index: r[1]
	              }); else if (metatype == 0) out.Value.push({
	                type: out.Types[r[0] - 1].name,
	                index: r[1]
	              });
	            });
	            break;
	          case 337:
	            metatype = val ? 1 : 0;
	            break;
	          case 338:
	            metatype = 2;
	            break;
	          case 35:
	            state.push(RT);
	            pass = true;
	            break;
	          case 36:
	            state.pop();
	            pass = false;
	            break;
	          default:
	            if (R.T) ; else if (!pass || opts.WTF && state[state.length - 1] != 35) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      });
	      return out;
	    }
	    function write_xlmeta_bin() {
	      var ba = buf_array();
	      write_record(ba, 332);
	      write_record(ba, 334, write_UInt32LE(1));
	      write_record(ba, 335, write_BrtMdtinfo({
	        name: "XLDAPR",
	        version: 120000,
	        flags: 3496657072
	      }));
	      write_record(ba, 336);
	      write_record(ba, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
	      write_record(ba, 52);
	      write_record(ba, 35, write_UInt32LE(514));
	      write_record(ba, 4096, write_UInt32LE(0));
	      write_record(ba, 4097, writeuint16(1));
	      write_record(ba, 36);
	      write_record(ba, 53);
	      write_record(ba, 340);
	      write_record(ba, 337, write_BrtBeginEsmdb(1, true));
	      write_record(ba, 51, write_BrtMdb([[1, 0]]));
	      write_record(ba, 338);
	      write_record(ba, 333);
	      return ba.end();
	    }
	    function parse_xlmeta_xml(data, name, opts) {
	      var out = {
	        Types: [],
	        Cell: [],
	        Value: []
	      };
	      if (!data) return out;
	      var pass = false;
	      var metatype = 2;
	      var lastmeta;
	      data.replace(tagregex, function (x) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<?xml":
	            break;
	          case "<metadata":
	          case "</metadata>":
	            break;
	          case "<metadataTypes":
	          case "</metadataTypes>":
	            break;
	          case "<metadataType":
	            out.Types.push({
	              name: y.name
	            });
	            break;
	          case "</metadataType>":
	            break;
	          case "<futureMetadata":
	            for (var j = 0; j < out.Types.length; ++j) if (out.Types[j].name == y.name) lastmeta = out.Types[j];
	            break;
	          case "</futureMetadata>":
	            break;
	          case "<bk>":
	            break;
	          case "</bk>":
	            break;
	          case "<rc":
	            if (metatype == 1) out.Cell.push({
	              type: out.Types[y.t - 1].name,
	              index: +y.v
	            }); else if (metatype == 0) out.Value.push({
	              type: out.Types[y.t - 1].name,
	              index: +y.v
	            });
	            break;
	          case "</rc>":
	            break;
	          case "<cellMetadata":
	            metatype = 1;
	            break;
	          case "</cellMetadata>":
	            metatype = 2;
	            break;
	          case "<valueMetadata":
	            metatype = 0;
	            break;
	          case "</valueMetadata>":
	            metatype = 2;
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	          case "<extLst/>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          case "<rvb":
	            if (!lastmeta) break;
	            if (!lastmeta.offsets) lastmeta.offsets = [];
	            lastmeta.offsets.push(+y.i);
	            break;
	          default:
	            if (!pass && (opts == null ? void 0 : opts.WTF)) throw new Error("unrecognized " + y[0] + " in metadata");
	        }
	        return x;
	      });
	      return out;
	    }
	    function write_xlmeta_xml() {
	      var o = [XML_HEADER];
	      o.push("<metadata xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:xlrd=\"http://schemas.microsoft.com/office/spreadsheetml/2017/richdata\" xmlns:xda=\"http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray\">\n  <metadataTypes count=\"1\">\n    <metadataType name=\"XLDAPR\" minSupportedVersion=\"120000\" copy=\"1\" pasteAll=\"1\" pasteValues=\"1\" merge=\"1\" splitFirst=\"1\" rowColShift=\"1\" clearFormats=\"1\" clearComments=\"1\" assign=\"1\" coerce=\"1\" cellMeta=\"1\"/>\n  </metadataTypes>\n  <futureMetadata name=\"XLDAPR\" count=\"1\">\n    <bk>\n      <extLst>\n        <ext uri=\"{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}\">\n          <xda:dynamicArrayProperties fDynamic=\"1\" fCollapsed=\"0\"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count=\"1\">\n    <bk>\n      <rc t=\"1\" v=\"0\"/>\n    </bk>\n  </cellMetadata>\n</metadata>");
	      return o.join("");
	    }
	    function parse_cc_xml(data) {
	      var d = [];
	      if (!data) return d;
	      var i = 1;
	      (data.match(tagregex) || []).forEach(function (x) {
	        var y = parsexmltag(x);
	        switch (y[0]) {
	          case "<?xml":
	            break;
	          case "<calcChain":
	          case "<calcChain>":
	          case "</calcChain>":
	            break;
	          case "<c":
	            delete y[0];
	            if (y.i) i = y.i; else y.i = i;
	            d.push(y);
	            break;
	        }
	      });
	      return d;
	    }
	    function parse_BrtCalcChainItem$(data) {
	      var out = {};
	      out.i = data.read_shift(4);
	      var cell = {};
	      cell.r = data.read_shift(4);
	      cell.c = data.read_shift(4);
	      out.r = encode_cell(cell);
	      var flags = data.read_shift(1);
	      if (flags & 2) out.l = "1";
	      if (flags & 8) out.a = "1";
	      return out;
	    }
	    function parse_cc_bin(data, name, opts) {
	      var out = [];
	      recordhopper(data, function hopper_cc(val, R, RT) {
	        switch (RT) {
	          case 63:
	            out.push(val);
	            break;
	          default:
	            if (R.T) ; else throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      });
	      return out;
	    }
	    function parse_xlink_xml() {}
	    function parse_xlink_bin(data, rel, name, _opts) {
	      if (!data) return data;
	      var opts = _opts || ({});
	      var pass = false;
	      recordhopper(data, function xlink_parse(val, R, RT) {
	        switch (RT) {
	          case 359:
	          case 363:
	          case 364:
	          case 366:
	          case 367:
	          case 368:
	          case 369:
	          case 370:
	          case 371:
	          case 472:
	          case 577:
	          case 578:
	          case 579:
	          case 580:
	          case 581:
	          case 582:
	          case 583:
	          case 584:
	          case 585:
	          case 586:
	          case 587:
	            break;
	          case 35:
	            pass = true;
	            break;
	          case 36:
	            pass = false;
	            break;
	          default:
	            if (R.T) ; else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      }, opts);
	    }
	    function parse_drawing(data, rels) {
	      if (!data) return "??";
	      var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
	      return rels["!id"][id].Target;
	    }
	    var shapevmlregex = /<(?:\w+:)?shape(?:[^\w][^>]*)?>([\s\S]*?)<\/(?:\w+:)?shape>/g;
	    function parse_vml(data, sheet, comments) {
	      var cidx = 0;
	      (data.match(shapevmlregex) || []).forEach(function (m) {
	        var type = "";
	        var hidden = true;
	        var aidx = -1;
	        var R = -1, C = -1;
	        m.replace(tagregex, function (x, idx) {
	          var y = parsexmltag(x);
	          switch (strip_ns(y[0])) {
	            case "<ClientData":
	              if (y.ObjectType) type = y.ObjectType;
	              break;
	            case "<Visible":
	            case "<Visible/>":
	              hidden = false;
	              break;
	            case "<Row":
	            case "<Row>":
	              aidx = idx + x.length;
	              break;
	            case "</Row>":
	              R = +m.slice(aidx, idx).trim();
	              break;
	            case "<Column":
	            case "<Column>":
	              aidx = idx + x.length;
	              break;
	            case "</Column>":
	              C = +m.slice(aidx, idx).trim();
	              break;
	          }
	          return "";
	        });
	        switch (type) {
	          case "Note":
	            var cell = ws_get_cell_stub(sheet, R >= 0 && C >= 0 ? encode_cell({
	              r: R,
	              c: C
	            }) : comments[cidx].ref);
	            if (cell.c) {
	              cell.c.hidden = hidden;
	            }
	            ++cidx;
	            break;
	        }
	      });
	    }
	    function write_vml(rId, comments, ws) {
	      var csize = [21600, 21600];
	      var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(",");
	      var o = [writextag("xml", null, {
	        "xmlns:v": XLMLNS.v,
	        "xmlns:o": XLMLNS.o,
	        "xmlns:x": XLMLNS.x,
	        "xmlns:mv": XLMLNS.mv
	      }).replace(/\/>/, ">"), writextag("o:shapelayout", writextag("o:idmap", null, {
	        "v:ext": "edit",
	        "data": rId
	      }), {
	        "v:ext": "edit"
	      })];
	      var _shapeid = 65536 * rId;
	      var _comments = comments || [];
	      if (_comments.length > 0) o.push(writextag("v:shapetype", [writextag("v:stroke", null, {
	        joinstyle: "miter"
	      }), writextag("v:path", null, {
	        gradientshapeok: "t",
	        "o:connecttype": "rect"
	      })].join(""), {
	        id: "_x0000_t202",
	        coordsize: csize.join(","),
	        "o:spt": 202,
	        path: bbox
	      }));
	      _comments.forEach(function (x) {
	        ++_shapeid;
	        o.push(write_vml_comment(x, _shapeid));
	      });
	      o.push("</xml>");
	      return o.join("");
	    }
	    function write_vml_comment(x, _shapeid, ws) {
	      var c = decode_cell(x[0]);
	      var fillopts = {
	        "color2": "#BEFF82",
	        "type": "gradient"
	      };
	      if (fillopts.type == "gradient") fillopts.angle = "-180";
	      var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, {
	        type: "gradientUnscaled",
	        "v:ext": "view"
	      }) : null;
	      var fillxml = writextag("v:fill", fillparm, fillopts);
	      var shadata = {
	        on: "t",
	        "obscured": "t"
	      };
	      return ["<v:shape" + wxt_helper({
	        id: "_x0000_s" + _shapeid,
	        type: "#_x0000_t202",
	        style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : ""),
	        fillcolor: "#ECFAD4",
	        strokecolor: "#edeaa1"
	      }) + ">", fillxml, writextag("v:shadow", null, shadata), writextag("v:path", null, {
	        "o:connecttype": "none"
	      }), "<v:textbox><div style=\"text-align:left\"></div></v:textbox>", "<x:ClientData ObjectType=\"Note\">", "<x:MoveWithCells/>", "<x:SizeWithCells/>", writetag("x:Anchor", [c.c + 1, 0, c.r + 1, 0, c.c + 3, 20, c.r + 5, 20].join(",")), writetag("x:AutoFill", "False"), writetag("x:Row", String(c.r)), writetag("x:Column", String(c.c)), x[1].hidden ? "" : "<x:Visible/>", "</x:ClientData>", "</v:shape>"].join("");
	    }
	    function sheet_insert_comments(sheet, comments, threaded, people) {
	      var dense = sheet["!data"] != null;
	      var cell;
	      comments.forEach(function (comment) {
	        var r = decode_cell(comment.ref);
	        if (r.r < 0 || r.c < 0) return;
	        if (dense) {
	          if (!sheet["!data"][r.r]) sheet["!data"][r.r] = [];
	          cell = sheet["!data"][r.r][r.c];
	        } else cell = sheet[comment.ref];
	        if (!cell) {
	          cell = {
	            t: "z"
	          };
	          if (dense) sheet["!data"][r.r][r.c] = cell; else sheet[comment.ref] = cell;
	          var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
	          if (range.s.r > r.r) range.s.r = r.r;
	          if (range.e.r < r.r) range.e.r = r.r;
	          if (range.s.c > r.c) range.s.c = r.c;
	          if (range.e.c < r.c) range.e.c = r.c;
	          var encoded = encode_range(range);
	          sheet["!ref"] = encoded;
	        }
	        if (!cell.c) cell.c = [];
	        var o = {
	          a: comment.author,
	          t: comment.t,
	          r: comment.r,
	          T: threaded
	        };
	        if (comment.h) o.h = comment.h;
	        for (var i = cell.c.length - 1; i >= 0; --i) {
	          if (!threaded && cell.c[i].T) return;
	          if (threaded && !cell.c[i].T) cell.c.splice(i, 1);
	        }
	        if (threaded && people) for (i = 0; i < people.length; ++i) {
	          if (o.a == people[i].id) {
	            o.a = people[i].name || o.a;
	            break;
	          }
	        }
	        cell.c.push(o);
	      });
	    }
	    function parse_comments_xml(data, opts) {
	      if (data.match(/<(?:\w+:)?comments *\/>/)) return [];
	      var authors = [];
	      var commentList = [];
	      var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
	      if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function (x) {
	        if (x === "" || x.trim() === "") return;
	        var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
	        if (a) authors.push(a[1]);
	      });
	      var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
	      if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function (x) {
	        if (x === "" || x.trim() === "") return;
	        var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
	        if (!cm) return;
	        var y = parsexmltag(cm[0]);
	        var comment = {
	          author: y.authorId && authors[y.authorId] || "sheetjsghost",
	          ref: y.ref,
	          guid: y.guid
	        };
	        var cell = decode_cell(y.ref);
	        if (opts.sheetRows && opts.sheetRows <= cell.r) return;
	        var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
	        var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || ({
	          r: "",
	          t: "",
	          h: ""
	        });
	        comment.r = rt.r;
	        if (rt.r == "<t></t>") rt.t = rt.h = "";
	        comment.t = (rt.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
	        if (opts.cellHTML) comment.h = rt.h;
	        commentList.push(comment);
	      });
	      return commentList;
	    }
	    function write_comments_xml(data) {
	      var o = [XML_HEADER, writextag("comments", null, {
	        "xmlns": XMLNS_main[0]
	      })];
	      var iauthor = [];
	      o.push("<authors>");
	      data.forEach(function (x) {
	        x[1].forEach(function (w) {
	          var a = escapexml(w.a);
	          if (iauthor.indexOf(a) == -1) {
	            iauthor.push(a);
	            o.push("<author>" + a + "</author>");
	          }
	          if (w.T && w.ID && iauthor.indexOf("tc=" + w.ID) == -1) {
	            iauthor.push("tc=" + w.ID);
	            o.push("<author>" + "tc=" + w.ID + "</author>");
	          }
	        });
	      });
	      if (iauthor.length == 0) {
	        iauthor.push("SheetJ5");
	        o.push("<author>SheetJ5</author>");
	      }
	      o.push("</authors>");
	      o.push("<commentList>");
	      data.forEach(function (d) {
	        var lastauthor = 0, ts = [], tcnt = 0;
	        if (d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf("tc=" + d[1][0].ID);
	        d[1].forEach(function (c) {
	          if (c.a) lastauthor = iauthor.indexOf(escapexml(c.a));
	          if (c.T) ++tcnt;
	          ts.push(c.t == null ? "" : escapexml(c.t));
	        });
	        if (tcnt === 0) {
	          d[1].forEach(function (c) {
	            o.push("<comment ref=\"" + d[0] + "\" authorId=\"" + iauthor.indexOf(escapexml(c.a)) + "\"><text>");
	            o.push(writetag("t", c.t == null ? "" : escapexml(c.t)));
	            o.push("</text></comment>");
	          });
	        } else {
	          if (d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf("tc=" + d[1][0].ID);
	          o.push("<comment ref=\"" + d[0] + "\" authorId=\"" + lastauthor + "\"><text>");
	          var t = "Comment:\n    " + ts[0] + "\n";
	          for (var i = 1; i < ts.length; ++i) t += "Reply:\n    " + ts[i] + "\n";
	          o.push(writetag("t", escapexml(t)));
	          o.push("</text></comment>");
	        }
	      });
	      o.push("</commentList>");
	      if (o.length > 2) {
	        o[o.length] = "</comments>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    function parse_tcmnt_xml(data, opts) {
	      var out = [];
	      var pass = false, comment = {}, tidx = 0;
	      data.replace(tagregex, function xml_tcmnt(x, idx) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<?xml":
	            break;
	          case "<ThreadedComments":
	            break;
	          case "</ThreadedComments>":
	            break;
	          case "<threadedComment":
	            comment = {
	              author: y.personId,
	              guid: y.id,
	              ref: y.ref,
	              T: 1
	            };
	            break;
	          case "</threadedComment>":
	            if (comment.t != null) out.push(comment);
	            break;
	          case "<text>":
	          case "<text":
	            tidx = idx + x.length;
	            break;
	          case "</text>":
	            comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
	            break;
	          case "<mentions":
	          case "<mentions>":
	            pass = true;
	            break;
	          case "</mentions>":
	            pass = false;
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	          case "<extLst/>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
	        }
	        return x;
	      });
	      return out;
	    }
	    function write_tcmnt_xml(comments, people, opts) {
	      var o = [XML_HEADER, writextag("ThreadedComments", null, {
	        "xmlns": XMLNS.TCMNT
	      }).replace(/[\/]>/, ">")];
	      comments.forEach(function (carr) {
	        var rootid = "";
	        (carr[1] || []).forEach(function (c, idx) {
	          if (!c.T) {
	            delete c.ID;
	            return;
	          }
	          if (c.a && people.indexOf(c.a) == -1) people.push(c.a);
	          var tcopts = {
	            ref: carr[0],
	            id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
	          };
	          if (idx == 0) rootid = tcopts.id; else tcopts.parentId = rootid;
	          c.ID = tcopts.id;
	          if (c.a) tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c.a)).slice(-12) + "}";
	          o.push(writextag("threadedComment", writetag("text", c.t || ""), tcopts));
	        });
	      });
	      o.push("</ThreadedComments>");
	      return o.join("");
	    }
	    function parse_people_xml(data, opts) {
	      var out = [];
	      var pass = false;
	      data.replace(tagregex, function xml_tcmnt(x) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<?xml":
	            break;
	          case "<personList":
	            break;
	          case "</personList>":
	            break;
	          case "<person":
	            out.push({
	              name: y.displayname,
	              id: y.id
	            });
	            break;
	          case "</person>":
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	          case "<extLst/>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          default:
	            if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
	        }
	        return x;
	      });
	      return out;
	    }
	    function write_people_xml(people) {
	      var o = [XML_HEADER, writextag("personList", null, {
	        "xmlns": XMLNS.TCMNT,
	        "xmlns:x": XMLNS_main[0]
	      }).replace(/[\/]>/, ">")];
	      people.forEach(function (person, idx) {
	        o.push(writextag("person", null, {
	          displayName: person,
	          id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
	          userId: person,
	          providerId: "None"
	        }));
	      });
	      o.push("</personList>");
	      return o.join("");
	    }
	    function parse_BrtBeginComment(data) {
	      var out = {};
	      out.iauthor = data.read_shift(4);
	      var rfx = parse_UncheckedRfX(data);
	      out.rfx = rfx.s;
	      out.ref = encode_cell(rfx.s);
	      data.l += 16;
	      return out;
	    }
	    function write_BrtBeginComment(data, o) {
	      if (o == null) o = new_buf(36);
	      o.write_shift(4, data[1].iauthor);
	      write_UncheckedRfX(data[0], o);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      return o;
	    }
	    var parse_BrtCommentAuthor = parse_XLWideString;
	    function write_BrtCommentAuthor(data) {
	      return write_XLWideString(data.slice(0, 54));
	    }
	    function parse_comments_bin(data, opts) {
	      var out = [];
	      var authors = [];
	      var c = {};
	      var pass = false;
	      recordhopper(data, function hopper_cmnt(val, R, RT) {
	        switch (RT) {
	          case 632:
	            authors.push(val);
	            break;
	          case 635:
	            c = val;
	            break;
	          case 637:
	            c.t = val.t;
	            c.h = val.h;
	            c.r = val.r;
	            break;
	          case 636:
	            c.author = authors[c.iauthor];
	            delete c.iauthor;
	            if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
	            if (!c.t) c.t = "";
	            delete c.rfx;
	            out.push(c);
	            break;
	          case 3072:
	            break;
	          case 35:
	            pass = true;
	            break;
	          case 36:
	            pass = false;
	            break;
	          case 37:
	            break;
	          case 38:
	            break;
	          default:
	            if (R.T) ; else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      });
	      return out;
	    }
	    function write_comments_bin(data) {
	      var ba = buf_array();
	      var iauthor = [];
	      write_record(ba, 628);
	      write_record(ba, 630);
	      data.forEach(function (comment) {
	        comment[1].forEach(function (c) {
	          if (iauthor.indexOf(c.a) > -1) return;
	          iauthor.push(c.a.slice(0, 54));
	          write_record(ba, 632, write_BrtCommentAuthor(c.a));
	          if (c.T && c.ID && iauthor.indexOf("tc=" + c.ID) == -1) {
	            iauthor.push("tc=" + c.ID);
	            write_record(ba, 632, write_BrtCommentAuthor("tc=" + c.ID));
	          }
	        });
	      });
	      write_record(ba, 631);
	      write_record(ba, 633);
	      data.forEach(function (comment) {
	        comment[1].forEach(function (c) {
	          var _ia = -1;
	          if (c.ID) _ia = iauthor.indexOf("tc=" + c.ID);
	          if (_ia == -1 && comment[1][0].T && comment[1][0].ID) _ia = iauthor.indexOf("tc=" + comment[1][0].ID);
	          if (_ia == -1) _ia = iauthor.indexOf(c.a);
	          c.iauthor = _ia;
	          var range = {
	            s: decode_cell(comment[0]),
	            e: decode_cell(comment[0])
	          };
	          write_record(ba, 635, write_BrtBeginComment([range, c]));
	          if (c.t && c.t.length > 0) write_record(ba, 637, write_BrtCommentText(c));
	          write_record(ba, 636);
	          delete c.iauthor;
	        });
	      });
	      write_record(ba, 634);
	      write_record(ba, 629);
	      return ba.end();
	    }
	    var CT_VBA = "application/vnd.ms-office.vbaProject";
	    function make_vba_xls(cfb) {
	      var newcfb = CFB.utils.cfb_new({
	        root: "R"
	      });
	      cfb.FullPaths.forEach(function (p, i) {
	        if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/)) return;
	        var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
	        CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
	      });
	      return CFB.write(newcfb);
	    }
	    function fill_vba_xls(cfb, vba) {
	      vba.FullPaths.forEach(function (p, i) {
	        if (i == 0) return;
	        var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
	        if (newpath.slice(-1) !== "/") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
	      });
	    }
	    var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
	    function parse_ds_bin() {
	      return {
	        "!type": "dialog"
	      };
	    }
	    function parse_ds_xml() {
	      return {
	        "!type": "dialog"
	      };
	    }
	    function parse_ms_bin() {
	      return {
	        "!type": "macro"
	      };
	    }
	    function parse_ms_xml() {
	      return {
	        "!type": "macro"
	      };
	    }
	    var rc_to_a1 = (function () {
	      var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
	      var rcbase = {
	        r: 0,
	        c: 0
	      };
	      function rcfunc($$, $1, $2, $3) {
	        var cRel = false, rRel = false;
	        if ($2.length == 0) rRel = true; else if ($2.charAt(0) == "[") {
	          rRel = true;
	          $2 = $2.slice(1, -1);
	        }
	        if ($3.length == 0) cRel = true; else if ($3.charAt(0) == "[") {
	          cRel = true;
	          $3 = $3.slice(1, -1);
	        }
	        var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
	        if (cRel) C += rcbase.c; else --C;
	        if (rRel) R += rcbase.r; else --R;
	        return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
	      }
	      return function rc_to_a1(fstr, base) {
	        rcbase = base;
	        return fstr.replace(rcregex, rcfunc);
	      };
	    })();
	    var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
	    var a1_to_rc = (function () {
	      return function a1_to_rc(fstr, base) {
	        return fstr.replace(crefregex, function ($0, $1, $2, $3, $4, $5) {
	          var c = decode_col($3) - ($2 ? 0 : base.c);
	          var r = decode_row($5) - ($4 ? 0 : base.r);
	          var R = $4 == "$" ? r + 1 : r == 0 ? "" : "[" + r + "]";
	          var C = $2 == "$" ? c + 1 : c == 0 ? "" : "[" + c + "]";
	          return $1 + "R" + R + "C" + C;
	        });
	      };
	    })();
	    function shift_formula_str(f, delta) {
	      return f.replace(crefregex, function ($0, $1, $2, $3, $4, $5) {
	        return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
	      });
	    }
	    function shift_formula_xlsx(f, range, cell) {
	      var r = decode_range(range), s = r.s, c = decode_cell(cell);
	      var delta = {
	        r: c.r - s.r,
	        c: c.c - s.c
	      };
	      return shift_formula_str(f, delta);
	    }
	    function fuzzyfmla(f) {
	      if (f.length == 1) return false;
	      return true;
	    }
	    function _xlfn(f) {
	      return f.replace(/_xlfn\./g, "");
	    }
	    function parseread1(blob) {
	      blob.l += 1;
	      return;
	    }
	    function parse_ColRelU(blob, length) {
	      var c = blob.read_shift(length == 1 ? 1 : 2);
	      return [c & 16383, c >> 14 & 1, c >> 15 & 1];
	    }
	    function parse_RgceArea(blob, length, opts) {
	      var w = 2;
	      if (opts) {
	        if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob); else if (opts.biff == 12) w = 4;
	      }
	      var r = blob.read_shift(w), R = blob.read_shift(w);
	      var c = parse_ColRelU(blob, 2);
	      var C = parse_ColRelU(blob, 2);
	      return {
	        s: {
	          r: r,
	          c: c[0],
	          cRel: c[1],
	          rRel: c[2]
	        },
	        e: {
	          r: R,
	          c: C[0],
	          cRel: C[1],
	          rRel: C[2]
	        }
	      };
	    }
	    function parse_RgceArea_BIFF2(blob) {
	      var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2);
	      var c = blob.read_shift(1);
	      var C = blob.read_shift(1);
	      return {
	        s: {
	          r: r[0],
	          c: c,
	          cRel: r[1],
	          rRel: r[2]
	        },
	        e: {
	          r: R[0],
	          c: C,
	          cRel: R[1],
	          rRel: R[2]
	        }
	      };
	    }
	    function parse_RgceAreaRel(blob, length, opts) {
	      if (opts.biff < 8) return parse_RgceArea_BIFF2(blob);
	      var r = blob.read_shift(opts.biff == 12 ? 4 : 2), R = blob.read_shift(opts.biff == 12 ? 4 : 2);
	      var c = parse_ColRelU(blob, 2);
	      var C = parse_ColRelU(blob, 2);
	      return {
	        s: {
	          r: r,
	          c: c[0],
	          cRel: c[1],
	          rRel: c[2]
	        },
	        e: {
	          r: R,
	          c: C[0],
	          cRel: C[1],
	          rRel: C[2]
	        }
	      };
	    }
	    function parse_RgceLoc(blob, length, opts) {
	      if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob);
	      var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
	      var c = parse_ColRelU(blob, 2);
	      return {
	        r: r,
	        c: c[0],
	        cRel: c[1],
	        rRel: c[2]
	      };
	    }
	    function parse_RgceLoc_BIFF2(blob) {
	      var r = parse_ColRelU(blob, 2);
	      var c = blob.read_shift(1);
	      return {
	        r: r[0],
	        c: c,
	        cRel: r[1],
	        rRel: r[2]
	      };
	    }
	    function parse_RgceElfLoc(blob) {
	      var r = blob.read_shift(2);
	      var c = blob.read_shift(2);
	      return {
	        r: r,
	        c: c & 255,
	        fQuoted: !!(c & 16384),
	        cRel: c >> 15,
	        rRel: c >> 15
	      };
	    }
	    function parse_RgceLocRel(blob, length, opts) {
	      var biff = opts && opts.biff ? opts.biff : 8;
	      if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob);
	      var r = blob.read_shift(biff >= 12 ? 4 : 2);
	      var cl = blob.read_shift(2);
	      var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
	      cl &= 16383;
	      if (rRel == 1) while (r > 524287) r -= 1048576;
	      if (cRel == 1) while (cl > 8191) cl = cl - 16384;
	      return {
	        r: r,
	        c: cl,
	        cRel: cRel,
	        rRel: rRel
	      };
	    }
	    function parse_RgceLocRel_BIFF2(blob) {
	      var rl = blob.read_shift(2);
	      var c = blob.read_shift(1);
	      var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
	      rl &= 16383;
	      if (rRel == 1 && rl >= 8192) rl = rl - 16384;
	      if (cRel == 1 && c >= 128) c = c - 256;
	      return {
	        r: rl,
	        c: c,
	        cRel: cRel,
	        rRel: rRel
	      };
	    }
	    function parse_PtgArea(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
	      return [type, area];
	    }
	    function parse_PtgArea3d(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      var ixti = blob.read_shift(2, "i");
	      var w = 8;
	      if (opts) switch (opts.biff) {
	        case 5:
	          blob.l += 12;
	          w = 6;
	          break;
	        case 12:
	          w = 12;
	          break;
	      }
	      var area = parse_RgceArea(blob, w, opts);
	      return [type, ixti, area];
	    }
	    function parse_PtgAreaErr(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
	      return [type];
	    }
	    function parse_PtgAreaErr3d(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      var ixti = blob.read_shift(2);
	      var w = 8;
	      if (opts) switch (opts.biff) {
	        case 5:
	          blob.l += 12;
	          w = 6;
	          break;
	        case 12:
	          w = 12;
	          break;
	      }
	      blob.l += w;
	      return [type, ixti];
	    }
	    function parse_PtgAreaN(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      var area = parse_RgceAreaRel(blob, length - 1, opts);
	      return [type, area];
	    }
	    function parse_PtgArray(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
	      return [type];
	    }
	    function parse_PtgAttrBaxcel(blob) {
	      var bitSemi = blob[blob.l + 1] & 1;
	      var bitBaxcel = 1;
	      blob.l += 4;
	      return [bitSemi, bitBaxcel];
	    }
	    function parse_PtgAttrChoose(blob, length, opts) {
	      blob.l += 2;
	      var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
	      var o = [];
	      for (var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
	      return o;
	    }
	    function parse_PtgAttrGoto(blob, length, opts) {
	      var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
	      blob.l += 2;
	      return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
	    }
	    function parse_PtgAttrIf(blob, length, opts) {
	      var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
	      blob.l += 2;
	      return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
	    }
	    function parse_PtgAttrIfError(blob) {
	      var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
	      blob.l += 2;
	      return [bitIf, blob.read_shift(2)];
	    }
	    function parse_PtgAttrSemi(blob, length, opts) {
	      var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
	      blob.l += opts && opts.biff == 2 ? 3 : 4;
	      return [bitSemi];
	    }
	    function parse_PtgAttrSpaceType(blob) {
	      var type = blob.read_shift(1), cch = blob.read_shift(1);
	      return [type, cch];
	    }
	    function parse_PtgAttrSpace(blob) {
	      blob.read_shift(2);
	      return parse_PtgAttrSpaceType(blob);
	    }
	    function parse_PtgAttrSpaceSemi(blob) {
	      blob.read_shift(2);
	      return parse_PtgAttrSpaceType(blob);
	    }
	    function parse_PtgRef(blob, length, opts) {
	      var type = (blob[blob.l] & 96) >> 5;
	      blob.l += 1;
	      var loc = parse_RgceLoc(blob, 0, opts);
	      return [type, loc];
	    }
	    function parse_PtgRefN(blob, length, opts) {
	      var type = (blob[blob.l] & 96) >> 5;
	      blob.l += 1;
	      var loc = parse_RgceLocRel(blob, 0, opts);
	      return [type, loc];
	    }
	    function parse_PtgRef3d(blob, length, opts) {
	      var type = (blob[blob.l] & 96) >> 5;
	      blob.l += 1;
	      var ixti = blob.read_shift(2);
	      if (opts && opts.biff == 5) blob.l += 12;
	      var loc = parse_RgceLoc(blob, 0, opts);
	      return [type, ixti, loc];
	    }
	    function parse_PtgFunc(blob, length, opts) {
	      var type = (blob[blob.l] & 96) >> 5;
	      blob.l += 1;
	      var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
	      return [FtabArgc[iftab], Ftab[iftab], type];
	    }
	    function parse_PtgFuncVar(blob, length, opts) {
	      var type = blob[blob.l++];
	      var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [type == 88 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
	      return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
	    }
	    function parsetab(blob) {
	      return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
	    }
	    function parse_PtgAttrSum(blob, length, opts) {
	      blob.l += opts && opts.biff == 2 ? 3 : 4;
	      return;
	    }
	    function parse_PtgExp(blob, length, opts) {
	      blob.l++;
	      if (opts && opts.biff == 12) return [blob.read_shift(4, "i"), 0];
	      var row = blob.read_shift(2);
	      var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
	      return [row, col];
	    }
	    function parse_PtgErr(blob) {
	      blob.l++;
	      return BErr[blob.read_shift(1)];
	    }
	    function parse_PtgInt(blob) {
	      blob.l++;
	      return blob.read_shift(2);
	    }
	    function parse_PtgBool(blob) {
	      blob.l++;
	      return blob.read_shift(1) !== 0;
	    }
	    function parse_PtgNum(blob) {
	      blob.l++;
	      return parse_Xnum(blob);
	    }
	    function parse_PtgStr(blob, length, opts) {
	      blob.l++;
	      return parse_ShortXLUnicodeString(blob, length - 1, opts);
	    }
	    function parse_SerAr(blob, biff) {
	      var val = [blob.read_shift(1)];
	      if (biff == 12) switch (val[0]) {
	        case 2:
	          val[0] = 4;
	          break;
	        case 4:
	          val[0] = 16;
	          break;
	        case 0:
	          val[0] = 1;
	          break;
	        case 1:
	          val[0] = 2;
	          break;
	      }
	      switch (val[0]) {
	        case 4:
	          val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
	          if (biff != 12) blob.l += 7;
	          break;
	        case 37:
	        case 16:
	          val[1] = BErr[blob[blob.l]];
	          blob.l += biff == 12 ? 4 : 8;
	          break;
	        case 0:
	          blob.l += 8;
	          break;
	        case 1:
	          val[1] = parse_Xnum(blob);
	          break;
	        case 2:
	          val[1] = parse_XLUnicodeString2(blob, 0, {
	            biff: biff > 0 && biff < 8 ? 2 : biff
	          });
	          break;
	        default:
	          throw new Error("Bad SerAr: " + val[0]);
	      }
	      return val;
	    }
	    function parse_PtgExtraMem(blob, cce, opts) {
	      var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
	      var out = [];
	      for (var i = 0; i != count; ++i) out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob));
	      return out;
	    }
	    function parse_PtgExtraArray(blob, length, opts) {
	      var rows = 0, cols = 0;
	      if (opts.biff == 12) {
	        rows = blob.read_shift(4);
	        cols = blob.read_shift(4);
	      } else {
	        cols = 1 + blob.read_shift(1);
	        rows = 1 + blob.read_shift(2);
	      }
	      if (opts.biff >= 2 && opts.biff < 8) {
	        --rows;
	        if (--cols == 0) cols = 256;
	      }
	      for (var i = 0, o = []; i != rows && (o[i] = []); ++i) for (var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);
	      return o;
	    }
	    function parse_PtgName(blob, length, opts) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      var w = !opts || opts.biff >= 8 ? 4 : 2;
	      var nameindex = blob.read_shift(w);
	      switch (opts.biff) {
	        case 2:
	          blob.l += 5;
	          break;
	        case 3:
	        case 4:
	          blob.l += 8;
	          break;
	        case 5:
	          blob.l += 12;
	          break;
	      }
	      return [type, 0, nameindex];
	    }
	    function parse_PtgNameX(blob, length, opts) {
	      if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob);
	      var type = blob.read_shift(1) >>> 5 & 3;
	      var ixti = blob.read_shift(2);
	      var nameindex = blob.read_shift(4);
	      return [type, ixti, nameindex];
	    }
	    function parse_PtgNameX_BIFF5(blob) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      var ixti = blob.read_shift(2, "i");
	      blob.l += 8;
	      var nameindex = blob.read_shift(2);
	      blob.l += 12;
	      return [type, ixti, nameindex];
	    }
	    function parse_PtgMemArea(blob, length, opts) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      blob.l += opts && opts.biff == 2 ? 3 : 4;
	      var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
	      return [type, cce];
	    }
	    function parse_PtgMemFunc(blob, length, opts) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
	      return [type, cce];
	    }
	    function parse_PtgRefErr(blob, length, opts) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      blob.l += 4;
	      if (opts.biff < 8) blob.l--;
	      if (opts.biff == 12) blob.l += 2;
	      return [type];
	    }
	    function parse_PtgRefErr3d(blob, length, opts) {
	      var type = (blob[blob.l++] & 96) >> 5;
	      var ixti = blob.read_shift(2);
	      var w = 4;
	      if (opts) switch (opts.biff) {
	        case 5:
	          w = 15;
	          break;
	        case 12:
	          w = 6;
	          break;
	      }
	      blob.l += w;
	      return [type, ixti];
	    }
	    var parse_PtgMemErr = parsenoop;
	    var parse_PtgMemNoMem = parsenoop;
	    var parse_PtgTbl = parsenoop;
	    function parse_PtgElfLoc(blob, length, opts) {
	      blob.l += 2;
	      return [parse_RgceElfLoc(blob)];
	    }
	    function parse_PtgElfNoop(blob) {
	      blob.l += 6;
	      return [];
	    }
	    var parse_PtgElfCol = parse_PtgElfLoc;
	    var parse_PtgElfColS = parse_PtgElfNoop;
	    var parse_PtgElfColSV = parse_PtgElfNoop;
	    var parse_PtgElfColV = parse_PtgElfLoc;
	    function parse_PtgElfLel(blob) {
	      blob.l += 2;
	      return [parseuint16(blob), blob.read_shift(2) & 1];
	    }
	    var parse_PtgElfRadical = parse_PtgElfLoc;
	    var parse_PtgElfRadicalLel = parse_PtgElfLel;
	    var parse_PtgElfRadicalS = parse_PtgElfNoop;
	    var parse_PtgElfRw = parse_PtgElfLoc;
	    var parse_PtgElfRwV = parse_PtgElfLoc;
	    var PtgListRT = ["Data", "All", "Headers", "??", "?Data2", "??", "?DataHeaders", "??", "Totals", "??", "??", "??", "?DataTotals", "??", "??", "??", "?Current"];
	    function parse_PtgList(blob) {
	      blob.l += 2;
	      var ixti = blob.read_shift(2);
	      var flags = blob.read_shift(2);
	      var idx = blob.read_shift(4);
	      var c = blob.read_shift(2);
	      var C = blob.read_shift(2);
	      var rt = PtgListRT[flags >> 2 & 31];
	      return {
	        ixti: ixti,
	        coltype: flags & 3,
	        rt: rt,
	        idx: idx,
	        c: c,
	        C: C
	      };
	    }
	    function parse_PtgSxName(blob) {
	      blob.l += 2;
	      return [blob.read_shift(4)];
	    }
	    function parse_PtgSheet(blob, length, opts) {
	      blob.l += 5;
	      blob.l += 2;
	      blob.l += opts.biff == 2 ? 1 : 4;
	      return ["PTGSHEET"];
	    }
	    function parse_PtgEndSheet(blob, length, opts) {
	      blob.l += opts.biff == 2 ? 4 : 5;
	      return ["PTGENDSHEET"];
	    }
	    function parse_PtgMemAreaN(blob) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      var cce = blob.read_shift(2);
	      return [type, cce];
	    }
	    function parse_PtgMemNoMemN(blob) {
	      var type = blob.read_shift(1) >>> 5 & 3;
	      var cce = blob.read_shift(2);
	      return [type, cce];
	    }
	    function parse_PtgAttrNoop(blob) {
	      blob.l += 4;
	      return [0, 0];
	    }
	    var PtgTypes = {
	      1: {
	        n: "PtgExp",
	        f: parse_PtgExp
	      },
	      2: {
	        n: "PtgTbl",
	        f: parse_PtgTbl
	      },
	      3: {
	        n: "PtgAdd",
	        f: parseread1
	      },
	      4: {
	        n: "PtgSub",
	        f: parseread1
	      },
	      5: {
	        n: "PtgMul",
	        f: parseread1
	      },
	      6: {
	        n: "PtgDiv",
	        f: parseread1
	      },
	      7: {
	        n: "PtgPower",
	        f: parseread1
	      },
	      8: {
	        n: "PtgConcat",
	        f: parseread1
	      },
	      9: {
	        n: "PtgLt",
	        f: parseread1
	      },
	      10: {
	        n: "PtgLe",
	        f: parseread1
	      },
	      11: {
	        n: "PtgEq",
	        f: parseread1
	      },
	      12: {
	        n: "PtgGe",
	        f: parseread1
	      },
	      13: {
	        n: "PtgGt",
	        f: parseread1
	      },
	      14: {
	        n: "PtgNe",
	        f: parseread1
	      },
	      15: {
	        n: "PtgIsect",
	        f: parseread1
	      },
	      16: {
	        n: "PtgUnion",
	        f: parseread1
	      },
	      17: {
	        n: "PtgRange",
	        f: parseread1
	      },
	      18: {
	        n: "PtgUplus",
	        f: parseread1
	      },
	      19: {
	        n: "PtgUminus",
	        f: parseread1
	      },
	      20: {
	        n: "PtgPercent",
	        f: parseread1
	      },
	      21: {
	        n: "PtgParen",
	        f: parseread1
	      },
	      22: {
	        n: "PtgMissArg",
	        f: parseread1
	      },
	      23: {
	        n: "PtgStr",
	        f: parse_PtgStr
	      },
	      26: {
	        n: "PtgSheet",
	        f: parse_PtgSheet
	      },
	      27: {
	        n: "PtgEndSheet",
	        f: parse_PtgEndSheet
	      },
	      28: {
	        n: "PtgErr",
	        f: parse_PtgErr
	      },
	      29: {
	        n: "PtgBool",
	        f: parse_PtgBool
	      },
	      30: {
	        n: "PtgInt",
	        f: parse_PtgInt
	      },
	      31: {
	        n: "PtgNum",
	        f: parse_PtgNum
	      },
	      32: {
	        n: "PtgArray",
	        f: parse_PtgArray
	      },
	      33: {
	        n: "PtgFunc",
	        f: parse_PtgFunc
	      },
	      34: {
	        n: "PtgFuncVar",
	        f: parse_PtgFuncVar
	      },
	      35: {
	        n: "PtgName",
	        f: parse_PtgName
	      },
	      36: {
	        n: "PtgRef",
	        f: parse_PtgRef
	      },
	      37: {
	        n: "PtgArea",
	        f: parse_PtgArea
	      },
	      38: {
	        n: "PtgMemArea",
	        f: parse_PtgMemArea
	      },
	      39: {
	        n: "PtgMemErr",
	        f: parse_PtgMemErr
	      },
	      40: {
	        n: "PtgMemNoMem",
	        f: parse_PtgMemNoMem
	      },
	      41: {
	        n: "PtgMemFunc",
	        f: parse_PtgMemFunc
	      },
	      42: {
	        n: "PtgRefErr",
	        f: parse_PtgRefErr
	      },
	      43: {
	        n: "PtgAreaErr",
	        f: parse_PtgAreaErr
	      },
	      44: {
	        n: "PtgRefN",
	        f: parse_PtgRefN
	      },
	      45: {
	        n: "PtgAreaN",
	        f: parse_PtgAreaN
	      },
	      46: {
	        n: "PtgMemAreaN",
	        f: parse_PtgMemAreaN
	      },
	      47: {
	        n: "PtgMemNoMemN",
	        f: parse_PtgMemNoMemN
	      },
	      57: {
	        n: "PtgNameX",
	        f: parse_PtgNameX
	      },
	      58: {
	        n: "PtgRef3d",
	        f: parse_PtgRef3d
	      },
	      59: {
	        n: "PtgArea3d",
	        f: parse_PtgArea3d
	      },
	      60: {
	        n: "PtgRefErr3d",
	        f: parse_PtgRefErr3d
	      },
	      61: {
	        n: "PtgAreaErr3d",
	        f: parse_PtgAreaErr3d
	      },
	      255: {}
	    };
	    var PtgDupes = {
	      64: 32,
	      96: 32,
	      65: 33,
	      97: 33,
	      66: 34,
	      98: 34,
	      67: 35,
	      99: 35,
	      68: 36,
	      100: 36,
	      69: 37,
	      101: 37,
	      70: 38,
	      102: 38,
	      71: 39,
	      103: 39,
	      72: 40,
	      104: 40,
	      73: 41,
	      105: 41,
	      74: 42,
	      106: 42,
	      75: 43,
	      107: 43,
	      76: 44,
	      108: 44,
	      77: 45,
	      109: 45,
	      78: 46,
	      110: 46,
	      79: 47,
	      111: 47,
	      88: 34,
	      120: 34,
	      89: 57,
	      121: 57,
	      90: 58,
	      122: 58,
	      91: 59,
	      123: 59,
	      92: 60,
	      124: 60,
	      93: 61,
	      125: 61
	    };
	    var Ptg18 = {
	      1: {
	        n: "PtgElfLel",
	        f: parse_PtgElfLel
	      },
	      2: {
	        n: "PtgElfRw",
	        f: parse_PtgElfRw
	      },
	      3: {
	        n: "PtgElfCol",
	        f: parse_PtgElfCol
	      },
	      6: {
	        n: "PtgElfRwV",
	        f: parse_PtgElfRwV
	      },
	      7: {
	        n: "PtgElfColV",
	        f: parse_PtgElfColV
	      },
	      10: {
	        n: "PtgElfRadical",
	        f: parse_PtgElfRadical
	      },
	      11: {
	        n: "PtgElfRadicalS",
	        f: parse_PtgElfRadicalS
	      },
	      13: {
	        n: "PtgElfColS",
	        f: parse_PtgElfColS
	      },
	      15: {
	        n: "PtgElfColSV",
	        f: parse_PtgElfColSV
	      },
	      16: {
	        n: "PtgElfRadicalLel",
	        f: parse_PtgElfRadicalLel
	      },
	      25: {
	        n: "PtgList",
	        f: parse_PtgList
	      },
	      29: {
	        n: "PtgSxName",
	        f: parse_PtgSxName
	      },
	      255: {}
	    };
	    var Ptg19 = {
	      0: {
	        n: "PtgAttrNoop",
	        f: parse_PtgAttrNoop
	      },
	      1: {
	        n: "PtgAttrSemi",
	        f: parse_PtgAttrSemi
	      },
	      2: {
	        n: "PtgAttrIf",
	        f: parse_PtgAttrIf
	      },
	      4: {
	        n: "PtgAttrChoose",
	        f: parse_PtgAttrChoose
	      },
	      8: {
	        n: "PtgAttrGoto",
	        f: parse_PtgAttrGoto
	      },
	      16: {
	        n: "PtgAttrSum",
	        f: parse_PtgAttrSum
	      },
	      32: {
	        n: "PtgAttrBaxcel",
	        f: parse_PtgAttrBaxcel
	      },
	      33: {
	        n: "PtgAttrBaxcel",
	        f: parse_PtgAttrBaxcel
	      },
	      64: {
	        n: "PtgAttrSpace",
	        f: parse_PtgAttrSpace
	      },
	      65: {
	        n: "PtgAttrSpaceSemi",
	        f: parse_PtgAttrSpaceSemi
	      },
	      128: {
	        n: "PtgAttrIfError",
	        f: parse_PtgAttrIfError
	      },
	      255: {}
	    };
	    function parse_RgbExtra(blob, length, rgce, opts) {
	      if (opts.biff < 8) return parsenoop(blob, length);
	      var target = blob.l + length;
	      var o = [];
	      for (var i = 0; i !== rgce.length; ++i) {
	        switch (rgce[i][0]) {
	          case "PtgArray":
	            rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
	            o.push(rgce[i][1]);
	            break;
	          case "PtgMemArea":
	            rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
	            o.push(rgce[i][2]);
	            break;
	          case "PtgExp":
	            if (opts && opts.biff == 12) {
	              rgce[i][1][1] = blob.read_shift(4);
	              o.push(rgce[i][1]);
	            }
	            break;
	          case "PtgList":
	          case "PtgElfRadicalS":
	          case "PtgElfColS":
	          case "PtgElfColSV":
	            throw "Unsupported " + rgce[i][0];
	        }
	      }
	      length = target - blob.l;
	      if (length !== 0) o.push(parsenoop(blob, length));
	      return o;
	    }
	    function parse_Rgce(blob, length, opts) {
	      var target = blob.l + length;
	      var R, id, ptgs = [];
	      while (target != blob.l) {
	        length = target - blob.l;
	        id = blob[blob.l];
	        R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
	        if (id === 24 || id === 25) R = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
	        if (!R || !R.f) {
	          parsenoop(blob, length);
	        } else {
	          ptgs.push([R.n, R.f(blob, length, opts)]);
	        }
	      }
	      return ptgs;
	    }
	    function stringify_array(f) {
	      var o = [];
	      for (var i = 0; i < f.length; ++i) {
	        var x = f[i], r = [];
	        for (var j = 0; j < x.length; ++j) {
	          var y = x[j];
	          if (y) switch (y[0]) {
	            case 2:
	              r.push("\"" + y[1].replace(/"/g, "\"\"") + "\"");
	              break;
	            default:
	              r.push(y[1]);
	          } else r.push("");
	        }
	        o.push(r.join(","));
	      }
	      return o.join(";");
	    }
	    var PtgBinOp = {
	      PtgAdd: "+",
	      PtgConcat: "&",
	      PtgDiv: "/",
	      PtgEq: "=",
	      PtgGe: ">=",
	      PtgGt: ">",
	      PtgLe: "<=",
	      PtgLt: "<",
	      PtgMul: "*",
	      PtgNe: "<>",
	      PtgPower: "^",
	      PtgSub: "-"
	    };
	    function make_3d_range(start, end) {
	      var s = start.lastIndexOf("!"), e = end.lastIndexOf("!");
	      if (s == -1 && e == -1) return start + ":" + end;
	      if (s > 0 && e > 0 && start.slice(0, s).toLowerCase() == end.slice(0, e).toLowerCase()) return start + ":" + end.slice(e + 1);
	      console.error("Cannot hydrate range", start, end);
	      return start + ":" + end;
	    }
	    function get_ixti_raw(supbooks, ixti, opts) {
	      if (!supbooks) return "SH33TJSERR0";
	      if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
	      if (!supbooks.XTI) return "SH33TJSERR6";
	      var XTI = supbooks.XTI[ixti];
	      if (opts.biff < 8) {
	        if (ixti > 10000) ixti -= 65536;
	        if (ixti < 0) ixti = -ixti;
	        return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
	      }
	      if (!XTI) return "SH33TJSERR1";
	      var o = "";
	      if (opts.biff > 8) switch (supbooks[XTI[0]][0]) {
	        case 357:
	          o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
	          return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
	        case 358:
	          if (opts.SID != null) return supbooks.SheetNames[opts.SID];
	          return "SH33TJSSAME" + supbooks[XTI[0]][0];
	        case 355:
	        default:
	          return "SH33TJSSRC" + supbooks[XTI[0]][0];
	      }
	      switch (supbooks[XTI[0]][0][0]) {
	        case 1025:
	          o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
	          return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
	        case 14849:
	          return supbooks[XTI[0]].slice(1).map(function (name) {
	            return name.Name;
	          }).join(";;");
	        default:
	          if (!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
	          o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
	          return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
	      }
	    }
	    function get_ixti(supbooks, ixti, opts) {
	      var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
	      return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
	    }
	    function stringify_formula(formula, range, cell, supbooks, opts) {
	      var biff = opts && opts.biff || 8;
	      var _range = {
	        s: {
	          c: 0,
	          r: 0
	        },
	        e: {
	          c: 0,
	          r: 0
	        }
	      };
	      var stack = [], e1, e2, c, ixti = 0, nameidx = 0, r, sname = "";
	      if (!formula[0] || !formula[0][0]) return "";
	      var last_sp = -1, sp = "";
	      for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
	        var f = formula[0][ff];
	        switch (f[0]) {
	          case "PtgUminus":
	            stack.push("-" + stack.pop());
	            break;
	          case "PtgUplus":
	            stack.push("+" + stack.pop());
	            break;
	          case "PtgPercent":
	            stack.push(stack.pop() + "%");
	            break;
	          case "PtgAdd":
	          case "PtgConcat":
	          case "PtgDiv":
	          case "PtgEq":
	          case "PtgGe":
	          case "PtgGt":
	          case "PtgLe":
	          case "PtgLt":
	          case "PtgMul":
	          case "PtgNe":
	          case "PtgPower":
	          case "PtgSub":
	            e1 = stack.pop();
	            e2 = stack.pop();
	            if (last_sp >= 0) {
	              switch (formula[0][last_sp][1][0]) {
	                case 0:
	                  sp = fill(" ", formula[0][last_sp][1][1]);
	                  break;
	                case 1:
	                  sp = fill("\r", formula[0][last_sp][1][1]);
	                  break;
	                default:
	                  sp = "";
	                  if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
	              }
	              e2 = e2 + sp;
	              last_sp = -1;
	            }
	            stack.push(e2 + PtgBinOp[f[0]] + e1);
	            break;
	          case "PtgIsect":
	            e1 = stack.pop();
	            e2 = stack.pop();
	            stack.push(e2 + " " + e1);
	            break;
	          case "PtgUnion":
	            e1 = stack.pop();
	            e2 = stack.pop();
	            stack.push(e2 + "," + e1);
	            break;
	          case "PtgRange":
	            e1 = stack.pop();
	            e2 = stack.pop();
	            stack.push(make_3d_range(e2, e1));
	            break;
	          case "PtgAttrChoose":
	            break;
	          case "PtgAttrGoto":
	            break;
	          case "PtgAttrIf":
	            break;
	          case "PtgAttrIfError":
	            break;
	          case "PtgRef":
	            c = shift_cell_xls(f[1][1], _range, opts);
	            stack.push(encode_cell_xls(c, biff));
	            break;
	          case "PtgRefN":
	            c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
	            stack.push(encode_cell_xls(c, biff));
	            break;
	          case "PtgRef3d":
	            ixti = f[1][1];
	            c = shift_cell_xls(f[1][2], _range, opts);
	            sname = get_ixti(supbooks, ixti, opts);
	            stack.push(sname + "!" + encode_cell_xls(c, biff));
	            break;
	          case "PtgFunc":
	          case "PtgFuncVar":
	            var argc = f[1][0], func = f[1][1];
	            if (!argc) argc = 0;
	            argc &= 127;
	            var args = argc == 0 ? [] : stack.slice(-argc);
	            stack.length -= argc;
	            if (func === "User") func = args.shift();
	            stack.push(func + "(" + args.join(",") + ")");
	            break;
	          case "PtgBool":
	            stack.push(f[1] ? "TRUE" : "FALSE");
	            break;
	          case "PtgInt":
	            stack.push(f[1]);
	            break;
	          case "PtgNum":
	            stack.push(String(f[1]));
	            break;
	          case "PtgStr":
	            stack.push("\"" + f[1].replace(/"/g, "\"\"") + "\"");
	            break;
	          case "PtgErr":
	            stack.push(f[1]);
	            break;
	          case "PtgAreaN":
	            r = shift_range_xls(f[1][1], cell ? {
	              s: cell
	            } : _range, opts);
	            stack.push(encode_range_xls(r, opts));
	            break;
	          case "PtgArea":
	            r = shift_range_xls(f[1][1], _range, opts);
	            stack.push(encode_range_xls(r, opts));
	            break;
	          case "PtgArea3d":
	            ixti = f[1][1];
	            r = f[1][2];
	            sname = get_ixti(supbooks, ixti, opts);
	            stack.push(sname + "!" + encode_range_xls(r, opts));
	            break;
	          case "PtgAttrSum":
	            stack.push("SUM(" + stack.pop() + ")");
	            break;
	          case "PtgAttrBaxcel":
	          case "PtgAttrSemi":
	            break;
	          case "PtgName":
	            nameidx = f[1][2];
	            var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
	            var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
	            if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
	            stack.push(name);
	            break;
	          case "PtgNameX":
	            var bookidx = f[1][1];
	            nameidx = f[1][2];
	            var externbook;
	            if (opts.biff <= 5) {
	              if (bookidx < 0) bookidx = -bookidx;
	              if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
	            } else {
	              var o = "";
	              if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) ; else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
	                if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
	                  o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
	                }
	              } else o = supbooks.SheetNames[nameidx - 1] + "!";
	              if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name; else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name; else {
	                var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
	                if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; else o += "SH33TJSERRX";
	              }
	              stack.push(o);
	              break;
	            }
	            if (!externbook) externbook = {
	              Name: "SH33TJSERRY"
	            };
	            stack.push(externbook.Name);
	            break;
	          case "PtgParen":
	            var lp = "(", rp = ")";
	            if (last_sp >= 0) {
	              sp = "";
	              switch (formula[0][last_sp][1][0]) {
	                case 2:
	                  lp = fill(" ", formula[0][last_sp][1][1]) + lp;
	                  break;
	                case 3:
	                  lp = fill("\r", formula[0][last_sp][1][1]) + lp;
	                  break;
	                case 4:
	                  rp = fill(" ", formula[0][last_sp][1][1]) + rp;
	                  break;
	                case 5:
	                  rp = fill("\r", formula[0][last_sp][1][1]) + rp;
	                  break;
	                default:
	                  if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
	              }
	              last_sp = -1;
	            }
	            stack.push(lp + stack.pop() + rp);
	            break;
	          case "PtgRefErr":
	            stack.push("#REF!");
	            break;
	          case "PtgRefErr3d":
	            stack.push("#REF!");
	            break;
	          case "PtgExp":
	            c = {
	              c: f[1][1],
	              r: f[1][0]
	            };
	            var q = {
	              c: cell.c,
	              r: cell.r
	            };
	            if (supbooks.sharedf[encode_cell(c)]) {
	              var parsedf = supbooks.sharedf[encode_cell(c)];
	              stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
	            } else {
	              var fnd = false;
	              for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
	                e2 = supbooks.arrayf[e1];
	                if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
	                if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
	                stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
	                fnd = true;
	                break;
	              }
	              if (!fnd) stack.push(f[1]);
	            }
	            break;
	          case "PtgArray":
	            stack.push("{" + stringify_array(f[1]) + "}");
	            break;
	          case "PtgMemArea":
	            break;
	          case "PtgAttrSpace":
	          case "PtgAttrSpaceSemi":
	            last_sp = ff;
	            break;
	          case "PtgTbl":
	            break;
	          case "PtgMemErr":
	            break;
	          case "PtgMissArg":
	            stack.push("");
	            break;
	          case "PtgAreaErr":
	            stack.push("#REF!");
	            break;
	          case "PtgAreaErr3d":
	            stack.push("#REF!");
	            break;
	          case "PtgList":
	            stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
	            break;
	          case "PtgMemAreaN":
	          case "PtgMemNoMemN":
	          case "PtgAttrNoop":
	          case "PtgSheet":
	          case "PtgEndSheet":
	            break;
	          case "PtgMemFunc":
	            break;
	          case "PtgMemNoMem":
	            break;
	          case "PtgElfCol":
	          case "PtgElfColS":
	          case "PtgElfColSV":
	          case "PtgElfColV":
	          case "PtgElfLel":
	          case "PtgElfRadical":
	          case "PtgElfRadicalLel":
	          case "PtgElfRadicalS":
	          case "PtgElfRw":
	          case "PtgElfRwV":
	            throw new Error("Unsupported ELFs");
	          case "PtgSxName":
	            throw new Error("Unrecognized Formula Token: " + String(f));
	          default:
	            throw new Error("Unrecognized Formula Token: " + String(f));
	        }
	        var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
	        if (opts.biff != 3) if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
	          f = formula[0][last_sp];
	          var _left = true;
	          switch (f[1][0]) {
	            case 4:
	              _left = false;
	            case 0:
	              sp = fill(" ", f[1][1]);
	              break;
	            case 5:
	              _left = false;
	            case 1:
	              sp = fill("\r", f[1][1]);
	              break;
	            default:
	              sp = "";
	              if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
	          }
	          stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
	          last_sp = -1;
	        }
	      }
	      if (stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
	      if (stack[0] == "TRUE") return true;
	      if (stack[0] == "FALSE") return false;
	      return stack[0];
	    }
	    function parse_ArrayParsedFormula(blob, length, opts) {
	      var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
	      var rgcb, cce = blob.read_shift(len);
	      if (cce == 65535) return [[], parsenoop(blob, length - 2)];
	      var rgce = parse_Rgce(blob, cce, opts);
	      if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
	      blob.l = target;
	      return [rgce, rgcb];
	    }
	    function parse_XLSCellParsedFormula(blob, length, opts) {
	      var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
	      var rgcb, cce = blob.read_shift(len);
	      if (cce == 65535) return [[], parsenoop(blob, length - 2)];
	      var rgce = parse_Rgce(blob, cce, opts);
	      if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
	      blob.l = target;
	      return [rgce, rgcb];
	    }
	    function parse_NameParsedFormula(blob, length, opts, cce) {
	      var target = blob.l + length;
	      var rgce = parse_Rgce(blob, cce, opts);
	      var rgcb;
	      if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
	      return [rgce, rgcb];
	    }
	    function parse_SharedParsedFormula(blob, length, opts) {
	      var target = blob.l + length;
	      var rgcb, cce = blob.read_shift(2);
	      var rgce = parse_Rgce(blob, cce, opts);
	      if (cce == 65535) return [[], parsenoop(blob, length - 2)];
	      if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
	      return [rgce, rgcb];
	    }
	    function parse_FormulaValue(blob) {
	      var b;
	      if (__readUInt16LE(blob, blob.l + 6) !== 65535) return [parse_Xnum(blob), "n"];
	      switch (blob[blob.l]) {
	        case 0:
	          blob.l += 8;
	          return ["String", "s"];
	        case 1:
	          b = blob[blob.l + 2] === 1;
	          blob.l += 8;
	          return [b, "b"];
	        case 2:
	          b = blob[blob.l + 2];
	          blob.l += 8;
	          return [b, "e"];
	        case 3:
	          blob.l += 8;
	          return ["", "s"];
	      }
	      return [];
	    }
	    function write_FormulaValue(value) {
	      if (value == null) {
	        var o = new_buf(8);
	        o.write_shift(1, 3);
	        o.write_shift(1, 0);
	        o.write_shift(2, 0);
	        o.write_shift(2, 0);
	        o.write_shift(2, 65535);
	        return o;
	      } else if (typeof value == "number") return write_Xnum(value);
	      return write_Xnum(0);
	    }
	    function parse_Formula(blob, length, opts) {
	      var end = blob.l + length;
	      var cell = parse_XLSCell(blob, 6, opts);
	      var val = parse_FormulaValue(blob);
	      var flags = blob.read_shift(1);
	      if (opts.biff != 2) {
	        blob.read_shift(1);
	        if (opts.biff >= 5) {
	          blob.read_shift(4);
	        }
	      }
	      var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
	      return {
	        cell: cell,
	        val: val[0],
	        formula: cbf,
	        shared: flags >> 3 & 1,
	        tt: val[1]
	      };
	    }
	    function write_Formula(cell, R, C, opts, os) {
	      var o1 = write_XLSCell(R, C, os);
	      var o2 = write_FormulaValue(cell.v);
	      var o3 = new_buf(6);
	      var flags = 1 | 32;
	      o3.write_shift(2, flags);
	      o3.write_shift(4, 0);
	      var bf = new_buf(cell.bf.length);
	      for (var i = 0; i < cell.bf.length; ++i) bf[i] = cell.bf[i];
	      var out = bconcat([o1, o2, o3, bf]);
	      return out;
	    }
	    function parse_XLSBParsedFormula(data, length, opts) {
	      var cce = data.read_shift(4);
	      var rgce = parse_Rgce(data, cce, opts);
	      var cb = data.read_shift(4);
	      var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
	      return [rgce, rgcb];
	    }
	    var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
	    var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
	    var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
	    var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
	    function write_XLSBFormulaNum(val) {
	      if ((val | 0) == val && val < Math.pow(2, 16) && val >= 0) {
	        var oint = new_buf(11);
	        oint.write_shift(4, 3);
	        oint.write_shift(1, 30);
	        oint.write_shift(2, val);
	        oint.write_shift(4, 0);
	        return oint;
	      }
	      var num = new_buf(17);
	      num.write_shift(4, 11);
	      num.write_shift(1, 31);
	      num.write_shift(8, val);
	      num.write_shift(4, 0);
	      return num;
	    }
	    function write_XLSBFormulaErr(val) {
	      var oint = new_buf(10);
	      oint.write_shift(4, 2);
	      oint.write_shift(1, 28);
	      oint.write_shift(1, val);
	      oint.write_shift(4, 0);
	      return oint;
	    }
	    function write_XLSBFormulaBool(val) {
	      var oint = new_buf(10);
	      oint.write_shift(4, 2);
	      oint.write_shift(1, 29);
	      oint.write_shift(1, val ? 1 : 0);
	      oint.write_shift(4, 0);
	      return oint;
	    }
	    function write_XLSBFormulaStr(val) {
	      var preamble = new_buf(7);
	      preamble.write_shift(4, 3 + 2 * val.length);
	      preamble.write_shift(1, 23);
	      preamble.write_shift(2, val.length);
	      var body = new_buf(2 * val.length);
	      body.write_shift(2 * val.length, val, "utf16le");
	      var postamble = new_buf(4);
	      postamble.write_shift(4, 0);
	      return bconcat([preamble, body, postamble]);
	    }
	    function write_XLSBFormulaRef(str) {
	      var cell = decode_cell(str);
	      var out = new_buf(15);
	      out.write_shift(4, 7);
	      out.write_shift(1, 4 | 1 << 5);
	      out.write_shift(4, cell.r);
	      out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
	      out.write_shift(4, 0);
	      return out;
	    }
	    function write_XLSBFormulaRef3D(str, wb) {
	      var lastbang = str.lastIndexOf("!");
	      var sname = str.slice(0, lastbang);
	      str = str.slice(lastbang + 1);
	      var cell = decode_cell(str);
	      if (sname.charAt(0) == "'") sname = sname.slice(1, -1).replace(/''/g, "'");
	      var out = new_buf(17);
	      out.write_shift(4, 9);
	      out.write_shift(1, 26 | 1 << 5);
	      out.write_shift(2, 2 + wb.SheetNames.map(function (n) {
	        return n.toLowerCase();
	      }).indexOf(sname.toLowerCase()));
	      out.write_shift(4, cell.r);
	      out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
	      out.write_shift(4, 0);
	      return out;
	    }
	    function write_XLSBFormulaRefErr3D(str, wb) {
	      var lastbang = str.lastIndexOf("!");
	      var sname = str.slice(0, lastbang);
	      str = str.slice(lastbang + 1);
	      if (sname.charAt(0) == "'") sname = sname.slice(1, -1).replace(/''/g, "'");
	      var out = new_buf(17);
	      out.write_shift(4, 9);
	      out.write_shift(1, 28 | 1 << 5);
	      out.write_shift(2, 2 + wb.SheetNames.map(function (n) {
	        return n.toLowerCase();
	      }).indexOf(sname.toLowerCase()));
	      out.write_shift(4, 0);
	      out.write_shift(2, 0);
	      out.write_shift(4, 0);
	      return out;
	    }
	    function write_XLSBFormulaRange(_str) {
	      var parts = _str.split(":"), str = parts[0];
	      var out = new_buf(23);
	      out.write_shift(4, 15);
	      str = parts[0];
	      var cell = decode_cell(str);
	      out.write_shift(1, 4 | 1 << 5);
	      out.write_shift(4, cell.r);
	      out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
	      out.write_shift(4, 0);
	      str = parts[1];
	      cell = decode_cell(str);
	      out.write_shift(1, 4 | 1 << 5);
	      out.write_shift(4, cell.r);
	      out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
	      out.write_shift(4, 0);
	      out.write_shift(1, 17);
	      out.write_shift(4, 0);
	      return out;
	    }
	    function write_XLSBFormulaRangeWS(_str, wb) {
	      var lastbang = _str.lastIndexOf("!");
	      var sname = _str.slice(0, lastbang);
	      _str = _str.slice(lastbang + 1);
	      if (sname.charAt(0) == "'") sname = sname.slice(1, -1).replace(/''/g, "'");
	      var parts = _str.split(":");
	      var out = new_buf(27);
	      out.write_shift(4, 19);
	      var str = parts[0], cell = decode_cell(str);
	      out.write_shift(1, 26 | 1 << 5);
	      out.write_shift(2, 2 + wb.SheetNames.map(function (n) {
	        return n.toLowerCase();
	      }).indexOf(sname.toLowerCase()));
	      out.write_shift(4, cell.r);
	      out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
	      str = parts[1];
	      cell = decode_cell(str);
	      out.write_shift(1, 26 | 1 << 5);
	      out.write_shift(2, 2 + wb.SheetNames.map(function (n) {
	        return n.toLowerCase();
	      }).indexOf(sname.toLowerCase()));
	      out.write_shift(4, cell.r);
	      out.write_shift(2, cell.c | (str.charAt(0) == "$" ? 0 : 1) << 14 | (str.match(/\$\d/) ? 0 : 1) << 15);
	      out.write_shift(1, 17);
	      out.write_shift(4, 0);
	      return out;
	    }
	    function write_XLSBFormulaArea3D(_str, wb) {
	      var lastbang = _str.lastIndexOf("!");
	      var sname = _str.slice(0, lastbang);
	      _str = _str.slice(lastbang + 1);
	      if (sname.charAt(0) == "'") sname = sname.slice(1, -1).replace(/''/g, "'");
	      var range = decode_range(_str);
	      var out = new_buf(23);
	      out.write_shift(4, 15);
	      out.write_shift(1, 27 | 1 << 5);
	      out.write_shift(2, 2 + wb.SheetNames.map(function (n) {
	        return n.toLowerCase();
	      }).indexOf(sname.toLowerCase()));
	      out.write_shift(4, range.s.r);
	      out.write_shift(4, range.e.r);
	      out.write_shift(2, range.s.c);
	      out.write_shift(2, range.e.c);
	      out.write_shift(4, 0);
	      return out;
	    }
	    function write_XLSBFormula(val, wb) {
	      if (typeof val == "number") return write_XLSBFormulaNum(val);
	      if (typeof val == "boolean") return write_XLSBFormulaBool(val);
	      if ((/^#(DIV\/0!|GETTING_DATA|N\/A|NAME\?|NULL!|NUM!|REF!|VALUE!)$/).test(val)) return write_XLSBFormulaErr(+RBErr[val]);
	      if (val.match(/^\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/)) return write_XLSBFormulaRef(val);
	      if (val.match(/^\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5}):\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/)) return write_XLSBFormulaRange(val);
	      if (val.match(/^#REF!\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5}):\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/)) return write_XLSBFormulaArea3D(val, wb);
	      if (val.match(/^(?:'[^\\\/?*\[\]:]*'|[^'][^\\\/?*\[\]:'`~!@#$%^()\-=+{}|;,<.>]*)!\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/)) return write_XLSBFormulaRef3D(val, wb);
	      if (val.match(/^(?:'[^\\\/?*\[\]:]*'|[^'][^\\\/?*\[\]:'`~!@#$%^()\-=+{}|;,<.>]*)!\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5}):\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\$?(?:10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})$/)) return write_XLSBFormulaRangeWS(val, wb);
	      if ((/^(?:'[^\\\/?*\[\]:]*'|[^'][^\\\/?*\[\]:'`~!@#$%^()\-=+{}|;,<.>]*)!#REF!$/).test(val)) return write_XLSBFormulaRefErr3D(val, wb);
	      if ((/^".*"$/).test(val)) return write_XLSBFormulaStr(val);
	      if ((/^[+-]\d+$/).test(val)) return write_XLSBFormulaNum(parseInt(val, 10));
	      throw "Formula |" + val + "| not supported for XLSB";
	    }
	    var write_XLSBNameParsedFormula = write_XLSBFormula;
	    var Cetab = {
	      0: "BEEP",
	      1: "OPEN",
	      2: "OPEN.LINKS",
	      3: "CLOSE.ALL",
	      4: "SAVE",
	      5: "SAVE.AS",
	      6: "FILE.DELETE",
	      7: "PAGE.SETUP",
	      8: "PRINT",
	      9: "PRINTER.SETUP",
	      10: "QUIT",
	      11: "NEW.WINDOW",
	      12: "ARRANGE.ALL",
	      13: "WINDOW.SIZE",
	      14: "WINDOW.MOVE",
	      15: "FULL",
	      16: "CLOSE",
	      17: "RUN",
	      22: "SET.PRINT.AREA",
	      23: "SET.PRINT.TITLES",
	      24: "SET.PAGE.BREAK",
	      25: "REMOVE.PAGE.BREAK",
	      26: "FONT",
	      27: "DISPLAY",
	      28: "PROTECT.DOCUMENT",
	      29: "PRECISION",
	      30: "A1.R1C1",
	      31: "CALCULATE.NOW",
	      32: "CALCULATION",
	      34: "DATA.FIND",
	      35: "EXTRACT",
	      36: "DATA.DELETE",
	      37: "SET.DATABASE",
	      38: "SET.CRITERIA",
	      39: "SORT",
	      40: "DATA.SERIES",
	      41: "TABLE",
	      42: "FORMAT.NUMBER",
	      43: "ALIGNMENT",
	      44: "STYLE",
	      45: "BORDER",
	      46: "CELL.PROTECTION",
	      47: "COLUMN.WIDTH",
	      48: "UNDO",
	      49: "CUT",
	      50: "COPY",
	      51: "PASTE",
	      52: "CLEAR",
	      53: "PASTE.SPECIAL",
	      54: "EDIT.DELETE",
	      55: "INSERT",
	      56: "FILL.RIGHT",
	      57: "FILL.DOWN",
	      61: "DEFINE.NAME",
	      62: "CREATE.NAMES",
	      63: "FORMULA.GOTO",
	      64: "FORMULA.FIND",
	      65: "SELECT.LAST.CELL",
	      66: "SHOW.ACTIVE.CELL",
	      67: "GALLERY.AREA",
	      68: "GALLERY.BAR",
	      69: "GALLERY.COLUMN",
	      70: "GALLERY.LINE",
	      71: "GALLERY.PIE",
	      72: "GALLERY.SCATTER",
	      73: "COMBINATION",
	      74: "PREFERRED",
	      75: "ADD.OVERLAY",
	      76: "GRIDLINES",
	      77: "SET.PREFERRED",
	      78: "AXES",
	      79: "LEGEND",
	      80: "ATTACH.TEXT",
	      81: "ADD.ARROW",
	      82: "SELECT.CHART",
	      83: "SELECT.PLOT.AREA",
	      84: "PATTERNS",
	      85: "MAIN.CHART",
	      86: "OVERLAY",
	      87: "SCALE",
	      88: "FORMAT.LEGEND",
	      89: "FORMAT.TEXT",
	      90: "EDIT.REPEAT",
	      91: "PARSE",
	      92: "JUSTIFY",
	      93: "HIDE",
	      94: "UNHIDE",
	      95: "WORKSPACE",
	      96: "FORMULA",
	      97: "FORMULA.FILL",
	      98: "FORMULA.ARRAY",
	      99: "DATA.FIND.NEXT",
	      100: "DATA.FIND.PREV",
	      101: "FORMULA.FIND.NEXT",
	      102: "FORMULA.FIND.PREV",
	      103: "ACTIVATE",
	      104: "ACTIVATE.NEXT",
	      105: "ACTIVATE.PREV",
	      106: "UNLOCKED.NEXT",
	      107: "UNLOCKED.PREV",
	      108: "COPY.PICTURE",
	      109: "SELECT",
	      110: "DELETE.NAME",
	      111: "DELETE.FORMAT",
	      112: "VLINE",
	      113: "HLINE",
	      114: "VPAGE",
	      115: "HPAGE",
	      116: "VSCROLL",
	      117: "HSCROLL",
	      118: "ALERT",
	      119: "NEW",
	      120: "CANCEL.COPY",
	      121: "SHOW.CLIPBOARD",
	      122: "MESSAGE",
	      124: "PASTE.LINK",
	      125: "APP.ACTIVATE",
	      126: "DELETE.ARROW",
	      127: "ROW.HEIGHT",
	      128: "FORMAT.MOVE",
	      129: "FORMAT.SIZE",
	      130: "FORMULA.REPLACE",
	      131: "SEND.KEYS",
	      132: "SELECT.SPECIAL",
	      133: "APPLY.NAMES",
	      134: "REPLACE.FONT",
	      135: "FREEZE.PANES",
	      136: "SHOW.INFO",
	      137: "SPLIT",
	      138: "ON.WINDOW",
	      139: "ON.DATA",
	      140: "DISABLE.INPUT",
	      142: "OUTLINE",
	      143: "LIST.NAMES",
	      144: "FILE.CLOSE",
	      145: "SAVE.WORKBOOK",
	      146: "DATA.FORM",
	      147: "COPY.CHART",
	      148: "ON.TIME",
	      149: "WAIT",
	      150: "FORMAT.FONT",
	      151: "FILL.UP",
	      152: "FILL.LEFT",
	      153: "DELETE.OVERLAY",
	      155: "SHORT.MENUS",
	      159: "SET.UPDATE.STATUS",
	      161: "COLOR.PALETTE",
	      162: "DELETE.STYLE",
	      163: "WINDOW.RESTORE",
	      164: "WINDOW.MAXIMIZE",
	      166: "CHANGE.LINK",
	      167: "CALCULATE.DOCUMENT",
	      168: "ON.KEY",
	      169: "APP.RESTORE",
	      170: "APP.MOVE",
	      171: "APP.SIZE",
	      172: "APP.MINIMIZE",
	      173: "APP.MAXIMIZE",
	      174: "BRING.TO.FRONT",
	      175: "SEND.TO.BACK",
	      185: "MAIN.CHART.TYPE",
	      186: "OVERLAY.CHART.TYPE",
	      187: "SELECT.END",
	      188: "OPEN.MAIL",
	      189: "SEND.MAIL",
	      190: "STANDARD.FONT",
	      191: "CONSOLIDATE",
	      192: "SORT.SPECIAL",
	      193: "GALLERY.3D.AREA",
	      194: "GALLERY.3D.COLUMN",
	      195: "GALLERY.3D.LINE",
	      196: "GALLERY.3D.PIE",
	      197: "VIEW.3D",
	      198: "GOAL.SEEK",
	      199: "WORKGROUP",
	      200: "FILL.GROUP",
	      201: "UPDATE.LINK",
	      202: "PROMOTE",
	      203: "DEMOTE",
	      204: "SHOW.DETAIL",
	      206: "UNGROUP",
	      207: "OBJECT.PROPERTIES",
	      208: "SAVE.NEW.OBJECT",
	      209: "SHARE",
	      210: "SHARE.NAME",
	      211: "DUPLICATE",
	      212: "APPLY.STYLE",
	      213: "ASSIGN.TO.OBJECT",
	      214: "OBJECT.PROTECTION",
	      215: "HIDE.OBJECT",
	      216: "SET.EXTRACT",
	      217: "CREATE.PUBLISHER",
	      218: "SUBSCRIBE.TO",
	      219: "ATTRIBUTES",
	      220: "SHOW.TOOLBAR",
	      222: "PRINT.PREVIEW",
	      223: "EDIT.COLOR",
	      224: "SHOW.LEVELS",
	      225: "FORMAT.MAIN",
	      226: "FORMAT.OVERLAY",
	      227: "ON.RECALC",
	      228: "EDIT.SERIES",
	      229: "DEFINE.STYLE",
	      240: "LINE.PRINT",
	      243: "ENTER.DATA",
	      249: "GALLERY.RADAR",
	      250: "MERGE.STYLES",
	      251: "EDITION.OPTIONS",
	      252: "PASTE.PICTURE",
	      253: "PASTE.PICTURE.LINK",
	      254: "SPELLING",
	      256: "ZOOM",
	      259: "INSERT.OBJECT",
	      260: "WINDOW.MINIMIZE",
	      265: "SOUND.NOTE",
	      266: "SOUND.PLAY",
	      267: "FORMAT.SHAPE",
	      268: "EXTEND.POLYGON",
	      269: "FORMAT.AUTO",
	      272: "GALLERY.3D.BAR",
	      273: "GALLERY.3D.SURFACE",
	      274: "FILL.AUTO",
	      276: "CUSTOMIZE.TOOLBAR",
	      277: "ADD.TOOL",
	      278: "EDIT.OBJECT",
	      279: "ON.DOUBLECLICK",
	      280: "ON.ENTRY",
	      281: "WORKBOOK.ADD",
	      282: "WORKBOOK.MOVE",
	      283: "WORKBOOK.COPY",
	      284: "WORKBOOK.OPTIONS",
	      285: "SAVE.WORKSPACE",
	      288: "CHART.WIZARD",
	      289: "DELETE.TOOL",
	      290: "MOVE.TOOL",
	      291: "WORKBOOK.SELECT",
	      292: "WORKBOOK.ACTIVATE",
	      293: "ASSIGN.TO.TOOL",
	      295: "COPY.TOOL",
	      296: "RESET.TOOL",
	      297: "CONSTRAIN.NUMERIC",
	      298: "PASTE.TOOL",
	      302: "WORKBOOK.NEW",
	      305: "SCENARIO.CELLS",
	      306: "SCENARIO.DELETE",
	      307: "SCENARIO.ADD",
	      308: "SCENARIO.EDIT",
	      309: "SCENARIO.SHOW",
	      310: "SCENARIO.SHOW.NEXT",
	      311: "SCENARIO.SUMMARY",
	      312: "PIVOT.TABLE.WIZARD",
	      313: "PIVOT.FIELD.PROPERTIES",
	      314: "PIVOT.FIELD",
	      315: "PIVOT.ITEM",
	      316: "PIVOT.ADD.FIELDS",
	      318: "OPTIONS.CALCULATION",
	      319: "OPTIONS.EDIT",
	      320: "OPTIONS.VIEW",
	      321: "ADDIN.MANAGER",
	      322: "MENU.EDITOR",
	      323: "ATTACH.TOOLBARS",
	      324: "VBAActivate",
	      325: "OPTIONS.CHART",
	      328: "VBA.INSERT.FILE",
	      330: "VBA.PROCEDURE.DEFINITION",
	      336: "ROUTING.SLIP",
	      338: "ROUTE.DOCUMENT",
	      339: "MAIL.LOGON",
	      342: "INSERT.PICTURE",
	      343: "EDIT.TOOL",
	      344: "GALLERY.DOUGHNUT",
	      350: "CHART.TREND",
	      352: "PIVOT.ITEM.PROPERTIES",
	      354: "WORKBOOK.INSERT",
	      355: "OPTIONS.TRANSITION",
	      356: "OPTIONS.GENERAL",
	      370: "FILTER.ADVANCED",
	      373: "MAIL.ADD.MAILER",
	      374: "MAIL.DELETE.MAILER",
	      375: "MAIL.REPLY",
	      376: "MAIL.REPLY.ALL",
	      377: "MAIL.FORWARD",
	      378: "MAIL.NEXT.LETTER",
	      379: "DATA.LABEL",
	      380: "INSERT.TITLE",
	      381: "FONT.PROPERTIES",
	      382: "MACRO.OPTIONS",
	      383: "WORKBOOK.HIDE",
	      384: "WORKBOOK.UNHIDE",
	      385: "WORKBOOK.DELETE",
	      386: "WORKBOOK.NAME",
	      388: "GALLERY.CUSTOM",
	      390: "ADD.CHART.AUTOFORMAT",
	      391: "DELETE.CHART.AUTOFORMAT",
	      392: "CHART.ADD.DATA",
	      393: "AUTO.OUTLINE",
	      394: "TAB.ORDER",
	      395: "SHOW.DIALOG",
	      396: "SELECT.ALL",
	      397: "UNGROUP.SHEETS",
	      398: "SUBTOTAL.CREATE",
	      399: "SUBTOTAL.REMOVE",
	      400: "RENAME.OBJECT",
	      412: "WORKBOOK.SCROLL",
	      413: "WORKBOOK.NEXT",
	      414: "WORKBOOK.PREV",
	      415: "WORKBOOK.TAB.SPLIT",
	      416: "FULL.SCREEN",
	      417: "WORKBOOK.PROTECT",
	      420: "SCROLLBAR.PROPERTIES",
	      421: "PIVOT.SHOW.PAGES",
	      422: "TEXT.TO.COLUMNS",
	      423: "FORMAT.CHARTTYPE",
	      424: "LINK.FORMAT",
	      425: "TRACER.DISPLAY",
	      430: "TRACER.NAVIGATE",
	      431: "TRACER.CLEAR",
	      432: "TRACER.ERROR",
	      433: "PIVOT.FIELD.GROUP",
	      434: "PIVOT.FIELD.UNGROUP",
	      435: "CHECKBOX.PROPERTIES",
	      436: "LABEL.PROPERTIES",
	      437: "LISTBOX.PROPERTIES",
	      438: "EDITBOX.PROPERTIES",
	      439: "PIVOT.REFRESH",
	      440: "LINK.COMBO",
	      441: "OPEN.TEXT",
	      442: "HIDE.DIALOG",
	      443: "SET.DIALOG.FOCUS",
	      444: "ENABLE.OBJECT",
	      445: "PUSHBUTTON.PROPERTIES",
	      446: "SET.DIALOG.DEFAULT",
	      447: "FILTER",
	      448: "FILTER.SHOW.ALL",
	      449: "CLEAR.OUTLINE",
	      450: "FUNCTION.WIZARD",
	      451: "ADD.LIST.ITEM",
	      452: "SET.LIST.ITEM",
	      453: "REMOVE.LIST.ITEM",
	      454: "SELECT.LIST.ITEM",
	      455: "SET.CONTROL.VALUE",
	      456: "SAVE.COPY.AS",
	      458: "OPTIONS.LISTS.ADD",
	      459: "OPTIONS.LISTS.DELETE",
	      460: "SERIES.AXES",
	      461: "SERIES.X",
	      462: "SERIES.Y",
	      463: "ERRORBAR.X",
	      464: "ERRORBAR.Y",
	      465: "FORMAT.CHART",
	      466: "SERIES.ORDER",
	      467: "MAIL.LOGOFF",
	      468: "CLEAR.ROUTING.SLIP",
	      469: "APP.ACTIVATE.MICROSOFT",
	      470: "MAIL.EDIT.MAILER",
	      471: "ON.SHEET",
	      472: "STANDARD.WIDTH",
	      473: "SCENARIO.MERGE",
	      474: "SUMMARY.INFO",
	      475: "FIND.FILE",
	      476: "ACTIVE.CELL.FONT",
	      477: "ENABLE.TIPWIZARD",
	      478: "VBA.MAKE.ADDIN",
	      480: "INSERTDATATABLE",
	      481: "WORKGROUP.OPTIONS",
	      482: "MAIL.SEND.MAILER",
	      485: "AUTOCORRECT",
	      489: "POST.DOCUMENT",
	      491: "PICKLIST",
	      493: "VIEW.SHOW",
	      494: "VIEW.DEFINE",
	      495: "VIEW.DELETE",
	      509: "SHEET.BACKGROUND",
	      510: "INSERT.MAP.OBJECT",
	      511: "OPTIONS.MENONO",
	      517: "MSOCHECKS",
	      518: "NORMAL",
	      519: "LAYOUT",
	      520: "RM.PRINT.AREA",
	      521: "CLEAR.PRINT.AREA",
	      522: "ADD.PRINT.AREA",
	      523: "MOVE.BRK",
	      545: "HIDECURR.NOTE",
	      546: "HIDEALL.NOTES",
	      547: "DELETE.NOTE",
	      548: "TRAVERSE.NOTES",
	      549: "ACTIVATE.NOTES",
	      620: "PROTECT.REVISIONS",
	      621: "UNPROTECT.REVISIONS",
	      647: "OPTIONS.ME",
	      653: "WEB.PUBLISH",
	      667: "NEWWEBQUERY",
	      673: "PIVOT.TABLE.CHART",
	      753: "OPTIONS.SAVE",
	      755: "OPTIONS.SPELL",
	      808: "HIDEALL.INKANNOTS"
	    };
	    var Ftab = {
	      0: "COUNT",
	      1: "IF",
	      2: "ISNA",
	      3: "ISERROR",
	      4: "SUM",
	      5: "AVERAGE",
	      6: "MIN",
	      7: "MAX",
	      8: "ROW",
	      9: "COLUMN",
	      10: "NA",
	      11: "NPV",
	      12: "STDEV",
	      13: "DOLLAR",
	      14: "FIXED",
	      15: "SIN",
	      16: "COS",
	      17: "TAN",
	      18: "ATAN",
	      19: "PI",
	      20: "SQRT",
	      21: "EXP",
	      22: "LN",
	      23: "LOG10",
	      24: "ABS",
	      25: "INT",
	      26: "SIGN",
	      27: "ROUND",
	      28: "LOOKUP",
	      29: "INDEX",
	      30: "REPT",
	      31: "MID",
	      32: "LEN",
	      33: "VALUE",
	      34: "TRUE",
	      35: "FALSE",
	      36: "AND",
	      37: "OR",
	      38: "NOT",
	      39: "MOD",
	      40: "DCOUNT",
	      41: "DSUM",
	      42: "DAVERAGE",
	      43: "DMIN",
	      44: "DMAX",
	      45: "DSTDEV",
	      46: "VAR",
	      47: "DVAR",
	      48: "TEXT",
	      49: "LINEST",
	      50: "TREND",
	      51: "LOGEST",
	      52: "GROWTH",
	      53: "GOTO",
	      54: "HALT",
	      55: "RETURN",
	      56: "PV",
	      57: "FV",
	      58: "NPER",
	      59: "PMT",
	      60: "RATE",
	      61: "MIRR",
	      62: "IRR",
	      63: "RAND",
	      64: "MATCH",
	      65: "DATE",
	      66: "TIME",
	      67: "DAY",
	      68: "MONTH",
	      69: "YEAR",
	      70: "WEEKDAY",
	      71: "HOUR",
	      72: "MINUTE",
	      73: "SECOND",
	      74: "NOW",
	      75: "AREAS",
	      76: "ROWS",
	      77: "COLUMNS",
	      78: "OFFSET",
	      79: "ABSREF",
	      80: "RELREF",
	      81: "ARGUMENT",
	      82: "SEARCH",
	      83: "TRANSPOSE",
	      84: "ERROR",
	      85: "STEP",
	      86: "TYPE",
	      87: "ECHO",
	      88: "SET.NAME",
	      89: "CALLER",
	      90: "DEREF",
	      91: "WINDOWS",
	      92: "SERIES",
	      93: "DOCUMENTS",
	      94: "ACTIVE.CELL",
	      95: "SELECTION",
	      96: "RESULT",
	      97: "ATAN2",
	      98: "ASIN",
	      99: "ACOS",
	      100: "CHOOSE",
	      101: "HLOOKUP",
	      102: "VLOOKUP",
	      103: "LINKS",
	      104: "INPUT",
	      105: "ISREF",
	      106: "GET.FORMULA",
	      107: "GET.NAME",
	      108: "SET.VALUE",
	      109: "LOG",
	      110: "EXEC",
	      111: "CHAR",
	      112: "LOWER",
	      113: "UPPER",
	      114: "PROPER",
	      115: "LEFT",
	      116: "RIGHT",
	      117: "EXACT",
	      118: "TRIM",
	      119: "REPLACE",
	      120: "SUBSTITUTE",
	      121: "CODE",
	      122: "NAMES",
	      123: "DIRECTORY",
	      124: "FIND",
	      125: "CELL",
	      126: "ISERR",
	      127: "ISTEXT",
	      128: "ISNUMBER",
	      129: "ISBLANK",
	      130: "T",
	      131: "N",
	      132: "FOPEN",
	      133: "FCLOSE",
	      134: "FSIZE",
	      135: "FREADLN",
	      136: "FREAD",
	      137: "FWRITELN",
	      138: "FWRITE",
	      139: "FPOS",
	      140: "DATEVALUE",
	      141: "TIMEVALUE",
	      142: "SLN",
	      143: "SYD",
	      144: "DDB",
	      145: "GET.DEF",
	      146: "REFTEXT",
	      147: "TEXTREF",
	      148: "INDIRECT",
	      149: "REGISTER",
	      150: "CALL",
	      151: "ADD.BAR",
	      152: "ADD.MENU",
	      153: "ADD.COMMAND",
	      154: "ENABLE.COMMAND",
	      155: "CHECK.COMMAND",
	      156: "RENAME.COMMAND",
	      157: "SHOW.BAR",
	      158: "DELETE.MENU",
	      159: "DELETE.COMMAND",
	      160: "GET.CHART.ITEM",
	      161: "DIALOG.BOX",
	      162: "CLEAN",
	      163: "MDETERM",
	      164: "MINVERSE",
	      165: "MMULT",
	      166: "FILES",
	      167: "IPMT",
	      168: "PPMT",
	      169: "COUNTA",
	      170: "CANCEL.KEY",
	      171: "FOR",
	      172: "WHILE",
	      173: "BREAK",
	      174: "NEXT",
	      175: "INITIATE",
	      176: "REQUEST",
	      177: "POKE",
	      178: "EXECUTE",
	      179: "TERMINATE",
	      180: "RESTART",
	      181: "HELP",
	      182: "GET.BAR",
	      183: "PRODUCT",
	      184: "FACT",
	      185: "GET.CELL",
	      186: "GET.WORKSPACE",
	      187: "GET.WINDOW",
	      188: "GET.DOCUMENT",
	      189: "DPRODUCT",
	      190: "ISNONTEXT",
	      191: "GET.NOTE",
	      192: "NOTE",
	      193: "STDEVP",
	      194: "VARP",
	      195: "DSTDEVP",
	      196: "DVARP",
	      197: "TRUNC",
	      198: "ISLOGICAL",
	      199: "DCOUNTA",
	      200: "DELETE.BAR",
	      201: "UNREGISTER",
	      204: "USDOLLAR",
	      205: "FINDB",
	      206: "SEARCHB",
	      207: "REPLACEB",
	      208: "LEFTB",
	      209: "RIGHTB",
	      210: "MIDB",
	      211: "LENB",
	      212: "ROUNDUP",
	      213: "ROUNDDOWN",
	      214: "ASC",
	      215: "DBCS",
	      216: "RANK",
	      219: "ADDRESS",
	      220: "DAYS360",
	      221: "TODAY",
	      222: "VDB",
	      223: "ELSE",
	      224: "ELSE.IF",
	      225: "END.IF",
	      226: "FOR.CELL",
	      227: "MEDIAN",
	      228: "SUMPRODUCT",
	      229: "SINH",
	      230: "COSH",
	      231: "TANH",
	      232: "ASINH",
	      233: "ACOSH",
	      234: "ATANH",
	      235: "DGET",
	      236: "CREATE.OBJECT",
	      237: "VOLATILE",
	      238: "LAST.ERROR",
	      239: "CUSTOM.UNDO",
	      240: "CUSTOM.REPEAT",
	      241: "FORMULA.CONVERT",
	      242: "GET.LINK.INFO",
	      243: "TEXT.BOX",
	      244: "INFO",
	      245: "GROUP",
	      246: "GET.OBJECT",
	      247: "DB",
	      248: "PAUSE",
	      251: "RESUME",
	      252: "FREQUENCY",
	      253: "ADD.TOOLBAR",
	      254: "DELETE.TOOLBAR",
	      255: "User",
	      256: "RESET.TOOLBAR",
	      257: "EVALUATE",
	      258: "GET.TOOLBAR",
	      259: "GET.TOOL",
	      260: "SPELLING.CHECK",
	      261: "ERROR.TYPE",
	      262: "APP.TITLE",
	      263: "WINDOW.TITLE",
	      264: "SAVE.TOOLBAR",
	      265: "ENABLE.TOOL",
	      266: "PRESS.TOOL",
	      267: "REGISTER.ID",
	      268: "GET.WORKBOOK",
	      269: "AVEDEV",
	      270: "BETADIST",
	      271: "GAMMALN",
	      272: "BETAINV",
	      273: "BINOMDIST",
	      274: "CHIDIST",
	      275: "CHIINV",
	      276: "COMBIN",
	      277: "CONFIDENCE",
	      278: "CRITBINOM",
	      279: "EVEN",
	      280: "EXPONDIST",
	      281: "FDIST",
	      282: "FINV",
	      283: "FISHER",
	      284: "FISHERINV",
	      285: "FLOOR",
	      286: "GAMMADIST",
	      287: "GAMMAINV",
	      288: "CEILING",
	      289: "HYPGEOMDIST",
	      290: "LOGNORMDIST",
	      291: "LOGINV",
	      292: "NEGBINOMDIST",
	      293: "NORMDIST",
	      294: "NORMSDIST",
	      295: "NORMINV",
	      296: "NORMSINV",
	      297: "STANDARDIZE",
	      298: "ODD",
	      299: "PERMUT",
	      300: "POISSON",
	      301: "TDIST",
	      302: "WEIBULL",
	      303: "SUMXMY2",
	      304: "SUMX2MY2",
	      305: "SUMX2PY2",
	      306: "CHITEST",
	      307: "CORREL",
	      308: "COVAR",
	      309: "FORECAST",
	      310: "FTEST",
	      311: "INTERCEPT",
	      312: "PEARSON",
	      313: "RSQ",
	      314: "STEYX",
	      315: "SLOPE",
	      316: "TTEST",
	      317: "PROB",
	      318: "DEVSQ",
	      319: "GEOMEAN",
	      320: "HARMEAN",
	      321: "SUMSQ",
	      322: "KURT",
	      323: "SKEW",
	      324: "ZTEST",
	      325: "LARGE",
	      326: "SMALL",
	      327: "QUARTILE",
	      328: "PERCENTILE",
	      329: "PERCENTRANK",
	      330: "MODE",
	      331: "TRIMMEAN",
	      332: "TINV",
	      334: "MOVIE.COMMAND",
	      335: "GET.MOVIE",
	      336: "CONCATENATE",
	      337: "POWER",
	      338: "PIVOT.ADD.DATA",
	      339: "GET.PIVOT.TABLE",
	      340: "GET.PIVOT.FIELD",
	      341: "GET.PIVOT.ITEM",
	      342: "RADIANS",
	      343: "DEGREES",
	      344: "SUBTOTAL",
	      345: "SUMIF",
	      346: "COUNTIF",
	      347: "COUNTBLANK",
	      348: "SCENARIO.GET",
	      349: "OPTIONS.LISTS.GET",
	      350: "ISPMT",
	      351: "DATEDIF",
	      352: "DATESTRING",
	      353: "NUMBERSTRING",
	      354: "ROMAN",
	      355: "OPEN.DIALOG",
	      356: "SAVE.DIALOG",
	      357: "VIEW.GET",
	      358: "GETPIVOTDATA",
	      359: "HYPERLINK",
	      360: "PHONETIC",
	      361: "AVERAGEA",
	      362: "MAXA",
	      363: "MINA",
	      364: "STDEVPA",
	      365: "VARPA",
	      366: "STDEVA",
	      367: "VARA",
	      368: "BAHTTEXT",
	      369: "THAIDAYOFWEEK",
	      370: "THAIDIGIT",
	      371: "THAIMONTHOFYEAR",
	      372: "THAINUMSOUND",
	      373: "THAINUMSTRING",
	      374: "THAISTRINGLENGTH",
	      375: "ISTHAIDIGIT",
	      376: "ROUNDBAHTDOWN",
	      377: "ROUNDBAHTUP",
	      378: "THAIYEAR",
	      379: "RTD",
	      380: "CUBEVALUE",
	      381: "CUBEMEMBER",
	      382: "CUBEMEMBERPROPERTY",
	      383: "CUBERANKEDMEMBER",
	      384: "HEX2BIN",
	      385: "HEX2DEC",
	      386: "HEX2OCT",
	      387: "DEC2BIN",
	      388: "DEC2HEX",
	      389: "DEC2OCT",
	      390: "OCT2BIN",
	      391: "OCT2HEX",
	      392: "OCT2DEC",
	      393: "BIN2DEC",
	      394: "BIN2OCT",
	      395: "BIN2HEX",
	      396: "IMSUB",
	      397: "IMDIV",
	      398: "IMPOWER",
	      399: "IMABS",
	      400: "IMSQRT",
	      401: "IMLN",
	      402: "IMLOG2",
	      403: "IMLOG10",
	      404: "IMSIN",
	      405: "IMCOS",
	      406: "IMEXP",
	      407: "IMARGUMENT",
	      408: "IMCONJUGATE",
	      409: "IMAGINARY",
	      410: "IMREAL",
	      411: "COMPLEX",
	      412: "IMSUM",
	      413: "IMPRODUCT",
	      414: "SERIESSUM",
	      415: "FACTDOUBLE",
	      416: "SQRTPI",
	      417: "QUOTIENT",
	      418: "DELTA",
	      419: "GESTEP",
	      420: "ISEVEN",
	      421: "ISODD",
	      422: "MROUND",
	      423: "ERF",
	      424: "ERFC",
	      425: "BESSELJ",
	      426: "BESSELK",
	      427: "BESSELY",
	      428: "BESSELI",
	      429: "XIRR",
	      430: "XNPV",
	      431: "PRICEMAT",
	      432: "YIELDMAT",
	      433: "INTRATE",
	      434: "RECEIVED",
	      435: "DISC",
	      436: "PRICEDISC",
	      437: "YIELDDISC",
	      438: "TBILLEQ",
	      439: "TBILLPRICE",
	      440: "TBILLYIELD",
	      441: "PRICE",
	      442: "YIELD",
	      443: "DOLLARDE",
	      444: "DOLLARFR",
	      445: "NOMINAL",
	      446: "EFFECT",
	      447: "CUMPRINC",
	      448: "CUMIPMT",
	      449: "EDATE",
	      450: "EOMONTH",
	      451: "YEARFRAC",
	      452: "COUPDAYBS",
	      453: "COUPDAYS",
	      454: "COUPDAYSNC",
	      455: "COUPNCD",
	      456: "COUPNUM",
	      457: "COUPPCD",
	      458: "DURATION",
	      459: "MDURATION",
	      460: "ODDLPRICE",
	      461: "ODDLYIELD",
	      462: "ODDFPRICE",
	      463: "ODDFYIELD",
	      464: "RANDBETWEEN",
	      465: "WEEKNUM",
	      466: "AMORDEGRC",
	      467: "AMORLINC",
	      468: "CONVERT",
	      724: "SHEETJS",
	      469: "ACCRINT",
	      470: "ACCRINTM",
	      471: "WORKDAY",
	      472: "NETWORKDAYS",
	      473: "GCD",
	      474: "MULTINOMIAL",
	      475: "LCM",
	      476: "FVSCHEDULE",
	      477: "CUBEKPIMEMBER",
	      478: "CUBESET",
	      479: "CUBESETCOUNT",
	      480: "IFERROR",
	      481: "COUNTIFS",
	      482: "SUMIFS",
	      483: "AVERAGEIF",
	      484: "AVERAGEIFS"
	    };
	    var FtabArgc = {
	      2: 1,
	      3: 1,
	      10: 0,
	      15: 1,
	      16: 1,
	      17: 1,
	      18: 1,
	      19: 0,
	      20: 1,
	      21: 1,
	      22: 1,
	      23: 1,
	      24: 1,
	      25: 1,
	      26: 1,
	      27: 2,
	      30: 2,
	      31: 3,
	      32: 1,
	      33: 1,
	      34: 0,
	      35: 0,
	      38: 1,
	      39: 2,
	      40: 3,
	      41: 3,
	      42: 3,
	      43: 3,
	      44: 3,
	      45: 3,
	      47: 3,
	      48: 2,
	      53: 1,
	      61: 3,
	      63: 0,
	      65: 3,
	      66: 3,
	      67: 1,
	      68: 1,
	      69: 1,
	      70: 1,
	      71: 1,
	      72: 1,
	      73: 1,
	      74: 0,
	      75: 1,
	      76: 1,
	      77: 1,
	      79: 2,
	      80: 2,
	      83: 1,
	      85: 0,
	      86: 1,
	      89: 0,
	      90: 1,
	      94: 0,
	      95: 0,
	      97: 2,
	      98: 1,
	      99: 1,
	      101: 3,
	      102: 3,
	      105: 1,
	      106: 1,
	      108: 2,
	      111: 1,
	      112: 1,
	      113: 1,
	      114: 1,
	      117: 2,
	      118: 1,
	      119: 4,
	      121: 1,
	      126: 1,
	      127: 1,
	      128: 1,
	      129: 1,
	      130: 1,
	      131: 1,
	      133: 1,
	      134: 1,
	      135: 1,
	      136: 2,
	      137: 2,
	      138: 2,
	      140: 1,
	      141: 1,
	      142: 3,
	      143: 4,
	      144: 4,
	      161: 1,
	      162: 1,
	      163: 1,
	      164: 1,
	      165: 2,
	      172: 1,
	      175: 2,
	      176: 2,
	      177: 3,
	      178: 2,
	      179: 1,
	      184: 1,
	      186: 1,
	      189: 3,
	      190: 1,
	      195: 3,
	      196: 3,
	      197: 1,
	      198: 1,
	      199: 3,
	      201: 1,
	      207: 4,
	      210: 3,
	      211: 1,
	      212: 2,
	      213: 2,
	      214: 1,
	      215: 1,
	      225: 0,
	      229: 1,
	      230: 1,
	      231: 1,
	      232: 1,
	      233: 1,
	      234: 1,
	      235: 3,
	      244: 1,
	      247: 4,
	      252: 2,
	      257: 1,
	      261: 1,
	      271: 1,
	      273: 4,
	      274: 2,
	      275: 2,
	      276: 2,
	      277: 3,
	      278: 3,
	      279: 1,
	      280: 3,
	      281: 3,
	      282: 3,
	      283: 1,
	      284: 1,
	      285: 2,
	      286: 4,
	      287: 3,
	      288: 2,
	      289: 4,
	      290: 3,
	      291: 3,
	      292: 3,
	      293: 4,
	      294: 1,
	      295: 3,
	      296: 1,
	      297: 3,
	      298: 1,
	      299: 2,
	      300: 3,
	      301: 3,
	      302: 4,
	      303: 2,
	      304: 2,
	      305: 2,
	      306: 2,
	      307: 2,
	      308: 2,
	      309: 3,
	      310: 2,
	      311: 2,
	      312: 2,
	      313: 2,
	      314: 2,
	      315: 2,
	      316: 4,
	      325: 2,
	      326: 2,
	      327: 2,
	      328: 2,
	      331: 2,
	      332: 2,
	      337: 2,
	      342: 1,
	      343: 1,
	      346: 2,
	      347: 1,
	      350: 4,
	      351: 3,
	      352: 1,
	      353: 2,
	      360: 1,
	      368: 1,
	      369: 1,
	      370: 1,
	      371: 1,
	      372: 1,
	      373: 1,
	      374: 1,
	      375: 1,
	      376: 1,
	      377: 1,
	      378: 1,
	      382: 3,
	      385: 1,
	      392: 1,
	      393: 1,
	      396: 2,
	      397: 2,
	      398: 2,
	      399: 1,
	      400: 1,
	      401: 1,
	      402: 1,
	      403: 1,
	      404: 1,
	      405: 1,
	      406: 1,
	      407: 1,
	      408: 1,
	      409: 1,
	      410: 1,
	      414: 4,
	      415: 1,
	      416: 1,
	      417: 2,
	      420: 1,
	      421: 1,
	      422: 2,
	      424: 1,
	      425: 2,
	      426: 2,
	      427: 2,
	      428: 2,
	      430: 3,
	      438: 3,
	      439: 3,
	      440: 3,
	      443: 2,
	      444: 2,
	      445: 2,
	      446: 2,
	      447: 6,
	      448: 6,
	      449: 2,
	      450: 2,
	      464: 2,
	      468: 3,
	      476: 2,
	      479: 1,
	      480: 2,
	      65535: 0
	    };
	    function ods_to_csf_formula(f) {
	      if (f.slice(0, 3) == "of:") f = f.slice(3);
	      if (f.charCodeAt(0) == 61) {
	        f = f.slice(1);
	        if (f.charCodeAt(0) == 61) f = f.slice(1);
	      }
	      f = f.replace(/COM\.MICROSOFT\./g, "");
	      f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function ($$, $1) {
	        return $1.replace(/\./g, "");
	      });
	      f = f.replace(/\$'([^']|'')+'/g, function ($$) {
	        return $$.slice(1);
	      });
	      f = f.replace(/\$([^\]\. #$]+)/g, function ($$, $1) {
	        return $1.match(/^([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])?(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})?$/) ? $$ : $1;
	      });
	      f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
	      return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
	    }
	    function csf_to_ods_formula(f) {
	      var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
	      return o.replace(/;/g, "|").replace(/,/g, ";");
	    }
	    function ods_to_csf_3D(r) {
	      r = r.replace(/\$'([^']|'')+'/g, function ($$) {
	        return $$.slice(1);
	      });
	      r = r.replace(/\$([^\]\. #$]+)/g, function ($$, $1) {
	        return $1.match(/^([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])?(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})?$/) ? $$ : $1;
	      });
	      var a = r.split(":");
	      var s = a[0].split(".")[0];
	      return [s, a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")];
	    }
	    function csf_to_ods_3D(r) {
	      return r.replace(/!/, ".").replace(/:/, ":.");
	    }
	    var strs = {};
	    var _ssfopts = {};
	    var browser_has_Map = typeof Map !== "undefined";
	    function get_sst_id(sst, str, rev) {
	      var i = 0, len = sst.length;
	      if (rev) {
	        if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
	          var revarr = browser_has_Map ? rev.get(str) : rev[str];
	          for (; i < revarr.length; ++i) {
	            if (sst[revarr[i]].t === str) {
	              sst.Count++;
	              return revarr[i];
	            }
	          }
	        }
	      } else for (; i < len; ++i) {
	        if (sst[i].t === str) {
	          sst.Count++;
	          return i;
	        }
	      }
	      sst[len] = {
	        t: str
	      };
	      sst.Count++;
	      sst.Unique++;
	      if (rev) {
	        if (browser_has_Map) {
	          if (!rev.has(str)) rev.set(str, []);
	          rev.get(str).push(len);
	        } else {
	          if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
	          rev[str].push(len);
	        }
	      }
	      return len;
	    }
	    function col_obj_w(C, col) {
	      var p = {
	        min: C + 1,
	        max: C + 1
	      };
	      var wch = -1;
	      if (col.MDW) MDW = col.MDW;
	      if (col.width != null) p.customWidth = 1; else if (col.wpx != null) wch = px2char(col.wpx); else if (col.wch != null) wch = col.wch;
	      if (wch > -1) {
	        p.width = char2width(wch);
	        p.customWidth = 1;
	      } else if (col.width != null) p.width = col.width;
	      if (col.hidden) p.hidden = true;
	      if (col.level != null) {
	        p.outlineLevel = p.level = col.level;
	      }
	      return p;
	    }
	    function default_margins(margins, mode) {
	      if (!margins) return;
	      var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
	      if (mode == "xlml") defs = [1, 1, 1, 1, 0.5, 0.5];
	      if (margins.left == null) margins.left = defs[0];
	      if (margins.right == null) margins.right = defs[1];
	      if (margins.top == null) margins.top = defs[2];
	      if (margins.bottom == null) margins.bottom = defs[3];
	      if (margins.header == null) margins.header = defs[4];
	      if (margins.footer == null) margins.footer = defs[5];
	    }
	    function get_cell_style(styles, cell, opts) {
	      var z = opts.revssf[cell.z != null ? cell.z : "General"];
	      var i = 60, len = styles.length;
	      if (z == null && opts.ssf) {
	        for (; i < 392; ++i) if (opts.ssf[i] == null) {
	          SSF__load(cell.z, i);
	          opts.ssf[i] = cell.z;
	          opts.revssf[cell.z] = z = i;
	          break;
	        }
	      }
	      for (i = 0; i != len; ++i) if (styles[i].numFmtId === z) return i;
	      styles[len] = {
	        numFmtId: z,
	        fontId: 0,
	        fillId: 0,
	        borderId: 0,
	        xfId: 0,
	        applyNumberFormat: 1
	      };
	      return len;
	    }
	    function safe_format(p, fmtid, fillid, opts, themes, styles, date1904) {
	      try {
	        if (opts.cellNF) p.z = table_fmt[fmtid];
	      } catch (e) {
	        if (opts.WTF) throw e;
	      }
	      if (p.t === "z" && !opts.cellStyles) return;
	      if (p.t === "d" && typeof p.v === "string") p.v = parseDate(p.v);
	      if ((!opts || opts.cellText !== false) && p.t !== "z") try {
	        if (table_fmt[fmtid] == null) SSF__load(SSFImplicit[fmtid] || "General", fmtid);
	        if (p.t === "e") p.w = p.w || BErr[p.v]; else if (fmtid === 0) {
	          if (p.t === "n") {
	            if ((p.v | 0) === p.v) p.w = p.v.toString(10); else p.w = SSF_general_num(p.v);
	          } else if (p.t === "d") {
	            var dd = datenum(p.v, !!date1904);
	            if ((dd | 0) === dd) p.w = dd.toString(10); else p.w = SSF_general_num(dd);
	          } else if (p.v === undefined) return ""; else p.w = SSF_general(p.v, _ssfopts);
	        } else if (p.t === "d") p.w = SSF_format(fmtid, datenum(p.v, !!date1904), _ssfopts); else p.w = SSF_format(fmtid, p.v, _ssfopts);
	      } catch (e) {
	        if (opts.WTF) throw e;
	      }
	      if (!opts.cellStyles) return;
	      if (fillid != null) try {
	        p.s = styles.Fills[fillid];
	        if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
	          p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
	          if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
	        }
	        if (p.s.bgColor && p.s.bgColor.theme) {
	          p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
	          if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
	        }
	      } catch (e) {
	        if (opts.WTF && styles.Fills) throw e;
	      }
	    }
	    function check_ws(ws, sname, i) {
	      if (ws && ws["!ref"]) {
	        var range = safe_decode_range(ws["!ref"]);
	        if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error("Bad range (" + i + "): " + ws["!ref"]);
	      }
	    }
	    function parse_ws_xml_dim(ws, s) {
	      var d = safe_decode_range(s);
	      if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws["!ref"] = encode_range(d);
	    }
	    var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
	    var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
	    var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
	    var dimregex = /"(\w*:\w*)"/;
	    var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
	    var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
	    var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
	    var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
	    var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
	    var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
	    function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
	      if (!data) return data;
	      if (!rels) rels = {
	        "!id": {}
	      };
	      var s = {};
	      if (opts.dense) s["!data"] = [];
	      var refguess = {
	        s: {
	          r: 2000000,
	          c: 2000000
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var data1 = "", data2 = "";
	      var mtch = data.match(sheetdataregex);
	      if (mtch) {
	        data1 = data.slice(0, mtch.index);
	        data2 = data.slice(mtch.index + mtch[0].length);
	      } else data1 = data2 = data;
	      var sheetPr = data1.match(sheetprregex);
	      if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx); else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s, wb, idx);
	      var ridx = (data1.match(/<(?:\w*:)?dimension/) || ({
	        index: -1
	      })).index;
	      if (ridx > 0) {
	        var ref = data1.slice(ridx, ridx + 50).match(dimregex);
	        if (ref && !(opts && opts.nodim)) parse_ws_xml_dim(s, ref[1]);
	      }
	      var svs = data1.match(svsregex);
	      if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
	      var columns = [];
	      if (opts.cellStyles) {
	        var cols = data1.match(colregex);
	        if (cols) parse_ws_xml_cols(columns, cols);
	      }
	      if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles, wb);
	      var afilter = data2.match(afregex);
	      if (afilter) s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
	      var merges = [];
	      var _merge = data2.match(mergecregex);
	      if (_merge) for (ridx = 0; ridx != _merge.length; ++ridx) merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf("\"") + 1));
	      var hlink = data2.match(hlinkregex);
	      if (hlink) parse_ws_xml_hlinks(s, hlink, rels);
	      var margins = data2.match(marginregex);
	      if (margins) s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
	      var m;
	      if (m = data2.match(/legacyDrawing r:id="(.*?)"/)) s["!legrel"] = m[1];
	      if (opts && opts.nodim) refguess.s.c = refguess.s.r = 0;
	      if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
	      if (opts.sheetRows > 0 && s["!ref"]) {
	        var tmpref = safe_decode_range(s["!ref"]);
	        if (opts.sheetRows <= +tmpref.e.r) {
	          tmpref.e.r = opts.sheetRows - 1;
	          if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
	          if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
	          if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
	          if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
	          s["!fullref"] = s["!ref"];
	          s["!ref"] = encode_range(tmpref);
	        }
	      }
	      if (columns.length > 0) s["!cols"] = columns;
	      if (merges.length > 0) s["!merges"] = merges;
	      if (rels["!id"][s["!legrel"]]) s["!legdrawel"] = rels["!id"][s["!legrel"]];
	      return s;
	    }
	    function write_ws_xml_merges(merges) {
	      if (merges.length === 0) return "";
	      var o = "<mergeCells count=\"" + merges.length + "\">";
	      for (var i = 0; i != merges.length; ++i) o += "<mergeCell ref=\"" + encode_range(merges[i]) + "\"/>";
	      return o + "</mergeCells>";
	    }
	    function parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {
	      var data = parsexmltag(sheetPr);
	      if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
	      if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
	    }
	    function parse_ws_xml_sheetpr2(sheetPr, body, s, wb, idx) {
	      parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
	    }
	    function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
	      var needed = false;
	      var props = {}, payload = null;
	      if (opts.bookType !== "xlsx" && wb.vbaraw) {
	        var cname = wb.SheetNames[idx];
	        try {
	          if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;
	        } catch (e) {}
	        needed = true;
	        props.codeName = utf8write(escapexml(cname));
	      }
	      if (ws && ws["!outline"]) {
	        var outlineprops = {
	          summaryBelow: 1,
	          summaryRight: 1
	        };
	        if (ws["!outline"].above) outlineprops.summaryBelow = 0;
	        if (ws["!outline"].left) outlineprops.summaryRight = 0;
	        payload = (payload || "") + writextag("outlinePr", null, outlineprops);
	      }
	      if (!needed && !payload) return;
	      o[o.length] = writextag("sheetPr", payload, props);
	    }
	    var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
	    var sheetprot_deftrue = ["formatColumns", "formatRows", "formatCells", "insertColumns", "insertRows", "insertHyperlinks", "deleteColumns", "deleteRows", "sort", "autoFilter", "pivotTables"];
	    function write_ws_xml_protection(sp) {
	      var o = {
	        sheet: 1
	      };
	      sheetprot_deffalse.forEach(function (n) {
	        if (sp[n] != null && sp[n]) o[n] = "1";
	      });
	      sheetprot_deftrue.forEach(function (n) {
	        if (sp[n] != null && !sp[n]) o[n] = "0";
	      });
	      if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
	      return writextag("sheetProtection", null, o);
	    }
	    function parse_ws_xml_hlinks(s, data, rels) {
	      var dense = s["!data"] != null;
	      for (var i = 0; i != data.length; ++i) {
	        var val = parsexmltag(utf8read(data[i]), true);
	        if (!val.ref) return;
	        var rel = ((rels || ({}))["!id"] || [])[val.id];
	        if (rel) {
	          val.Target = rel.Target;
	          if (val.location) val.Target += "#" + unescapexml(val.location);
	        } else {
	          val.Target = "#" + unescapexml(val.location);
	          rel = {
	            Target: val.Target,
	            TargetMode: "Internal"
	          };
	        }
	        val.Rel = rel;
	        if (val.tooltip) {
	          val.Tooltip = val.tooltip;
	          delete val.tooltip;
	        }
	        var rng = safe_decode_range(val.ref);
	        for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
	          var addr = encode_col(C) + encode_row(R);
	          if (dense) {
	            if (!s["!data"][R]) s["!data"][R] = [];
	            if (!s["!data"][R][C]) s["!data"][R][C] = {
	              t: "z",
	              v: undefined
	            };
	            s["!data"][R][C].l = val;
	          } else {
	            if (!s[addr]) s[addr] = {
	              t: "z",
	              v: undefined
	            };
	            s[addr].l = val;
	          }
	        }
	      }
	    }
	    function parse_ws_xml_margins(margin) {
	      var o = {};
	      ["left", "right", "top", "bottom", "header", "footer"].forEach(function (k) {
	        if (margin[k]) o[k] = parseFloat(margin[k]);
	      });
	      return o;
	    }
	    function write_ws_xml_margins(margin) {
	      default_margins(margin);
	      return writextag("pageMargins", null, margin);
	    }
	    function parse_ws_xml_cols(columns, cols) {
	      var seencol = false;
	      for (var coli = 0; coli != cols.length; ++coli) {
	        var coll = parsexmltag(cols[coli], true);
	        if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
	        var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
	        if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;
	        delete coll.min;
	        delete coll.max;
	        coll.width = +coll.width;
	        if (!seencol && coll.width) {
	          seencol = true;
	          find_mdw_colw(coll.width);
	        }
	        process_col(coll);
	        while (colm <= colM) columns[colm++] = dup(coll);
	      }
	    }
	    function write_ws_xml_cols(ws, cols) {
	      var o = ["<cols>"], col;
	      for (var i = 0; i != cols.length; ++i) {
	        if (!(col = cols[i])) continue;
	        o[o.length] = writextag("col", null, col_obj_w(i, col));
	      }
	      o[o.length] = "</cols>";
	      return o.join("");
	    }
	    function parse_ws_xml_autofilter(data) {
	      var o = {
	        ref: (data.match(/ref="([^"]*)"/) || [])[1]
	      };
	      return o;
	    }
	    function write_ws_xml_autofilter(data, ws, wb, idx) {
	      var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
	      if (!wb.Workbook) wb.Workbook = {
	        Sheets: []
	      };
	      if (!wb.Workbook.Names) wb.Workbook.Names = [];
	      var names = wb.Workbook.Names;
	      var range = decode_range(ref);
	      if (range.s.r == range.e.r) {
	        range.e.r = decode_range(ws["!ref"]).e.r;
	        ref = encode_range(range);
	      }
	      for (var i = 0; i < names.length; ++i) {
	        var name = names[i];
	        if (name.Name != "_xlnm._FilterDatabase") continue;
	        if (name.Sheet != idx) continue;
	        name.Ref = formula_quote_sheet_name(wb.SheetNames[idx]) + "!" + fix_range(ref);
	        break;
	      }
	      if (i == names.length) names.push({
	        Name: "_xlnm._FilterDatabase",
	        Sheet: idx,
	        Ref: "'" + wb.SheetNames[idx] + "'!" + ref
	      });
	      return writextag("autoFilter", null, {
	        ref: ref
	      });
	    }
	    var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/g;
	    function parse_ws_xml_sheetviews(data, wb) {
	      if (!wb.Views) wb.Views = [{}];
	      (data.match(sviewregex) || []).forEach(function (r, i) {
	        var tag = parsexmltag(r);
	        if (!wb.Views[i]) wb.Views[i] = {};
	        if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
	        if (tag.rightToLeft && parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
	      });
	    }
	    function write_ws_xml_sheetviews(ws, opts, idx, wb) {
	      var sview = {
	        workbookViewId: "0"
	      };
	      if ((((wb || ({})).Workbook || ({})).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
	      return writextag("sheetViews", writextag("sheetView", null, sview), {});
	    }
	    function write_ws_xml_cell(cell, ref, ws, opts, idx, wb, date1904) {
	      if (cell.c) ws["!comments"].push([ref, cell.c]);
	      if ((cell.v === undefined || cell.t === "z" && !(opts || ({})).sheetStubs) && typeof cell.f !== "string" && typeof cell.z == "undefined") return "";
	      var vv = "";
	      var oldt = cell.t, oldv = cell.v;
	      if (cell.t !== "z") switch (cell.t) {
	        case "b":
	          vv = cell.v ? "1" : "0";
	          break;
	        case "n":
	          if (isNaN(cell.v)) {
	            cell.t = "e";
	            vv = BErr[cell.v = 36];
	          } else if (!isFinite(cell.v)) {
	            cell.t = "e";
	            vv = BErr[cell.v = 7];
	          } else vv = "" + cell.v;
	          break;
	        case "e":
	          vv = BErr[cell.v];
	          break;
	        case "d":
	          if (opts && opts.cellDates) {
	            var _vv = parseDate(cell.v, date1904);
	            vv = _vv.toISOString();
	            if (_vv.getUTCFullYear() < 1900) vv = vv.slice(vv.indexOf("T") + 1).replace("Z", "");
	          } else {
	            cell = dup(cell);
	            cell.t = "n";
	            vv = "" + (cell.v = datenum(parseDate(cell.v, date1904), date1904));
	          }
	          if (typeof cell.z === "undefined") cell.z = table_fmt[14];
	          break;
	        default:
	          vv = cell.v;
	          break;
	      }
	      var v = cell.t == "z" || cell.v == null ? "" : writetag("v", escapexml(vv)), o = {
	        r: ref
	      };
	      var os = get_cell_style(opts.cellXfs, cell, opts);
	      if (os !== 0) o.s = os;
	      switch (cell.t) {
	        case "n":
	          break;
	        case "d":
	          o.t = "d";
	          break;
	        case "b":
	          o.t = "b";
	          break;
	        case "e":
	          o.t = "e";
	          break;
	        case "z":
	          break;
	        default:
	          if (cell.v == null) {
	            delete cell.t;
	            break;
	          }
	          if (cell.v.length > 32767) throw new Error("Text length must not exceed 32767 characters");
	          if (opts && opts.bookSST) {
	            v = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
	            o.t = "s";
	            break;
	          } else o.t = "str";
	          break;
	      }
	      if (cell.t != oldt) {
	        cell.t = oldt;
	        cell.v = oldv;
	      }
	      if (typeof cell.f == "string" && cell.f) {
	        var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {
	          t: "array",
	          ref: cell.F
	        } : null;
	        v = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v : "");
	      }
	      if (cell.l) {
	        cell.l.display = escapexml(vv);
	        ws["!links"].push([ref, cell.l]);
	      }
	      if (cell.D) o.cm = 1;
	      return writextag("c", v, o);
	    }
	    var parse_ws_xml_data = (function () {
	      var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
	      var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
	      var refregex = /ref=["']([^"']*)["']/;
	      var match_v = matchtag("v"), match_f = matchtag("f");
	      return function parse_ws_xml_data(sdata, s, opts, guess, themes, styles, wb) {
	        var ri = 0, x = "", cells = [], cref = [], idx = 0, i = 0, cc = 0, d = "", p;
	        var tag, tagr = 0, tagc = 0;
	        var sstr, ftag;
	        var fmtid = 0, fillid = 0;
	        var do_format = Array.isArray(styles.CellXf), cf;
	        var arrayf = [];
	        var sharedf = [];
	        var dense = s["!data"] != null;
	        var rows = [], rowobj = {}, rowrite = false;
	        var sheetStubs = !!opts.sheetStubs;
	        var date1904 = !!((wb || ({})).WBProps || ({})).date1904;
	        for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
	          x = marr[mt].trim();
	          var xlen = x.length;
	          if (xlen === 0) continue;
	          var rstarti = 0;
	          outa: for (ri = 0; ri < xlen; ++ri) switch (x[ri]) {
	            case ">":
	              if (x[ri - 1] != "/") {
	                ++ri;
	                break outa;
	              }
	              if (opts && opts.cellStyles) {
	                tag = parsexmltag(x.slice(rstarti, ri), true);
	                tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
	                tagc = -1;
	                if (opts.sheetRows && opts.sheetRows < tagr) continue;
	                rowobj = {};
	                rowrite = false;
	                if (tag.ht) {
	                  rowrite = true;
	                  rowobj.hpt = parseFloat(tag.ht);
	                  rowobj.hpx = pt2px(rowobj.hpt);
	                }
	                if (tag.hidden && parsexmlbool(tag.hidden)) {
	                  rowrite = true;
	                  rowobj.hidden = true;
	                }
	                if (tag.outlineLevel != null) {
	                  rowrite = true;
	                  rowobj.level = +tag.outlineLevel;
	                }
	                if (rowrite) rows[tagr - 1] = rowobj;
	              }
	              break;
	            case "<":
	              rstarti = ri;
	              break;
	          }
	          if (rstarti >= ri) break;
	          tag = parsexmltag(x.slice(rstarti, ri), true);
	          tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
	          tagc = -1;
	          if (opts.sheetRows && opts.sheetRows < tagr) continue;
	          if (!opts.nodim) {
	            if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
	            if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;
	          }
	          if (opts && opts.cellStyles) {
	            rowobj = {};
	            rowrite = false;
	            if (tag.ht) {
	              rowrite = true;
	              rowobj.hpt = parseFloat(tag.ht);
	              rowobj.hpx = pt2px(rowobj.hpt);
	            }
	            if (tag.hidden && parsexmlbool(tag.hidden)) {
	              rowrite = true;
	              rowobj.hidden = true;
	            }
	            if (tag.outlineLevel != null) {
	              rowrite = true;
	              rowobj.level = +tag.outlineLevel;
	            }
	            if (rowrite) rows[tagr - 1] = rowobj;
	          }
	          cells = x.slice(ri).split(cellregex);
	          for (var rslice = 0; rslice != cells.length; ++rslice) if (cells[rslice].trim().charAt(0) != "<") break;
	          cells = cells.slice(rslice);
	          for (ri = 0; ri != cells.length; ++ri) {
	            x = cells[ri].trim();
	            if (x.length === 0) continue;
	            cref = x.match(rregex);
	            idx = ri;
	            i = 0;
	            cc = 0;
	            x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
	            if (cref != null && cref.length === 2) {
	              idx = 0;
	              d = cref[1];
	              for (i = 0; i != d.length; ++i) {
	                if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;
	                idx = 26 * idx + cc;
	              }
	              --idx;
	              tagc = idx;
	            } else ++tagc;
	            for (i = 0; i != x.length; ++i) if (x.charCodeAt(i) === 62) break;
	            ++i;
	            tag = parsexmltag(x.slice(0, i), true);
	            if (!tag.r) tag.r = encode_cell({
	              r: tagr - 1,
	              c: tagc
	            });
	            d = x.slice(i);
	            p = {
	              t: ""
	            };
	            if ((cref = d.match(match_v)) != null && cref[1] !== "") p.v = unescapexml(cref[1]);
	            if (opts.cellFormula) {
	              if ((cref = d.match(match_f)) != null) {
	                if (cref[1] == "") {
	                  if (cref[0].indexOf("t=\"shared\"") > -1) {
	                    ftag = parsexmltag(cref[0]);
	                    if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
	                  }
	                } else {
	                  p.f = unescapexml(utf8read(cref[1]), true);
	                  if (!opts.xlfn) p.f = _xlfn(p.f);
	                  if (cref[0].indexOf("t=\"array\"") > -1) {
	                    p.F = (d.match(refregex) || [])[1];
	                    if (p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
	                  } else if (cref[0].indexOf("t=\"shared\"") > -1) {
	                    ftag = parsexmltag(cref[0]);
	                    var ___f = unescapexml(utf8read(cref[1]));
	                    if (!opts.xlfn) ___f = _xlfn(___f);
	                    sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
	                  }
	                }
	              } else if (cref = d.match(/<f[^>]*\/>/)) {
	                ftag = parsexmltag(cref[0]);
	                if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
	              }
	              var _tag = decode_cell(tag.r);
	              for (i = 0; i < arrayf.length; ++i) if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1];
	            }
	            if (tag.t == null && p.v === undefined) {
	              if (p.f || p.F) {
	                p.v = 0;
	                p.t = "n";
	              } else if (!sheetStubs) continue; else p.t = "z";
	            } else p.t = tag.t || "n";
	            if (guess.s.c > tagc) guess.s.c = tagc;
	            if (guess.e.c < tagc) guess.e.c = tagc;
	            switch (p.t) {
	              case "n":
	                if (p.v == "" || p.v == null) {
	                  if (!sheetStubs) continue;
	                  p.t = "z";
	                } else p.v = parseFloat(p.v);
	                break;
	              case "s":
	                if (typeof p.v == "undefined") {
	                  if (!sheetStubs) continue;
	                  p.t = "z";
	                } else {
	                  sstr = strs[parseInt(p.v, 10)];
	                  p.v = sstr.t;
	                  p.r = sstr.r;
	                  if (opts.cellHTML) p.h = sstr.h;
	                }
	                break;
	              case "str":
	                p.t = "s";
	                p.v = p.v != null ? unescapexml(utf8read(p.v), true) : "";
	                if (opts.cellHTML) p.h = escapehtml(p.v);
	                break;
	              case "inlineStr":
	                cref = d.match(isregex);
	                p.t = "s";
	                if (cref != null && (sstr = parse_si(cref[1]))) {
	                  p.v = sstr.t;
	                  if (opts.cellHTML) p.h = sstr.h;
	                } else p.v = "";
	                break;
	              case "b":
	                p.v = parsexmlbool(p.v);
	                break;
	              case "d":
	                if (opts.cellDates) p.v = parseDate(p.v, date1904); else {
	                  p.v = datenum(parseDate(p.v, date1904), date1904);
	                  p.t = "n";
	                }
	                break;
	              case "e":
	                if (!opts || opts.cellText !== false) p.w = p.v;
	                p.v = RBErr[p.v];
	                break;
	            }
	            fmtid = fillid = 0;
	            cf = null;
	            if (do_format && tag.s !== undefined) {
	              cf = styles.CellXf[tag.s];
	              if (cf != null) {
	                if (cf.numFmtId != null) fmtid = cf.numFmtId;
	                if (opts.cellStyles) {
	                  if (cf.fillId != null) fillid = cf.fillId;
	                }
	              }
	            }
	            safe_format(p, fmtid, fillid, opts, themes, styles, date1904);
	            if (opts.cellDates && do_format && p.t == "n" && fmt_is_date(table_fmt[fmtid])) {
	              p.v = numdate(p.v + (date1904 ? 1462 : 0));
	              p.t = typeof p.v == "number" ? "n" : "d";
	            }
	            if (tag.cm && opts.xlmeta) {
	              var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
	              if (cm && cm.type == "XLDAPR") p.D = true;
	            }
	            var _r;
	            if (opts.nodim) {
	              _r = decode_cell(tag.r);
	              if (guess.s.r > _r.r) guess.s.r = _r.r;
	              if (guess.e.r < _r.r) guess.e.r = _r.r;
	            }
	            if (dense) {
	              _r = decode_cell(tag.r);
	              if (!s["!data"][_r.r]) s["!data"][_r.r] = [];
	              s["!data"][_r.r][_r.c] = p;
	            } else s[tag.r] = p;
	          }
	        }
	        if (rows.length > 0) s["!rows"] = rows;
	      };
	    })();
	    function write_ws_xml_data(ws, opts, idx, wb) {
	      var o = [], r = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr = "", cols = [], R = 0, C = 0, rows = ws["!rows"];
	      var dense = ws["!data"] != null;
	      var params = {
	        r: rr
	      }, row, height = -1;
	      var date1904 = (((wb || ({})).Workbook || ({})).WBProps || ({})).date1904;
	      for (C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
	      for (R = range.s.r; R <= range.e.r; ++R) {
	        r = [];
	        rr = encode_row(R);
	        for (C = range.s.c; C <= range.e.c; ++C) {
	          ref = cols[C] + rr;
	          var _cell = dense ? (ws["!data"][R] || [])[C] : ws[ref];
	          if (_cell === undefined) continue;
	          if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb, date1904)) != null) r.push(cell);
	        }
	        if (r.length > 0 || rows && rows[R]) {
	          params = {
	            r: rr
	          };
	          if (rows && rows[R]) {
	            row = rows[R];
	            if (row.hidden) params.hidden = 1;
	            height = -1;
	            if (row.hpx) height = px2pt(row.hpx); else if (row.hpt) height = row.hpt;
	            if (height > -1) {
	              params.ht = height;
	              params.customHeight = 1;
	            }
	            if (row.level) {
	              params.outlineLevel = row.level;
	            }
	          }
	          o[o.length] = writextag("row", r.join(""), params);
	        }
	      }
	      if (rows) for (; R < rows.length; ++R) {
	        if (rows && rows[R]) {
	          params = {
	            r: R + 1
	          };
	          row = rows[R];
	          if (row.hidden) params.hidden = 1;
	          height = -1;
	          if (row.hpx) height = px2pt(row.hpx); else if (row.hpt) height = row.hpt;
	          if (height > -1) {
	            params.ht = height;
	            params.customHeight = 1;
	          }
	          if (row.level) {
	            params.outlineLevel = row.level;
	          }
	          o[o.length] = writextag("row", "", params);
	        }
	      }
	      return o.join("");
	    }
	    function write_ws_xml(idx, opts, wb, rels) {
	      var o = [XML_HEADER, writextag("worksheet", null, {
	        "xmlns": XMLNS_main[0],
	        "xmlns:r": XMLNS.r
	      })];
	      var s = wb.SheetNames[idx], sidx = 0, rdata = "";
	      var ws = wb.Sheets[s];
	      if (ws == null) ws = {};
	      var ref = ws["!ref"] || "A1";
	      var range = safe_decode_range(ref);
	      if (range.e.c > 16383 || range.e.r > 1048575) {
	        if (opts.WTF) throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
	        range.e.c = Math.min(range.e.c, 16383);
	        range.e.r = Math.min(range.e.c, 1048575);
	        ref = encode_range(range);
	      }
	      if (!rels) rels = {};
	      ws["!comments"] = [];
	      var _drawing = [];
	      write_ws_xml_sheetpr(ws, wb, idx, opts, o);
	      o[o.length] = writextag("dimension", null, {
	        "ref": ref
	      });
	      o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
	      if (opts.sheetFormat) o[o.length] = writextag("sheetFormatPr", null, {
	        defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
	        baseColWidth: opts.sheetFormat.baseColWidth || "10",
	        outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
	      });
	      if (ws["!cols"] != null && ws["!cols"].length > 0) o[o.length] = write_ws_xml_cols(ws, ws["!cols"]);
	      o[sidx = o.length] = "<sheetData/>";
	      ws["!links"] = [];
	      if (ws["!ref"] != null) {
	        rdata = write_ws_xml_data(ws, opts, idx, wb);
	        if (rdata.length > 0) o[o.length] = rdata;
	      }
	      if (o.length > sidx + 1) {
	        o[o.length] = "</sheetData>";
	        o[sidx] = o[sidx].replace("/>", ">");
	      }
	      if (ws["!protect"]) o[o.length] = write_ws_xml_protection(ws["!protect"]);
	      if (ws["!autofilter"] != null) o[o.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
	      if (ws["!merges"] != null && ws["!merges"].length > 0) o[o.length] = write_ws_xml_merges(ws["!merges"]);
	      var relc = -1, rel, rId = -1;
	      if (ws["!links"].length > 0) {
	        o[o.length] = "<hyperlinks>";
	        ws["!links"].forEach(function (l) {
	          if (!l[1].Target) return;
	          rel = {
	            "ref": l[0]
	          };
	          if (l[1].Target.charAt(0) != "#") {
	            rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
	            rel["r:id"] = "rId" + rId;
	          }
	          if ((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.slice(relc + 1));
	          if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
	          rel.display = l[1].display;
	          o[o.length] = writextag("hyperlink", null, rel);
	        });
	        o[o.length] = "</hyperlinks>";
	      }
	      delete ws["!links"];
	      if (ws["!margins"] != null) o[o.length] = write_ws_xml_margins(ws["!margins"]);
	      if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, {
	        numberStoredAsText: 1,
	        sqref: ref
	      }));
	      if (_drawing.length > 0) {
	        rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
	        o[o.length] = writextag("drawing", null, {
	          "r:id": "rId" + rId
	        });
	        ws["!drawing"] = _drawing;
	      }
	      if (ws["!comments"].length > 0) {
	        rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
	        o[o.length] = writextag("legacyDrawing", null, {
	          "r:id": "rId" + rId
	        });
	        ws["!legacy"] = rId;
	      }
	      if (o.length > 1) {
	        o[o.length] = "</worksheet>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    function parse_BrtRowHdr(data, length) {
	      var z = {};
	      var tgt = data.l + length;
	      z.r = data.read_shift(4);
	      data.l += 4;
	      var miyRw = data.read_shift(2);
	      data.l += 1;
	      var flags = data.read_shift(1);
	      data.l = tgt;
	      if (flags & 7) z.level = flags & 7;
	      if (flags & 16) z.hidden = true;
	      if (flags & 32) z.hpt = miyRw / 20;
	      return z;
	    }
	    function write_BrtRowHdr(R, range, ws) {
	      var o = new_buf(17 + 8 * 16);
	      var row = (ws["!rows"] || [])[R] || ({});
	      o.write_shift(4, R);
	      o.write_shift(4, 0);
	      var miyRw = 320;
	      if (row.hpx) miyRw = px2pt(row.hpx) * 20; else if (row.hpt) miyRw = row.hpt * 20;
	      o.write_shift(2, miyRw);
	      o.write_shift(1, 0);
	      var flags = 0;
	      if (row.level) flags |= row.level;
	      if (row.hidden) flags |= 16;
	      if (row.hpx || row.hpt) flags |= 32;
	      o.write_shift(1, flags);
	      o.write_shift(1, 0);
	      var ncolspan = 0, lcs = o.l;
	      o.l += 4;
	      var caddr = {
	        r: R,
	        c: 0
	      };
	      var dense = ws["!data"] != null;
	      for (var i = 0; i < 16; ++i) {
	        if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue;
	        var first = -1, last = -1;
	        for (var j = i << 10; j < i + 1 << 10; ++j) {
	          caddr.c = j;
	          var cell = dense ? (ws["!data"][caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
	          if (cell) {
	            if (first < 0) first = j;
	            last = j;
	          }
	        }
	        if (first < 0) continue;
	        ++ncolspan;
	        o.write_shift(4, first);
	        o.write_shift(4, last);
	      }
	      var l = o.l;
	      o.l = lcs;
	      o.write_shift(4, ncolspan);
	      o.l = l;
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function write_row_header(ba, ws, range, R) {
	      var o = write_BrtRowHdr(R, range, ws);
	      if (o.length > 17 || (ws["!rows"] || [])[R]) write_record(ba, 0, o);
	    }
	    var parse_BrtWsDim = parse_UncheckedRfX;
	    var write_BrtWsDim = write_UncheckedRfX;
	    function parse_BrtWsFmtInfo() {}
	    function parse_BrtWsProp(data, length) {
	      var z = {};
	      var f = data[data.l];
	      ++data.l;
	      z.above = !(f & 64);
	      z.left = !(f & 128);
	      data.l += 18;
	      z.name = parse_XLSBCodeName(data);
	      return z;
	    }
	    function write_BrtWsProp(str, outl, o) {
	      if (o == null) o = new_buf(84 + 4 * str.length);
	      var f = 192;
	      if (outl) {
	        if (outl.above) f &= ~64;
	        if (outl.left) f &= ~128;
	      }
	      o.write_shift(1, f);
	      for (var i = 1; i < 3; ++i) o.write_shift(1, 0);
	      write_BrtColor({
	        auto: 1
	      }, o);
	      o.write_shift(-4, -1);
	      o.write_shift(-4, -1);
	      write_XLSBCodeName(str, o);
	      return o.slice(0, o.l);
	    }
	    function parse_BrtCellBlank(data) {
	      var cell = parse_XLSBCell(data);
	      return [cell];
	    }
	    function write_BrtCellBlank(cell, ncell, o) {
	      if (o == null) o = new_buf(8);
	      return write_XLSBCell(ncell, o);
	    }
	    function parse_BrtShortBlank(data) {
	      var cell = parse_XLSBShortCell(data);
	      return [cell];
	    }
	    function write_BrtShortBlank(cell, ncell, o) {
	      if (o == null) o = new_buf(4);
	      return write_XLSBShortCell(ncell, o);
	    }
	    function parse_BrtCellBool(data) {
	      var cell = parse_XLSBCell(data);
	      var fBool = data.read_shift(1);
	      return [cell, fBool, "b"];
	    }
	    function write_BrtCellBool(cell, ncell, o) {
	      if (o == null) o = new_buf(9);
	      write_XLSBCell(ncell, o);
	      o.write_shift(1, cell.v ? 1 : 0);
	      return o;
	    }
	    function parse_BrtShortBool(data) {
	      var cell = parse_XLSBShortCell(data);
	      var fBool = data.read_shift(1);
	      return [cell, fBool, "b"];
	    }
	    function write_BrtShortBool(cell, ncell, o) {
	      if (o == null) o = new_buf(5);
	      write_XLSBShortCell(ncell, o);
	      o.write_shift(1, cell.v ? 1 : 0);
	      return o;
	    }
	    function parse_BrtCellError(data) {
	      var cell = parse_XLSBCell(data);
	      var bError = data.read_shift(1);
	      return [cell, bError, "e"];
	    }
	    function write_BrtCellError(cell, ncell, o) {
	      if (o == null) o = new_buf(9);
	      write_XLSBCell(ncell, o);
	      o.write_shift(1, cell.v);
	      return o;
	    }
	    function parse_BrtShortError(data) {
	      var cell = parse_XLSBShortCell(data);
	      var bError = data.read_shift(1);
	      return [cell, bError, "e"];
	    }
	    function write_BrtShortError(cell, ncell, o) {
	      if (o == null) o = new_buf(8);
	      write_XLSBShortCell(ncell, o);
	      o.write_shift(1, cell.v);
	      o.write_shift(2, 0);
	      o.write_shift(1, 0);
	      return o;
	    }
	    function parse_BrtCellIsst(data) {
	      var cell = parse_XLSBCell(data);
	      var isst = data.read_shift(4);
	      return [cell, isst, "s"];
	    }
	    function write_BrtCellIsst(cell, ncell, o) {
	      if (o == null) o = new_buf(12);
	      write_XLSBCell(ncell, o);
	      o.write_shift(4, ncell.v);
	      return o;
	    }
	    function parse_BrtShortIsst(data) {
	      var cell = parse_XLSBShortCell(data);
	      var isst = data.read_shift(4);
	      return [cell, isst, "s"];
	    }
	    function write_BrtShortIsst(cell, ncell, o) {
	      if (o == null) o = new_buf(8);
	      write_XLSBShortCell(ncell, o);
	      o.write_shift(4, ncell.v);
	      return o;
	    }
	    function parse_BrtCellReal(data) {
	      var cell = parse_XLSBCell(data);
	      var value = parse_Xnum(data);
	      return [cell, value, "n"];
	    }
	    function write_BrtCellReal(cell, ncell, o) {
	      if (o == null) o = new_buf(16);
	      write_XLSBCell(ncell, o);
	      write_Xnum(cell.v, o);
	      return o;
	    }
	    function parse_BrtShortReal(data) {
	      var cell = parse_XLSBShortCell(data);
	      var value = parse_Xnum(data);
	      return [cell, value, "n"];
	    }
	    function write_BrtShortReal(cell, ncell, o) {
	      if (o == null) o = new_buf(12);
	      write_XLSBShortCell(ncell, o);
	      write_Xnum(cell.v, o);
	      return o;
	    }
	    function parse_BrtCellRk(data) {
	      var cell = parse_XLSBCell(data);
	      var value = parse_RkNumber(data);
	      return [cell, value, "n"];
	    }
	    function write_BrtCellRk(cell, ncell, o) {
	      if (o == null) o = new_buf(12);
	      write_XLSBCell(ncell, o);
	      write_RkNumber(cell.v, o);
	      return o;
	    }
	    function parse_BrtShortRk(data) {
	      var cell = parse_XLSBShortCell(data);
	      var value = parse_RkNumber(data);
	      return [cell, value, "n"];
	    }
	    function write_BrtShortRk(cell, ncell, o) {
	      if (o == null) o = new_buf(8);
	      write_XLSBShortCell(ncell, o);
	      write_RkNumber(cell.v, o);
	      return o;
	    }
	    function parse_BrtCellRString(data) {
	      var cell = parse_XLSBCell(data);
	      var value = parse_RichStr(data);
	      return [cell, value, "is"];
	    }
	    function parse_BrtCellSt(data) {
	      var cell = parse_XLSBCell(data);
	      var value = parse_XLWideString(data);
	      return [cell, value, "str"];
	    }
	    function write_BrtCellSt(cell, ncell, o) {
	      var data = cell.v == null ? "" : String(cell.v);
	      if (o == null) o = new_buf(12 + 4 * cell.v.length);
	      write_XLSBCell(ncell, o);
	      write_XLWideString(data, o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function parse_BrtShortSt(data) {
	      var cell = parse_XLSBShortCell(data);
	      var value = parse_XLWideString(data);
	      return [cell, value, "str"];
	    }
	    function write_BrtShortSt(cell, ncell, o) {
	      var data = cell.v == null ? "" : String(cell.v);
	      if (o == null) o = new_buf(8 + 4 * data.length);
	      write_XLSBShortCell(ncell, o);
	      write_XLWideString(data, o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function parse_BrtFmlaBool(data, length, opts) {
	      var end = data.l + length;
	      var cell = parse_XLSBCell(data);
	      cell.r = opts["!row"];
	      var value = data.read_shift(1);
	      var o = [cell, value, "b"];
	      if (opts.cellFormula) {
	        data.l += 2;
	        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
	        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
	      } else data.l = end;
	      return o;
	    }
	    function parse_BrtFmlaError(data, length, opts) {
	      var end = data.l + length;
	      var cell = parse_XLSBCell(data);
	      cell.r = opts["!row"];
	      var value = data.read_shift(1);
	      var o = [cell, value, "e"];
	      if (opts.cellFormula) {
	        data.l += 2;
	        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
	        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
	      } else data.l = end;
	      return o;
	    }
	    function parse_BrtFmlaNum(data, length, opts) {
	      var end = data.l + length;
	      var cell = parse_XLSBCell(data);
	      cell.r = opts["!row"];
	      var value = parse_Xnum(data);
	      var o = [cell, value, "n"];
	      if (opts.cellFormula) {
	        data.l += 2;
	        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
	        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
	      } else data.l = end;
	      return o;
	    }
	    function parse_BrtFmlaString(data, length, opts) {
	      var end = data.l + length;
	      var cell = parse_XLSBCell(data);
	      cell.r = opts["!row"];
	      var value = parse_XLWideString(data);
	      var o = [cell, value, "str"];
	      if (opts.cellFormula) {
	        data.l += 2;
	        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
	        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
	      } else data.l = end;
	      return o;
	    }
	    var parse_BrtMergeCell = parse_UncheckedRfX;
	    var write_BrtMergeCell = write_UncheckedRfX;
	    function write_BrtBeginMergeCells(cnt, o) {
	      if (o == null) o = new_buf(4);
	      o.write_shift(4, cnt);
	      return o;
	    }
	    function parse_BrtHLink(data, length) {
	      var end = data.l + length;
	      var rfx = parse_UncheckedRfX(data);
	      var relId = parse_XLNullableWideString(data);
	      var loc = parse_XLWideString(data);
	      var tooltip = parse_XLWideString(data);
	      var display = parse_XLWideString(data);
	      data.l = end;
	      var o = {
	        rfx: rfx,
	        relId: relId,
	        loc: loc,
	        display: display
	      };
	      if (tooltip) o.Tooltip = tooltip;
	      return o;
	    }
	    function write_BrtHLink(l, rId) {
	      var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || "").length));
	      write_UncheckedRfX({
	        s: decode_cell(l[0]),
	        e: decode_cell(l[0])
	      }, o);
	      write_RelID("rId" + rId, o);
	      var locidx = l[1].Target.indexOf("#");
	      var loc = locidx == -1 ? "" : l[1].Target.slice(locidx + 1);
	      write_XLWideString(loc || "", o);
	      write_XLWideString(l[1].Tooltip || "", o);
	      write_XLWideString("", o);
	      return o.slice(0, o.l);
	    }
	    function parse_BrtPane() {}
	    function parse_BrtArrFmla(data, length, opts) {
	      var end = data.l + length;
	      var rfx = parse_RfX(data);
	      var fAlwaysCalc = data.read_shift(1);
	      var o = [rfx];
	      o[2] = fAlwaysCalc;
	      if (opts.cellFormula) {
	        var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
	        o[1] = formula;
	      } else data.l = end;
	      return o;
	    }
	    function parse_BrtShrFmla(data, length, opts) {
	      var end = data.l + length;
	      var rfx = parse_UncheckedRfX(data);
	      var o = [rfx];
	      if (opts.cellFormula) {
	        var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
	        o[1] = formula;
	        data.l = end;
	      } else data.l = end;
	      return o;
	    }
	    function write_BrtColInfo(C, col, o) {
	      if (o == null) o = new_buf(18);
	      var p = col_obj_w(C, col);
	      o.write_shift(-4, C);
	      o.write_shift(-4, C);
	      o.write_shift(4, (p.width || 10) * 256);
	      o.write_shift(4, 0);
	      var flags = 0;
	      if (col.hidden) flags |= 1;
	      if (typeof p.width == "number") flags |= 2;
	      if (col.level) flags |= col.level << 8;
	      o.write_shift(2, flags);
	      return o;
	    }
	    var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
	    function parse_BrtMargins(data) {
	      var margins = {};
	      BrtMarginKeys.forEach(function (k) {
	        margins[k] = parse_Xnum(data);
	      });
	      return margins;
	    }
	    function write_BrtMargins(margins, o) {
	      if (o == null) o = new_buf(6 * 8);
	      default_margins(margins);
	      BrtMarginKeys.forEach(function (k) {
	        write_Xnum(margins[k], o);
	      });
	      return o;
	    }
	    function parse_BrtBeginWsView(data) {
	      var f = data.read_shift(2);
	      data.l += 28;
	      return {
	        RTL: f & 32
	      };
	    }
	    function write_BrtBeginWsView(ws, Workbook, o) {
	      if (o == null) o = new_buf(30);
	      var f = 924;
	      if ((((Workbook || ({})).Views || [])[0] || ({})).RTL) f |= 32;
	      o.write_shift(2, f);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      o.write_shift(1, 0);
	      o.write_shift(1, 0);
	      o.write_shift(2, 0);
	      o.write_shift(2, 100);
	      o.write_shift(2, 0);
	      o.write_shift(2, 0);
	      o.write_shift(2, 0);
	      o.write_shift(4, 0);
	      return o;
	    }
	    function write_BrtCellIgnoreEC(ref) {
	      var o = new_buf(24);
	      o.write_shift(4, 4);
	      o.write_shift(4, 1);
	      write_UncheckedRfX(ref, o);
	      return o;
	    }
	    function write_BrtSheetProtection(sp, o) {
	      if (o == null) o = new_buf(16 * 4 + 2);
	      o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
	      o.write_shift(4, 1);
	      [["objects", false], ["scenarios", false], ["formatCells", true], ["formatColumns", true], ["formatRows", true], ["insertColumns", true], ["insertRows", true], ["insertHyperlinks", true], ["deleteColumns", true], ["deleteRows", true], ["selectLockedCells", false], ["sort", true], ["autoFilter", true], ["pivotTables", true], ["selectUnlockedCells", false]].forEach(function (n) {
	        if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0); else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
	      });
	      return o;
	    }
	    function parse_BrtDVal() {}
	    function parse_BrtDVal14() {}
	    function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
	      if (!data) return data;
	      var opts = _opts || ({});
	      if (!rels) rels = {
	        "!id": {}
	      };
	      var s = {};
	      if (opts.dense) s["!data"] = [];
	      var ref;
	      var refguess = {
	        s: {
	          r: 2000000,
	          c: 2000000
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var pass = false, end = false;
	      var row, p, cf, R, C, addr, sstr, rr, cell;
	      var merges = [];
	      opts.biff = 12;
	      opts["!row"] = 0;
	      var ai = 0, af = false;
	      var arrayf = [];
	      var sharedf = {};
	      var supbooks = opts.supbooks || wb.supbooks || [[]];
	      supbooks.sharedf = sharedf;
	      supbooks.arrayf = arrayf;
	      supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function (x) {
	        return x.name;
	      });
	      if (!opts.supbooks) {
	        opts.supbooks = supbooks;
	        if (wb.Names) for (var i = 0; i < wb.Names.length; ++i) supbooks[0][i + 1] = wb.Names[i];
	      }
	      var colinfo = [], rowinfo = [];
	      var seencol = false;
	      XLSBRecordEnum[16] = {
	        n: "BrtShortReal",
	        f: parse_BrtShortReal
	      };
	      var cm;
	      var date1904 = 1462 * +!!((wb || ({})).WBProps || ({})).date1904;
	      recordhopper(data, function ws_parse(val, RR, RT) {
	        if (end) return;
	        switch (RT) {
	          case 148:
	            ref = val;
	            break;
	          case 0:
	            row = val;
	            if (opts.sheetRows && opts.sheetRows <= row.r) end = true;
	            rr = encode_row(R = row.r);
	            opts["!row"] = row.r;
	            if (val.hidden || val.hpt || val.level != null) {
	              if (val.hpt) val.hpx = pt2px(val.hpt);
	              rowinfo[val.r] = val;
	            }
	            break;
	          case 2:
	          case 3:
	          case 4:
	          case 5:
	          case 6:
	          case 7:
	          case 8:
	          case 9:
	          case 10:
	          case 11:
	          case 13:
	          case 14:
	          case 15:
	          case 16:
	          case 17:
	          case 18:
	          case 62:
	            p = {
	              t: val[2]
	            };
	            switch (val[2]) {
	              case "n":
	                p.v = val[1];
	                break;
	              case "s":
	                sstr = strs[val[1]];
	                p.v = sstr.t;
	                p.r = sstr.r;
	                break;
	              case "b":
	                p.v = val[1] ? true : false;
	                break;
	              case "e":
	                p.v = val[1];
	                if (opts.cellText !== false) p.w = BErr[p.v];
	                break;
	              case "str":
	                p.t = "s";
	                p.v = val[1];
	                break;
	              case "is":
	                p.t = "s";
	                p.v = val[1].t;
	                break;
	            }
	            if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles, date1904 > 0);
	            C = val[0].c == -1 ? C + 1 : val[0].c;
	            if (opts.dense) {
	              if (!s["!data"][R]) s["!data"][R] = [];
	              s["!data"][R][C] = p;
	            } else s[encode_col(C) + rr] = p;
	            if (opts.cellFormula) {
	              af = false;
	              for (ai = 0; ai < arrayf.length; ++ai) {
	                var aii = arrayf[ai];
	                if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) if (C >= aii[0].s.c && C <= aii[0].e.c) {
	                  p.F = encode_range(aii[0]);
	                  af = true;
	                }
	              }
	              if (!af && val.length > 3) p.f = val[3];
	            }
	            if (refguess.s.r > row.r) refguess.s.r = row.r;
	            if (refguess.s.c > C) refguess.s.c = C;
	            if (refguess.e.r < row.r) refguess.e.r = row.r;
	            if (refguess.e.c < C) refguess.e.c = C;
	            if (opts.cellDates && cf && p.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
	              var _d = SSF_parse_date_code(p.v + date1904);
	              if (_d) {
	                p.t = "d";
	                p.v = new Date(Date.UTC(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u));
	              }
	            }
	            if (cm) {
	              if (cm.type == "XLDAPR") p.D = true;
	              cm = void 0;
	            }
	            break;
	          case 1:
	          case 12:
	            if (!opts.sheetStubs || pass) break;
	            p = {
	              t: "z",
	              v: void 0
	            };
	            C = val[0].c == -1 ? C + 1 : val[0].c;
	            if (opts.dense) {
	              if (!s["!data"][R]) s["!data"][R] = [];
	              s["!data"][R][C] = p;
	            } else s[encode_col(C) + rr] = p;
	            if (refguess.s.r > row.r) refguess.s.r = row.r;
	            if (refguess.s.c > C) refguess.s.c = C;
	            if (refguess.e.r < row.r) refguess.e.r = row.r;
	            if (refguess.e.c < C) refguess.e.c = C;
	            if (cm) {
	              if (cm.type == "XLDAPR") p.D = true;
	              cm = void 0;
	            }
	            break;
	          case 176:
	            merges.push(val);
	            break;
	          case 49:
	            {
	              cm = ((opts.xlmeta || ({})).Cell || [])[val - 1];
	            }
	            break;
	          case 494:
	            var rel = rels["!id"][val.relId];
	            if (rel) {
	              val.Target = rel.Target;
	              if (val.loc) val.Target += "#" + val.loc;
	              val.Rel = rel;
	            } else if (val.relId == "") {
	              val.Target = "#" + val.loc;
	            }
	            for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {
	              if (opts.dense) {
	                if (!s["!data"][R]) s["!data"][R] = [];
	                if (!s["!data"][R][C]) s["!data"][R][C] = {
	                  t: "z",
	                  v: undefined
	                };
	                s["!data"][R][C].l = val;
	              } else {
	                addr = encode_col(C) + encode_row(R);
	                if (!s[addr]) s[addr] = {
	                  t: "z",
	                  v: undefined
	                };
	                s[addr].l = val;
	              }
	            }
	            break;
	          case 426:
	            if (!opts.cellFormula) break;
	            arrayf.push(val);
	            cell = opts.dense ? s["!data"][R][C] : s[encode_col(C) + rr];
	            cell.f = stringify_formula(val[1], refguess, {
	              r: row.r,
	              c: C
	            }, supbooks, opts);
	            cell.F = encode_range(val[0]);
	            break;
	          case 427:
	            if (!opts.cellFormula) break;
	            sharedf[encode_cell(val[0].s)] = val[1];
	            cell = opts.dense ? s["!data"][R][C] : s[encode_col(C) + rr];
	            cell.f = stringify_formula(val[1], refguess, {
	              r: row.r,
	              c: C
	            }, supbooks, opts);
	            break;
	          case 60:
	            if (!opts.cellStyles) break;
	            while (val.e >= val.s) {
	              colinfo[val.e--] = {
	                width: val.w / 256,
	                hidden: !!(val.flags & 1),
	                level: val.level
	              };
	              if (!seencol) {
	                seencol = true;
	                find_mdw_colw(val.w / 256);
	              }
	              process_col(colinfo[val.e + 1]);
	            }
	            break;
	          case 551:
	            if (val) s["!legrel"] = val;
	            break;
	          case 161:
	            s["!autofilter"] = {
	              ref: encode_range(val)
	            };
	            break;
	          case 476:
	            s["!margins"] = val;
	            break;
	          case 147:
	            if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
	            if (val.name) wb.Sheets[idx].CodeName = val.name;
	            if (val.above || val.left) s["!outline"] = {
	              above: val.above,
	              left: val.left
	            };
	            break;
	          case 137:
	            if (!wb.Views) wb.Views = [{}];
	            if (!wb.Views[0]) wb.Views[0] = {};
	            if (val.RTL) wb.Views[0].RTL = true;
	            break;
	          case 485:
	            break;
	          case 64:
	          case 1053:
	            break;
	          case 151:
	            break;
	          case 152:
	          case 175:
	          case 644:
	          case 625:
	          case 562:
	          case 396:
	          case 1112:
	          case 1146:
	          case 471:
	          case 1050:
	          case 649:
	          case 1105:
	          case 589:
	          case 607:
	          case 564:
	          case 1055:
	          case 168:
	          case 174:
	          case 1180:
	          case 499:
	          case 507:
	          case 550:
	          case 171:
	          case 167:
	          case 1177:
	          case 169:
	          case 1181:
	          case 552:
	          case 661:
	          case 639:
	          case 478:
	          case 537:
	          case 477:
	          case 536:
	          case 1103:
	          case 680:
	          case 1104:
	          case 1024:
	          case 663:
	          case 535:
	          case 678:
	          case 504:
	          case 1043:
	          case 428:
	          case 170:
	          case 3072:
	          case 50:
	          case 2070:
	          case 1045:
	            break;
	          case 35:
	            pass = true;
	            break;
	          case 36:
	            pass = false;
	            break;
	          case 37:
	            pass = true;
	            break;
	          case 38:
	            pass = false;
	            break;
	          default:
	            if (RR.T) ; else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      }, opts);
	      delete opts.supbooks;
	      delete opts["!row"];
	      if (!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
	      if (opts.sheetRows && s["!ref"]) {
	        var tmpref = safe_decode_range(s["!ref"]);
	        if (opts.sheetRows <= +tmpref.e.r) {
	          tmpref.e.r = opts.sheetRows - 1;
	          if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
	          if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
	          if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
	          if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
	          s["!fullref"] = s["!ref"];
	          s["!ref"] = encode_range(tmpref);
	        }
	      }
	      if (merges.length > 0) s["!merges"] = merges;
	      if (colinfo.length > 0) s["!cols"] = colinfo;
	      if (rowinfo.length > 0) s["!rows"] = rowinfo;
	      if (rels["!id"][s["!legrel"]]) s["!legdrawel"] = rels["!id"][s["!legrel"]];
	      return s;
	    }
	    function write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen, date1904) {
	      var o = {
	        r: R,
	        c: C
	      };
	      if (cell.c) ws["!comments"].push([encode_cell(o), cell.c]);
	      if (cell.v === undefined) return false;
	      var vv = "";
	      switch (cell.t) {
	        case "b":
	          vv = cell.v ? "1" : "0";
	          break;
	        case "d":
	          cell = dup(cell);
	          cell.z = cell.z || table_fmt[14];
	          cell.v = datenum(parseDate(cell.v, date1904), date1904);
	          cell.t = "n";
	          break;
	        case "n":
	        case "e":
	          vv = "" + cell.v;
	          break;
	        default:
	          vv = cell.v;
	          break;
	      }
	      o.s = get_cell_style(opts.cellXfs, cell, opts);
	      if (cell.l) ws["!links"].push([encode_cell(o), cell.l]);
	      switch (cell.t) {
	        case "s":
	        case "str":
	          if (opts.bookSST) {
	            vv = get_sst_id(opts.Strings, cell.v == null ? "" : String(cell.v), opts.revStrings);
	            o.t = "s";
	            o.v = vv;
	            if (last_seen) write_record(ba, 18, write_BrtShortIsst(cell, o)); else write_record(ba, 7, write_BrtCellIsst(cell, o));
	          } else {
	            o.t = "str";
	            if (last_seen) write_record(ba, 17, write_BrtShortSt(cell, o)); else write_record(ba, 6, write_BrtCellSt(cell, o));
	          }
	          return true;
	        case "n":
	          if (cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {
	            if (last_seen) write_record(ba, 13, write_BrtShortRk(cell, o)); else write_record(ba, 2, write_BrtCellRk(cell, o));
	          } else if (isNaN(cell.v)) {
	            if (last_seen) write_record(ba, 14, write_BrtShortError({
	              t: "e",
	              v: 36
	            }, o)); else write_record(ba, 3, write_BrtCellError({
	              t: "e",
	              v: 36
	            }, o));
	          } else if (!isFinite(cell.v)) {
	            if (last_seen) write_record(ba, 14, write_BrtShortError({
	              t: "e",
	              v: 7
	            }, o)); else write_record(ba, 3, write_BrtCellError({
	              t: "e",
	              v: 7
	            }, o));
	          } else {
	            if (last_seen) write_record(ba, 16, write_BrtShortReal(cell, o)); else write_record(ba, 5, write_BrtCellReal(cell, o));
	          }
	          return true;
	        case "b":
	          o.t = "b";
	          if (last_seen) write_record(ba, 15, write_BrtShortBool(cell, o)); else write_record(ba, 4, write_BrtCellBool(cell, o));
	          return true;
	        case "e":
	          o.t = "e";
	          if (last_seen) write_record(ba, 14, write_BrtShortError(cell, o)); else write_record(ba, 3, write_BrtCellError(cell, o));
	          return true;
	      }
	      if (last_seen) write_record(ba, 12, write_BrtShortBlank(cell, o)); else write_record(ba, 1, write_BrtCellBlank(cell, o));
	      return true;
	    }
	    function write_CELLTABLE(ba, ws, idx, opts, wb) {
	      var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = [];
	      var date1904 = (((wb || ({})).Workbook || ({})).WBProps || ({})).date1904;
	      write_record(ba, 145);
	      var dense = ws["!data"] != null;
	      var cap = range.e.r;
	      if (ws["!rows"]) cap = Math.max(range.e.r, ws["!rows"].length - 1);
	      for (var R = range.s.r; R <= cap; ++R) {
	        rr = encode_row(R);
	        write_row_header(ba, ws, range, R);
	        var last_seen = false;
	        if (R <= range.e.r) for (var C = range.s.c; C <= range.e.c; ++C) {
	          if (R === range.s.r) cols[C] = encode_col(C);
	          ref = cols[C] + rr;
	          var cell = dense ? (ws["!data"][R] || [])[C] : ws[ref];
	          if (!cell) {
	            last_seen = false;
	            continue;
	          }
	          last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen, date1904);
	        }
	      }
	      write_record(ba, 146);
	    }
	    function write_MERGECELLS(ba, ws) {
	      if (!ws || !ws["!merges"]) return;
	      write_record(ba, 177, write_BrtBeginMergeCells(ws["!merges"].length));
	      ws["!merges"].forEach(function (m) {
	        write_record(ba, 176, write_BrtMergeCell(m));
	      });
	      write_record(ba, 178);
	    }
	    function write_COLINFOS(ba, ws) {
	      if (!ws || !ws["!cols"]) return;
	      write_record(ba, 390);
	      ws["!cols"].forEach(function (m, i) {
	        if (m) write_record(ba, 60, write_BrtColInfo(i, m));
	      });
	      write_record(ba, 391);
	    }
	    function write_IGNOREECS(ba, ws) {
	      if (!ws || !ws["!ref"]) return;
	      write_record(ba, 648);
	      write_record(ba, 649, write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
	      write_record(ba, 650);
	    }
	    function write_HLINKS(ba, ws, rels) {
	      ws["!links"].forEach(function (l) {
	        if (!l[1].Target) return;
	        var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
	        write_record(ba, 494, write_BrtHLink(l, rId));
	      });
	      delete ws["!links"];
	    }
	    function write_LEGACYDRAWING(ba, ws, idx, rels) {
	      if (ws["!comments"].length > 0) {
	        var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
	        write_record(ba, 551, write_RelID("rId" + rId));
	        ws["!legacy"] = rId;
	      }
	    }
	    function write_AUTOFILTER(ba, ws, wb, idx) {
	      if (!ws["!autofilter"]) return;
	      var data = ws["!autofilter"];
	      var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
	      if (!wb.Workbook) wb.Workbook = {
	        Sheets: []
	      };
	      if (!wb.Workbook.Names) wb.Workbook.Names = [];
	      var names = wb.Workbook.Names;
	      var range = decode_range(ref);
	      if (range.s.r == range.e.r) {
	        range.e.r = decode_range(ws["!ref"]).e.r;
	        ref = encode_range(range);
	      }
	      for (var i = 0; i < names.length; ++i) {
	        var name = names[i];
	        if (name.Name != "_xlnm._FilterDatabase") continue;
	        if (name.Sheet != idx) continue;
	        name.Ref = formula_quote_sheet_name(wb.SheetNames[idx]) + "!" + fix_range(ref);
	        break;
	      }
	      if (i == names.length) names.push({
	        Name: "_xlnm._FilterDatabase",
	        Sheet: idx,
	        Ref: formula_quote_sheet_name(wb.SheetNames[idx]) + "!" + fix_range(ref)
	      });
	      write_record(ba, 161, write_UncheckedRfX(safe_decode_range(ref)));
	      write_record(ba, 162);
	    }
	    function write_WSVIEWS2(ba, ws, Workbook) {
	      write_record(ba, 133);
	      {
	        write_record(ba, 137, write_BrtBeginWsView(ws, Workbook));
	        write_record(ba, 138);
	      }
	      write_record(ba, 134);
	    }
	    function write_SHEETPROTECT(ba, ws) {
	      if (!ws["!protect"]) return;
	      write_record(ba, 535, write_BrtSheetProtection(ws["!protect"]));
	    }
	    function write_ws_bin(idx, opts, wb, rels) {
	      var ba = buf_array();
	      var s = wb.SheetNames[idx], ws = wb.Sheets[s] || ({});
	      var c = s;
	      try {
	        if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;
	      } catch (e) {}
	      var r = safe_decode_range(ws["!ref"] || "A1");
	      if (r.e.c > 16383 || r.e.r > 1048575) {
	        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
	        r.e.c = Math.min(r.e.c, 16383);
	        r.e.r = Math.min(r.e.c, 1048575);
	      }
	      ws["!links"] = [];
	      ws["!comments"] = [];
	      write_record(ba, 129);
	      if (wb.vbaraw || ws["!outline"]) write_record(ba, 147, write_BrtWsProp(c, ws["!outline"]));
	      write_record(ba, 148, write_BrtWsDim(r));
	      write_WSVIEWS2(ba, ws, wb.Workbook);
	      write_COLINFOS(ba, ws);
	      write_CELLTABLE(ba, ws, idx, opts, wb);
	      write_SHEETPROTECT(ba, ws);
	      write_AUTOFILTER(ba, ws, wb, idx);
	      write_MERGECELLS(ba, ws);
	      write_HLINKS(ba, ws, rels);
	      if (ws["!margins"]) write_record(ba, 476, write_BrtMargins(ws["!margins"]));
	      if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);
	      write_LEGACYDRAWING(ba, ws, idx, rels);
	      write_record(ba, 130);
	      return ba.end();
	    }
	    function parse_Cache(data) {
	      var col = [];
	      var num = data.match(/^<c:numCache>/);
	      var f;
	      (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function (pt) {
	        var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
	        if (!q) return;
	        col[+q[1]] = num ? +q[2] : q[2];
	      });
	      var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
	      (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function (F) {
	        f = F.replace(/<.*?>/g, "");
	      });
	      return [col, nf, f];
	    }
	    function parse_chart(data, name, opts, rels, wb, csheet) {
	      var cs = csheet || ({
	        "!type": "chart"
	      });
	      if (!data) return csheet;
	      var C = 0, R = 0, col = "A";
	      var refguess = {
	        s: {
	          r: 2000000,
	          c: 2000000
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function (nc) {
	        var cache = parse_Cache(nc);
	        refguess.s.r = refguess.s.c = 0;
	        refguess.e.c = C;
	        col = encode_col(C);
	        cache[0].forEach(function (n, i) {
	          if (cs["!data"]) {
	            if (!cs["!data"][i]) cs["!data"][i] = [];
	            cs["!data"][i][C] = {
	              t: "n",
	              v: n,
	              z: cache[1]
	            };
	          } else cs[col + encode_row(i)] = {
	            t: "n",
	            v: n,
	            z: cache[1]
	          };
	          R = i;
	        });
	        if (refguess.e.r < R) refguess.e.r = R;
	        ++C;
	      });
	      if (C > 0) cs["!ref"] = encode_range(refguess);
	      return cs;
	    }
	    function parse_cs_xml(data, opts, idx, rels, wb) {
	      if (!data) return data;
	      if (!rels) rels = {
	        "!id": {}
	      };
	      var s = {
	        "!type": "chart",
	        "!drawel": null,
	        "!rel": ""
	      };
	      var m;
	      var sheetPr = data.match(sheetprregex);
	      if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
	      if (m = data.match(/drawing r:id="(.*?)"/)) s["!rel"] = m[1];
	      if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
	      return s;
	    }
	    function parse_BrtCsProp(data, length) {
	      data.l += 10;
	      var name = parse_XLWideString(data);
	      return {
	        name: name
	      };
	    }
	    function parse_cs_bin(data, opts, idx, rels, wb) {
	      if (!data) return data;
	      if (!rels) rels = {
	        "!id": {}
	      };
	      var s = {
	        "!type": "chart",
	        "!drawel": null,
	        "!rel": ""
	      };
	      var pass = false;
	      recordhopper(data, function cs_parse(val, R, RT) {
	        switch (RT) {
	          case 550:
	            s["!rel"] = val;
	            break;
	          case 651:
	            if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
	            if (val.name) wb.Sheets[idx].CodeName = val.name;
	            break;
	          case 562:
	          case 652:
	          case 669:
	          case 679:
	          case 551:
	          case 552:
	          case 476:
	          case 3072:
	            break;
	          case 35:
	            pass = true;
	            break;
	          case 36:
	            pass = false;
	            break;
	          case 37:
	            break;
	          case 38:
	            break;
	          default:
	            if (R.T > 0) ; else if (R.T < 0) ; else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      }, opts);
	      if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
	      return s;
	    }
	    var WBPropsDef = [["allowRefreshQuery", false, "bool"], ["autoCompressPictures", true, "bool"], ["backupFile", false, "bool"], ["checkCompatibility", false, "bool"], ["CodeName", ""], ["date1904", false, "bool"], ["defaultThemeVersion", 0, "int"], ["filterPrivacy", false, "bool"], ["hidePivotFieldList", false, "bool"], ["promptedSolutions", false, "bool"], ["publishItems", false, "bool"], ["refreshAllConnections", false, "bool"], ["saveExternalLinkValues", true, "bool"], ["showBorderUnselectedTables", true, "bool"], ["showInkAnnotation", true, "bool"], ["showObjects", "all"], ["showPivotChartFilter", false, "bool"], ["updateLinks", "userSet"]];
	    var WBViewDef = [["activeTab", 0, "int"], ["autoFilterDateGrouping", true, "bool"], ["firstSheet", 0, "int"], ["minimized", false, "bool"], ["showHorizontalScroll", true, "bool"], ["showSheetTabs", true, "bool"], ["showVerticalScroll", true, "bool"], ["tabRatio", 600, "int"], ["visibility", "visible"]];
	    var SheetDef = [];
	    var CalcPrDef = [["calcCompleted", "true"], ["calcMode", "auto"], ["calcOnSave", "true"], ["concurrentCalc", "true"], ["fullCalcOnLoad", "false"], ["fullPrecision", "true"], ["iterate", "false"], ["iterateCount", "100"], ["iterateDelta", "0.001"], ["refMode", "A1"]];
	    function push_defaults_array(target, defaults) {
	      for (var j = 0; j != target.length; ++j) {
	        var w = target[j];
	        for (var i = 0; i != defaults.length; ++i) {
	          var z = defaults[i];
	          if (w[z[0]] == null) w[z[0]] = z[1]; else switch (z[2]) {
	            case "bool":
	              if (typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]);
	              break;
	            case "int":
	              if (typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10);
	              break;
	          }
	        }
	      }
	    }
	    function push_defaults(target, defaults) {
	      for (var i = 0; i != defaults.length; ++i) {
	        var z = defaults[i];
	        if (target[z[0]] == null) target[z[0]] = z[1]; else switch (z[2]) {
	          case "bool":
	            if (typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]);
	            break;
	          case "int":
	            if (typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10);
	            break;
	        }
	      }
	    }
	    function parse_wb_defaults(wb) {
	      push_defaults(wb.WBProps, WBPropsDef);
	      push_defaults(wb.CalcPr, CalcPrDef);
	      push_defaults_array(wb.WBView, WBViewDef);
	      push_defaults_array(wb.Sheets, SheetDef);
	      _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
	    }
	    function safe1904(wb) {
	      if (!wb.Workbook) return "false";
	      if (!wb.Workbook.WBProps) return "false";
	      return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
	    }
	    var badchars = (":][*?/\\").split("");
	    function check_ws_name(n, safe) {
	      try {
	        if (n == "") throw new Error("Sheet name cannot be blank");
	        if (n.length > 31) throw new Error("Sheet name cannot exceed 31 chars");
	        if (n.charCodeAt(0) == 39 || n.charCodeAt(n.length - 1) == 39) throw new Error("Sheet name cannot start or end with apostrophe (')");
	        if (n.toLowerCase() == "history") throw new Error("Sheet name cannot be 'History'");
	        badchars.forEach(function (c) {
	          if (n.indexOf(c) == -1) return;
	          throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
	        });
	      } catch (e) {
	        if (safe) return false;
	        throw e;
	      }
	      return true;
	    }
	    function check_wb_names(N, S, codes) {
	      N.forEach(function (n, i) {
	        check_ws_name(n);
	        for (var j = 0; j < i; ++j) if (n == N[j]) throw new Error("Duplicate Sheet Name: " + n);
	        if (codes) {
	          var cn = S && S[i] && S[i].CodeName || n;
	          if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error("Bad Code Name: Worksheet" + cn);
	        }
	      });
	    }
	    function check_wb(wb) {
	      if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
	      if (!wb.SheetNames.length) throw new Error("Workbook is empty");
	      var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
	      check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
	      for (var i = 0; i < wb.SheetNames.length; ++i) check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);
	      wb.SheetNames.forEach(function (n, i) {
	        var ws = wb.Sheets[n];
	        if (!ws || !ws["!autofilter"]) return;
	        var DN;
	        if (!wb.Workbook) wb.Workbook = {};
	        if (!wb.Workbook.Names) wb.Workbook.Names = [];
	        wb.Workbook.Names.forEach(function (dn) {
	          if (dn.Name == "_xlnm._FilterDatabase" && dn.Sheet == i) DN = dn;
	        });
	        var nn = formula_quote_sheet_name(n) + "!" + fix_range(ws["!autofilter"].ref);
	        if (DN) DN.Ref = nn; else wb.Workbook.Names.push({
	          Name: "_xlnm._FilterDatabase",
	          Sheet: i,
	          Ref: nn
	        });
	      });
	    }
	    var wbnsregex = /<\w+:workbook/;
	    function parse_wb_xml(data, opts) {
	      if (!data) throw new Error("Could not find file");
	      var wb = {
	        AppVersion: {},
	        WBProps: {},
	        WBView: [],
	        Sheets: [],
	        CalcPr: {},
	        Names: [],
	        xmlns: ""
	      };
	      var pass = false, xmlns = "xmlns";
	      var dname = {}, dnstart = 0;
	      data.replace(tagregex, function xml_wb(x, idx) {
	        var y = parsexmltag(x);
	        switch (strip_ns(y[0])) {
	          case "<?xml":
	            break;
	          case "<workbook":
	            if (x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
	            wb.xmlns = y[xmlns];
	            break;
	          case "</workbook>":
	            break;
	          case "<fileVersion":
	            delete y[0];
	            wb.AppVersion = y;
	            break;
	          case "<fileVersion/>":
	          case "</fileVersion>":
	            break;
	          case "<fileSharing":
	            break;
	          case "<fileSharing/>":
	            break;
	          case "<workbookPr":
	          case "<workbookPr/>":
	            WBPropsDef.forEach(function (w) {
	              if (y[w[0]] == null) return;
	              switch (w[2]) {
	                case "bool":
	                  wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
	                  break;
	                case "int":
	                  wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
	                  break;
	                default:
	                  wb.WBProps[w[0]] = y[w[0]];
	              }
	            });
	            if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
	            break;
	          case "</workbookPr>":
	            break;
	          case "<workbookProtection":
	            break;
	          case "<workbookProtection/>":
	            break;
	          case "<bookViews":
	          case "<bookViews>":
	          case "</bookViews>":
	            break;
	          case "<workbookView":
	          case "<workbookView/>":
	            delete y[0];
	            wb.WBView.push(y);
	            break;
	          case "</workbookView>":
	            break;
	          case "<sheets":
	          case "<sheets>":
	          case "</sheets>":
	            break;
	          case "<sheet":
	            switch (y.state) {
	              case "hidden":
	                y.Hidden = 1;
	                break;
	              case "veryHidden":
	                y.Hidden = 2;
	                break;
	              default:
	                y.Hidden = 0;
	            }
	            delete y.state;
	            y.name = unescapexml(utf8read(y.name));
	            delete y[0];
	            wb.Sheets.push(y);
	            break;
	          case "</sheet>":
	            break;
	          case "<functionGroups":
	          case "<functionGroups/>":
	            break;
	          case "<functionGroup":
	            break;
	          case "<externalReferences":
	          case "</externalReferences>":
	          case "<externalReferences>":
	            break;
	          case "<externalReference":
	            break;
	          case "<definedNames/>":
	            break;
	          case "<definedNames>":
	          case "<definedNames":
	            pass = true;
	            break;
	          case "</definedNames>":
	            pass = false;
	            break;
	          case "<definedName":
	            {
	              dname = {};
	              dname.Name = utf8read(y.name);
	              if (y.comment) dname.Comment = y.comment;
	              if (y.localSheetId) dname.Sheet = +y.localSheetId;
	              if (parsexmlbool(y.hidden || "0")) dname.Hidden = true;
	              dnstart = idx + x.length;
	            }
	            break;
	          case "</definedName>":
	            {
	              dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
	              wb.Names.push(dname);
	            }
	            break;
	          case "<definedName/>":
	            break;
	          case "<calcPr":
	            delete y[0];
	            wb.CalcPr = y;
	            break;
	          case "<calcPr/>":
	            delete y[0];
	            wb.CalcPr = y;
	            break;
	          case "</calcPr>":
	            break;
	          case "<oleSize":
	            break;
	          case "<customWorkbookViews>":
	          case "</customWorkbookViews>":
	          case "<customWorkbookViews":
	            break;
	          case "<customWorkbookView":
	          case "</customWorkbookView>":
	            break;
	          case "<pivotCaches>":
	          case "</pivotCaches>":
	          case "<pivotCaches":
	            break;
	          case "<pivotCache":
	            break;
	          case "<smartTagPr":
	          case "<smartTagPr/>":
	            break;
	          case "<smartTagTypes":
	          case "<smartTagTypes>":
	          case "</smartTagTypes>":
	            break;
	          case "<smartTagType":
	            break;
	          case "<webPublishing":
	          case "<webPublishing/>":
	            break;
	          case "<fileRecoveryPr":
	          case "<fileRecoveryPr/>":
	            break;
	          case "<webPublishObjects>":
	          case "<webPublishObjects":
	          case "</webPublishObjects>":
	            break;
	          case "<webPublishObject":
	            break;
	          case "<extLst":
	          case "<extLst>":
	          case "</extLst>":
	          case "<extLst/>":
	            break;
	          case "<ext":
	            pass = true;
	            break;
	          case "</ext>":
	            pass = false;
	            break;
	          case "<ArchID":
	            break;
	          case "<AlternateContent":
	          case "<AlternateContent>":
	            pass = true;
	            break;
	          case "</AlternateContent>":
	            pass = false;
	            break;
	          case "<revisionPtr":
	            break;
	          default:
	            if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in workbook");
	        }
	        return x;
	      });
	      if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
	      parse_wb_defaults(wb);
	      return wb;
	    }
	    function write_wb_xml(wb) {
	      var o = [XML_HEADER];
	      o[o.length] = writextag("workbook", null, {
	        "xmlns": XMLNS_main[0],
	        "xmlns:r": XMLNS.r
	      });
	      var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
	      var workbookPr = {
	        codeName: "ThisWorkbook"
	      };
	      if (wb.Workbook && wb.Workbook.WBProps) {
	        WBPropsDef.forEach(function (x) {
	          if (wb.Workbook.WBProps[x[0]] == null) return;
	          if (wb.Workbook.WBProps[x[0]] == x[1]) return;
	          workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];
	        });
	        if (wb.Workbook.WBProps.CodeName) {
	          workbookPr.codeName = wb.Workbook.WBProps.CodeName;
	          delete workbookPr.CodeName;
	        }
	      }
	      o[o.length] = writextag("workbookPr", null, workbookPr);
	      var sheets = wb.Workbook && wb.Workbook.Sheets || [];
	      var i = 0;
	      if (sheets && sheets[0] && !!sheets[0].Hidden) {
	        o[o.length] = "<bookViews>";
	        for (i = 0; i != wb.SheetNames.length; ++i) {
	          if (!sheets[i]) break;
	          if (!sheets[i].Hidden) break;
	        }
	        if (i == wb.SheetNames.length) i = 0;
	        o[o.length] = "<workbookView firstSheet=\"" + i + "\" activeTab=\"" + i + "\"/>";
	        o[o.length] = "</bookViews>";
	      }
	      o[o.length] = "<sheets>";
	      for (i = 0; i != wb.SheetNames.length; ++i) {
	        var sht = {
	          name: escapexml(wb.SheetNames[i].slice(0, 31))
	        };
	        sht.sheetId = "" + (i + 1);
	        sht["r:id"] = "rId" + (i + 1);
	        if (sheets[i]) switch (sheets[i].Hidden) {
	          case 1:
	            sht.state = "hidden";
	            break;
	          case 2:
	            sht.state = "veryHidden";
	            break;
	        }
	        o[o.length] = writextag("sheet", null, sht);
	      }
	      o[o.length] = "</sheets>";
	      if (write_names) {
	        o[o.length] = "<definedNames>";
	        if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function (n) {
	          var d = {
	            name: n.Name
	          };
	          if (n.Comment) d.comment = n.Comment;
	          if (n.Sheet != null) d.localSheetId = "" + n.Sheet;
	          if (n.Hidden) d.hidden = "1";
	          if (!n.Ref) return;
	          o[o.length] = writextag("definedName", escapexml(n.Ref), d);
	        });
	        o[o.length] = "</definedNames>";
	      }
	      if (o.length > 2) {
	        o[o.length] = "</workbook>";
	        o[1] = o[1].replace("/>", ">");
	      }
	      return o.join("");
	    }
	    function parse_BrtBundleSh(data, length) {
	      var z = {};
	      z.Hidden = data.read_shift(4);
	      z.iTabID = data.read_shift(4);
	      z.strRelID = parse_RelID(data);
	      z.name = parse_XLWideString(data);
	      return z;
	    }
	    function write_BrtBundleSh(data, o) {
	      if (!o) o = new_buf(127);
	      o.write_shift(4, data.Hidden);
	      o.write_shift(4, data.iTabID);
	      write_RelID(data.strRelID, o);
	      write_XLWideString(data.name.slice(0, 31), o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function parse_BrtWbProp(data, length) {
	      var o = {};
	      var flags = data.read_shift(4);
	      o.defaultThemeVersion = data.read_shift(4);
	      var strName = length > 8 ? parse_XLWideString(data) : "";
	      if (strName.length > 0) o.CodeName = strName;
	      o.autoCompressPictures = !!(flags & 65536);
	      o.backupFile = !!(flags & 64);
	      o.checkCompatibility = !!(flags & 4096);
	      o.date1904 = !!(flags & 1);
	      o.filterPrivacy = !!(flags & 8);
	      o.hidePivotFieldList = !!(flags & 1024);
	      o.promptedSolutions = !!(flags & 16);
	      o.publishItems = !!(flags & 2048);
	      o.refreshAllConnections = !!(flags & 262144);
	      o.saveExternalLinkValues = !!(flags & 128);
	      o.showBorderUnselectedTables = !!(flags & 4);
	      o.showInkAnnotation = !!(flags & 32);
	      o.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
	      o.showPivotChartFilter = !!(flags & 32768);
	      o.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
	      return o;
	    }
	    function write_BrtWbProp(data, o) {
	      if (!o) o = new_buf(72);
	      var flags = 0;
	      if (data) {
	        if (data.date1904) flags |= 1;
	        if (data.filterPrivacy) flags |= 8;
	      }
	      o.write_shift(4, flags);
	      o.write_shift(4, 0);
	      write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
	      return o.slice(0, o.l);
	    }
	    function parse_BrtFRTArchID$(data, length) {
	      var o = {};
	      data.read_shift(4);
	      o.ArchID = data.read_shift(4);
	      data.l += length - 8;
	      return o;
	    }
	    function parse_BrtName(data, length, opts) {
	      var end = data.l + length;
	      var flags = data.read_shift(4);
	      data.l += 1;
	      var itab = data.read_shift(4);
	      var name = parse_XLNameWideString(data);
	      var formula = parse_XLSBNameParsedFormula(data, 0, opts);
	      var comment = parse_XLNullableWideString(data);
	      if (flags & 32) name = "_xlnm." + name;
	      data.l = end;
	      var out = {
	        Name: name,
	        Ptg: formula,
	        Flags: flags
	      };
	      if (itab < 268435455) out.Sheet = itab;
	      if (comment) out.Comment = comment;
	      return out;
	    }
	    function write_BrtName(name, wb) {
	      var o = new_buf(9);
	      var flags = 0;
	      var dname = name.Name;
	      if (XLSLblBuiltIn.indexOf(dname) > -1) {
	        flags |= 32;
	        dname = dname.slice(6);
	      }
	      o.write_shift(4, flags);
	      o.write_shift(1, 0);
	      o.write_shift(4, name.Sheet == null ? 4294967295 : name.Sheet);
	      var arr = [o, write_XLWideString(dname), write_XLSBNameParsedFormula(name.Ref, wb)];
	      if (name.Comment) arr.push(write_XLNullableWideString(name.Comment)); else {
	        var x = new_buf(4);
	        x.write_shift(4, 4294967295);
	        arr.push(x);
	      }
	      return bconcat(arr);
	    }
	    function parse_wb_bin(data, opts) {
	      var wb = {
	        AppVersion: {},
	        WBProps: {},
	        WBView: [],
	        Sheets: [],
	        CalcPr: {},
	        xmlns: ""
	      };
	      var state = [];
	      var pass = false;
	      if (!opts) opts = {};
	      opts.biff = 12;
	      var Names = [];
	      var supbooks = [[]];
	      supbooks.SheetNames = [];
	      supbooks.XTI = [];
	      XLSBRecordEnum[16] = {
	        n: "BrtFRTArchID$",
	        f: parse_BrtFRTArchID$
	      };
	      recordhopper(data, function hopper_wb(val, R, RT) {
	        switch (RT) {
	          case 156:
	            supbooks.SheetNames.push(val.name);
	            wb.Sheets.push(val);
	            break;
	          case 153:
	            wb.WBProps = val;
	            break;
	          case 39:
	            if (val.Sheet != null) opts.SID = val.Sheet;
	            val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
	            delete opts.SID;
	            delete val.Ptg;
	            Names.push(val);
	            break;
	          case 1036:
	            break;
	          case 357:
	          case 358:
	          case 355:
	          case 667:
	            if (!supbooks[0].length) supbooks[0] = [RT, val]; else supbooks.push([RT, val]);
	            supbooks[supbooks.length - 1].XTI = [];
	            break;
	          case 362:
	            if (supbooks.length === 0) {
	              supbooks[0] = [];
	              supbooks[0].XTI = [];
	            }
	            supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
	            supbooks.XTI = supbooks.XTI.concat(val);
	            break;
	          case 361:
	            break;
	          case 2071:
	          case 158:
	          case 143:
	          case 664:
	          case 353:
	            break;
	          case 3072:
	          case 3073:
	          case 534:
	          case 677:
	          case 157:
	          case 610:
	          case 2050:
	          case 155:
	          case 548:
	          case 676:
	          case 128:
	          case 665:
	          case 2128:
	          case 2125:
	          case 549:
	          case 2053:
	          case 596:
	          case 2076:
	          case 2075:
	          case 2082:
	          case 397:
	          case 154:
	          case 1117:
	          case 553:
	          case 2091:
	            break;
	          case 35:
	            state.push(RT);
	            pass = true;
	            break;
	          case 36:
	            state.pop();
	            pass = false;
	            break;
	          case 37:
	            state.push(RT);
	            pass = true;
	            break;
	          case 38:
	            state.pop();
	            pass = false;
	            break;
	          case 16:
	            break;
	          default:
	            if (R.T) ; else if (!pass || opts.WTF && state[state.length - 1] != 37 && state[state.length - 1] != 35) throw new Error("Unexpected record 0x" + RT.toString(16));
	        }
	      }, opts);
	      parse_wb_defaults(wb);
	      wb.Names = Names;
	      wb.supbooks = supbooks;
	      return wb;
	    }
	    function write_BUNDLESHS(ba, wb) {
	      write_record(ba, 143);
	      for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
	        var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
	        var d = {
	          Hidden: viz,
	          iTabID: idx + 1,
	          strRelID: "rId" + (idx + 1),
	          name: wb.SheetNames[idx]
	        };
	        write_record(ba, 156, write_BrtBundleSh(d));
	      }
	      write_record(ba, 144);
	    }
	    function write_BrtFileVersion(data, o) {
	      if (!o) o = new_buf(127);
	      for (var i = 0; i != 4; ++i) o.write_shift(4, 0);
	      write_XLWideString("SheetJS", o);
	      write_XLWideString(XLSX.version, o);
	      write_XLWideString(XLSX.version, o);
	      write_XLWideString("7262", o);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function write_BrtBookView(idx, o) {
	      if (!o) o = new_buf(29);
	      o.write_shift(-4, 0);
	      o.write_shift(-4, 460);
	      o.write_shift(4, 28800);
	      o.write_shift(4, 17600);
	      o.write_shift(4, 500);
	      o.write_shift(4, idx);
	      o.write_shift(4, idx);
	      var flags = 120;
	      o.write_shift(1, flags);
	      return o.length > o.l ? o.slice(0, o.l) : o;
	    }
	    function write_BOOKVIEWS(ba, wb) {
	      if (!wb.Workbook || !wb.Workbook.Sheets) return;
	      var sheets = wb.Workbook.Sheets;
	      var i = 0, vistab = -1, hidden = -1;
	      for (; i < sheets.length; ++i) {
	        if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i; else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i;
	      }
	      if (hidden > vistab) return;
	      write_record(ba, 135);
	      write_record(ba, 158, write_BrtBookView(vistab));
	      write_record(ba, 136);
	    }
	    function write_BRTNAMES(ba, wb) {
	      if (!wb.Workbook || !wb.Workbook.Names) return;
	      wb.Workbook.Names.forEach(function (name) {
	        try {
	          if (name.Flags & 14) return;
	          write_record(ba, 39, write_BrtName(name, wb));
	        } catch (e) {
	          console.error("Could not serialize defined name " + JSON.stringify(name));
	        }
	      });
	    }
	    function write_SELF_EXTERNS_xlsb(wb) {
	      var L = wb.SheetNames.length;
	      var o = new_buf(12 * L + 28);
	      o.write_shift(4, L + 2);
	      o.write_shift(4, 0);
	      o.write_shift(4, -2);
	      o.write_shift(4, -2);
	      o.write_shift(4, 0);
	      o.write_shift(4, -1);
	      o.write_shift(4, -1);
	      for (var i = 0; i < L; ++i) {
	        o.write_shift(4, 0);
	        o.write_shift(4, i);
	        o.write_shift(4, i);
	      }
	      return o;
	    }
	    function write_EXTERNALS_xlsb(ba, wb) {
	      write_record(ba, 353);
	      write_record(ba, 357);
	      write_record(ba, 362, write_SELF_EXTERNS_xlsb(wb));
	      write_record(ba, 354);
	    }
	    function write_wb_bin(wb, opts) {
	      var ba = buf_array();
	      write_record(ba, 131);
	      write_record(ba, 128, write_BrtFileVersion());
	      write_record(ba, 153, write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
	      write_BOOKVIEWS(ba, wb);
	      write_BUNDLESHS(ba, wb);
	      write_EXTERNALS_xlsb(ba, wb);
	      if ((wb.Workbook || ({})).Names) write_BRTNAMES(ba, wb);
	      write_record(ba, 132);
	      return ba.end();
	    }
	    function parse_wb(data, name, opts) {
	      if (name.slice(-4) === ".bin") return parse_wb_bin(data, opts);
	      return parse_wb_xml(data, opts);
	    }
	    function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
	      if (name.slice(-4) === ".bin") return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
	      return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
	    }
	    function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
	      if (name.slice(-4) === ".bin") return parse_cs_bin(data, opts, idx, rels, wb);
	      return parse_cs_xml(data, opts, idx, rels, wb);
	    }
	    function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
	      if (name.slice(-4) === ".bin") return parse_ms_bin();
	      return parse_ms_xml();
	    }
	    function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
	      if (name.slice(-4) === ".bin") return parse_ds_bin();
	      return parse_ds_xml();
	    }
	    function parse_sty(data, name, themes, opts) {
	      if (name.slice(-4) === ".bin") return parse_sty_bin(data, themes, opts);
	      return parse_sty_xml(data, themes, opts);
	    }
	    function parse_sst(data, name, opts) {
	      if (name.slice(-4) === ".bin") return parse_sst_bin(data, opts);
	      return parse_sst_xml(data, opts);
	    }
	    function parse_cmnt(data, name, opts) {
	      if (name.slice(-4) === ".bin") return parse_comments_bin(data, opts);
	      return parse_comments_xml(data, opts);
	    }
	    function parse_cc(data, name, opts) {
	      if (name.slice(-4) === ".bin") return parse_cc_bin(data);
	      return parse_cc_xml(data);
	    }
	    function parse_xlink(data, rel, name, opts) {
	      if (name.slice(-4) === ".bin") return parse_xlink_bin(data, rel, name, opts);
	      return parse_xlink_xml();
	    }
	    function parse_xlmeta(data, name, opts) {
	      if (name.slice(-4) === ".bin") return parse_xlmeta_bin(data, name, opts);
	      return parse_xlmeta_xml(data, name, opts);
	    }
	    var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
	    var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
	    function xlml_parsexmltag(tag, skip_root) {
	      var words = tag.split(/\s+/);
	      var z = [];
	      if (!skip_root) z[0] = words[0];
	      if (words.length === 1) return z;
	      var m = tag.match(attregexg2), y, j, w, i;
	      if (m) for (i = 0; i != m.length; ++i) {
	        y = m[i].match(attregex2);
	        if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1); else {
	          if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6); else w = y[1].slice(j + 1);
	          z[w] = y[2].slice(1, y[2].length - 1);
	        }
	      }
	      return z;
	    }
	    function xlml_parsexmltagobj(tag) {
	      var words = tag.split(/\s+/);
	      var z = {};
	      if (words.length === 1) return z;
	      var m = tag.match(attregexg2), y, j, w, i;
	      if (m) for (i = 0; i != m.length; ++i) {
	        y = m[i].match(attregex2);
	        if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1); else {
	          if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6); else w = y[1].slice(j + 1);
	          z[w] = y[2].slice(1, y[2].length - 1);
	        }
	      }
	      return z;
	    }
	    var XLMLFormatMap;
	    function xlml_format(format, value, date1904) {
	      var fmt = XLMLFormatMap[format] || unescapexml(format);
	      if (fmt === "General") return SSF_general(value);
	      return SSF_format(fmt, value, {
	        date1904: !!date1904
	      });
	    }
	    function xlml_set_custprop(Custprops, key, cp, val) {
	      var oval = val;
	      switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
	        case "boolean":
	          oval = parsexmlbool(val);
	          break;
	        case "i2":
	        case "int":
	          oval = parseInt(val, 10);
	          break;
	        case "r4":
	        case "float":
	          oval = parseFloat(val);
	          break;
	        case "date":
	        case "dateTime.tz":
	          oval = parseDate(val);
	          break;
	        case "i8":
	        case "string":
	        case "fixed":
	        case "uuid":
	        case "bin.base64":
	          break;
	        default:
	          throw new Error("bad custprop:" + cp[0]);
	      }
	      Custprops[unescapexml(key)] = oval;
	    }
	    function safe_format_xlml(cell, nf, o, date1904) {
	      if (cell.t === "z") return;
	      if (!o || o.cellText !== false) try {
	        if (cell.t === "e") {
	          cell.w = cell.w || BErr[cell.v];
	        } else if (nf === "General") {
	          if (cell.t === "n") {
	            if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10); else cell.w = SSF_general_num(cell.v);
	          } else cell.w = SSF_general(cell.v);
	        } else cell.w = xlml_format(nf || "General", cell.v, date1904);
	      } catch (e) {
	        if (o.WTF) throw e;
	      }
	      try {
	        var z = XLMLFormatMap[nf] || nf || "General";
	        if (o.cellNF) cell.z = z;
	        if (o.cellDates && cell.t == "n" && fmt_is_date(z)) {
	          var _d = SSF_parse_date_code(cell.v + (date1904 ? 1462 : 0));
	          if (_d) {
	            cell.t = "d";
	            cell.v = new Date(Date.UTC(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u));
	          }
	        }
	      } catch (e) {
	        if (o.WTF) throw e;
	      }
	    }
	    function process_style_xlml(styles, stag, opts) {
	      if (opts.cellStyles) {
	        if (stag.Interior) {
	          var I = stag.Interior;
	          if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
	        }
	      }
	      styles[stag.ID] = stag;
	    }
	    function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o, date1904) {
	      var nf = "General", sid = cell.StyleID, S = {};
	      o = o || ({});
	      var interiors = [];
	      var i = 0;
	      if (sid === undefined && row) sid = row.StyleID;
	      if (sid === undefined && csty) sid = csty.StyleID;
	      while (styles[sid] !== undefined) {
	        if (styles[sid].nf) nf = styles[sid].nf;
	        if (styles[sid].Interior) interiors.push(styles[sid].Interior);
	        if (!styles[sid].Parent) break;
	        sid = styles[sid].Parent;
	      }
	      switch (data.Type) {
	        case "Boolean":
	          cell.t = "b";
	          cell.v = parsexmlbool(xml);
	          break;
	        case "String":
	          cell.t = "s";
	          cell.r = xlml_fixstr(unescapexml(xml));
	          cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r;
	          break;
	        case "DateTime":
	          if (xml.slice(-1) != "Z") xml += "Z";
	          cell.v = datenum(parseDate(xml, date1904), date1904);
	          if (cell.v !== cell.v) cell.v = unescapexml(xml);
	          if (!nf || nf == "General") nf = "yyyy-mm-dd";
	        case "Number":
	          if (cell.v === undefined) cell.v = +xml;
	          if (!cell.t) cell.t = "n";
	          break;
	        case "Error":
	          cell.t = "e";
	          cell.v = RBErr[xml];
	          if (o.cellText !== false) cell.w = xml;
	          break;
	        default:
	          if (xml == "" && ss == "") {
	            cell.t = "z";
	          } else {
	            cell.t = "s";
	            cell.v = xlml_fixstr(ss || xml);
	          }
	          break;
	      }
	      safe_format_xlml(cell, nf, o, date1904);
	      if (o.cellFormula !== false) {
	        if (cell.Formula) {
	          var fstr = unescapexml(cell.Formula);
	          if (fstr.charCodeAt(0) == 61) fstr = fstr.slice(1);
	          cell.f = rc_to_a1(fstr, base);
	          delete cell.Formula;
	          if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base); else if (cell.ArrayRange) {
	            cell.F = rc_to_a1(cell.ArrayRange, base);
	            arrayf.push([safe_decode_range(cell.F), cell.F]);
	          }
	        } else {
	          for (i = 0; i < arrayf.length; ++i) if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1];
	        }
	      }
	      if (o.cellStyles) {
	        interiors.forEach(function (x) {
	          if (!S.patternType && x.patternType) S.patternType = x.patternType;
	        });
	        cell.s = S;
	      }
	      if (cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
	    }
	    function xlml_prefix_dname(dname) {
	      return XLSLblBuiltIn.indexOf("_xlnm." + dname) > -1 ? "_xlnm." + dname : dname;
	    }
	    function xlml_clean_comment(comment) {
	      comment.t = comment.v || "";
	      comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
	      comment.v = comment.w = comment.ixfe = undefined;
	    }
	    function parse_xlml_xml(d, _opts) {
	      var opts = _opts || ({});
	      make_ssf();
	      var str = debom(xlml_normalize(d));
	      if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
	        if (typeof $cptable !== "undefined") str = $cptable.utils.decode(65001, char_codes(str)); else str = utf8read(str);
	      }
	      var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
	      opening = opening.replace(/".*?"/g, "");
	      if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
	        var _o = dup(opts);
	        _o.type = "string";
	        return PRN.to_workbook(str, _o);
	      }
	      if (opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function (tag) {
	        if (opening.indexOf("<" + tag) >= 0) ishtml = true;
	      });
	      if (ishtml) return html_to_workbook(str, opts);
	      XLMLFormatMap = {
	        "General Number": "General",
	        "General Date": table_fmt[22],
	        "Long Date": "dddd, mmmm dd, yyyy",
	        "Medium Date": table_fmt[15],
	        "Short Date": table_fmt[14],
	        "Long Time": table_fmt[19],
	        "Medium Time": table_fmt[18],
	        "Short Time": table_fmt[20],
	        "Currency": "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)",
	        "Fixed": table_fmt[2],
	        "Standard": table_fmt[4],
	        "Percent": table_fmt[10],
	        "Scientific": table_fmt[11],
	        "Yes/No": "\"Yes\";\"Yes\";\"No\";@",
	        "True/False": "\"True\";\"True\";\"False\";@",
	        "On/Off": "\"Yes\";\"Yes\";\"No\";@"
	      };
	      var Rn;
	      var state = [], tmp;
	      var sheets = {}, sheetnames = [], cursheet = {}, sheetname = "";
	      if (opts.dense) cursheet["!data"] = [];
	      var cell = {}, row = {};
	      var dtag = xlml_parsexmltag("<Data ss:Type=\"String\">"), didx = 0;
	      var c = 0, r = 0;
	      var refguess = {
	        s: {
	          r: 2000000,
	          c: 2000000
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var styles = {}, stag = {};
	      var ss = "", fidx = 0;
	      var merges = [];
	      var Props = {}, Custprops = {}, pidx = 0, cp = [];
	      var comments = [], comment = {};
	      var cstys = [], csty, seencol = false;
	      var arrayf = [];
	      var rowinfo = [], rowobj = {}, cc = 0, rr = 0;
	      var Workbook = {
	        Sheets: [],
	        WBProps: {
	          date1904: false
	        }
	      }, wsprops = {};
	      xlmlregex.lastIndex = 0;
	      str = str.replace(/<!--([\s\S]*?)-->/mg, "");
	      var raw_Rn3 = "";
	      while (Rn = xlmlregex.exec(str)) switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
	        case "data":
	          if (raw_Rn3 == "data") {
	            if (Rn[1] === "/") {
	              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
	            break;
	          }
	          if (state[state.length - 1][1]) break;
	          if (Rn[1] === "/") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == "comment" ? comment : cell, {
	            c: c,
	            r: r
	          }, styles, cstys[c], row, arrayf, opts, Workbook.WBProps.date1904); else {
	            ss = "";
	            dtag = xlml_parsexmltag(Rn[0]);
	            didx = Rn.index + Rn[0].length;
	          }
	          break;
	        case "cell":
	          if (Rn[1] === "/") {
	            if (comments.length > 0) cell.c = comments;
	            if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== void 0) {
	              if (opts.dense) {
	                if (!cursheet["!data"][r]) cursheet["!data"][r] = [];
	                cursheet["!data"][r][c] = cell;
	              } else cursheet[encode_col(c) + encode_row(r)] = cell;
	            }
	            if (cell.HRef) {
	              cell.l = {
	                Target: unescapexml(cell.HRef)
	              };
	              if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
	              delete cell.HRef;
	              delete cell.HRefScreenTip;
	            }
	            if (cell.MergeAcross || cell.MergeDown) {
	              cc = c + (parseInt(cell.MergeAcross, 10) | 0);
	              rr = r + (parseInt(cell.MergeDown, 10) | 0);
	              if (cc > c || rr > r) merges.push({
	                s: {
	                  c: c,
	                  r: r
	                },
	                e: {
	                  c: cc,
	                  r: rr
	                }
	              });
	            }
	            if (!opts.sheetStubs) {
	              if (cell.MergeAcross) c = cc + 1; else ++c;
	            } else if (cell.MergeAcross || cell.MergeDown) {
	              for (var cma = c; cma <= cc; ++cma) {
	                for (var cmd = r; cmd <= rr; ++cmd) {
	                  if (cma > c || cmd > r) {
	                    if (opts.dense) {
	                      if (!cursheet["!data"][cmd]) cursheet["!data"][cmd] = [];
	                      cursheet["!data"][cmd][cma] = {
	                        t: "z"
	                      };
	                    } else cursheet[encode_col(cma) + encode_row(cmd)] = {
	                      t: "z"
	                    };
	                  }
	                }
	              }
	              c = cc + 1;
	            } else ++c;
	          } else {
	            cell = xlml_parsexmltagobj(Rn[0]);
	            if (cell.Index) c = +cell.Index - 1;
	            if (c < refguess.s.c) refguess.s.c = c;
	            if (c > refguess.e.c) refguess.e.c = c;
	            if (Rn[0].slice(-2) === "/>") ++c;
	            comments = [];
	          }
	          break;
	        case "row":
	          if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
	            if (r < refguess.s.r) refguess.s.r = r;
	            if (r > refguess.e.r) refguess.e.r = r;
	            if (Rn[0].slice(-2) === "/>") {
	              row = xlml_parsexmltag(Rn[0]);
	              if (row.Index) r = +row.Index - 1;
	            }
	            c = 0;
	            ++r;
	          } else {
	            row = xlml_parsexmltag(Rn[0]);
	            if (row.Index) r = +row.Index - 1;
	            rowobj = {};
	            if (row.AutoFitHeight == "0" || row.Height) {
	              rowobj.hpx = parseInt(row.Height, 10);
	              rowobj.hpt = px2pt(rowobj.hpx);
	              rowinfo[r] = rowobj;
	            }
	            if (row.Hidden == "1") {
	              rowobj.hidden = true;
	              rowinfo[r] = rowobj;
	            }
	          }
	          break;
	        case "worksheet":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	            sheetnames.push(sheetname);
	            if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
	              cursheet["!ref"] = encode_range(refguess);
	              if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
	                cursheet["!fullref"] = cursheet["!ref"];
	                refguess.e.r = opts.sheetRows - 1;
	                cursheet["!ref"] = encode_range(refguess);
	              }
	            }
	            if (merges.length) cursheet["!merges"] = merges;
	            if (cstys.length > 0) cursheet["!cols"] = cstys;
	            if (rowinfo.length > 0) cursheet["!rows"] = rowinfo;
	            sheets[sheetname] = cursheet;
	          } else {
	            refguess = {
	              s: {
	                r: 2000000,
	                c: 2000000
	              },
	              e: {
	                r: 0,
	                c: 0
	              }
	            };
	            r = c = 0;
	            state.push([Rn[3], false]);
	            tmp = xlml_parsexmltag(Rn[0]);
	            sheetname = unescapexml(tmp.Name);
	            cursheet = {};
	            if (opts.dense) cursheet["!data"] = [];
	            merges = [];
	            arrayf = [];
	            rowinfo = [];
	            wsprops = {
	              name: sheetname,
	              Hidden: 0
	            };
	            Workbook.Sheets.push(wsprops);
	          }
	          break;
	        case "table":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	          } else if (Rn[0].slice(-2) == "/>") break; else {
	            state.push([Rn[3], false]);
	            cstys = [];
	            seencol = false;
	          }
	          break;
	        case "style":
	          if (Rn[1] === "/") process_style_xlml(styles, stag, opts); else stag = xlml_parsexmltag(Rn[0]);
	          break;
	        case "numberformat":
	          stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
	          if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
	          for (var ssfidx = 0; ssfidx != 392; ++ssfidx) if (table_fmt[ssfidx] == stag.nf) break;
	          if (ssfidx == 392) for (ssfidx = 57; ssfidx != 392; ++ssfidx) if (table_fmt[ssfidx] == null) {
	            SSF__load(stag.nf, ssfidx);
	            break;
	          }
	          break;
	        case "column":
	          if (state[state.length - 1][0] !== "table") break;
	          if (Rn[1] === "/") break;
	          csty = xlml_parsexmltag(Rn[0]);
	          if (csty.Hidden) {
	            csty.hidden = true;
	            delete csty.Hidden;
	          }
	          if (csty.Width) csty.wpx = parseInt(csty.Width, 10);
	          if (!seencol && csty.wpx > 10) {
	            seencol = true;
	            MDW = DEF_MDW;
	            for (var _col = 0; _col < cstys.length; ++_col) if (cstys[_col]) process_col(cstys[_col]);
	          }
	          if (seencol) process_col(csty);
	          cstys[csty.Index - 1 || cstys.length] = csty;
	          for (var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
	          break;
	        case "namedrange":
	          if (Rn[1] === "/") break;
	          if (!Workbook.Names) Workbook.Names = [];
	          var _NamedRange = parsexmltag(Rn[0]);
	          var _DefinedName = {
	            Name: xlml_prefix_dname(_NamedRange.Name),
	            Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {
	              r: 0,
	              c: 0
	            })
	          };
	          if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;
	          Workbook.Names.push(_DefinedName);
	          break;
	        case "namedcell":
	          break;
	        case "b":
	          break;
	        case "i":
	          break;
	        case "u":
	          break;
	        case "s":
	          break;
	        case "em":
	          break;
	        case "h2":
	          break;
	        case "h3":
	          break;
	        case "sub":
	          break;
	        case "sup":
	          break;
	        case "span":
	          break;
	        case "alignment":
	          break;
	        case "borders":
	          break;
	        case "border":
	          break;
	        case "font":
	          if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index); else fidx = Rn.index + Rn[0].length;
	          break;
	        case "interior":
	          if (!opts.cellStyles) break;
	          stag.Interior = xlml_parsexmltag(Rn[0]);
	          break;
	        case "protection":
	          break;
	        case "author":
	        case "title":
	        case "description":
	        case "created":
	        case "keywords":
	        case "subject":
	        case "category":
	        case "company":
	        case "lastauthor":
	        case "lastsaved":
	        case "lastprinted":
	        case "version":
	        case "revision":
	        case "totaltime":
	        case "hyperlinkbase":
	        case "manager":
	        case "contentstatus":
	        case "identifier":
	        case "language":
	        case "appname":
	          if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index)); else pidx = Rn.index + Rn[0].length;
	          break;
	        case "paragraphs":
	          break;
	        case "styles":
	        case "workbook":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	          } else state.push([Rn[3], false]);
	          break;
	        case "comment":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	            xlml_clean_comment(comment);
	            comments.push(comment);
	          } else {
	            state.push([Rn[3], false]);
	            tmp = xlml_parsexmltag(Rn[0]);
	            if (!parsexmlbool(tmp["ShowAlways"] || "0")) comments.hidden = true;
	            comment = {
	              a: tmp.Author
	            };
	          }
	          break;
	        case "autofilter":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	            var AutoFilter = xlml_parsexmltag(Rn[0]);
	            cursheet["!autofilter"] = {
	              ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "")
	            };
	            state.push([Rn[3], true]);
	          }
	          break;
	        case "name":
	          break;
	        case "datavalidation":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	          } else {
	            if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
	          }
	          break;
	        case "pixelsperinch":
	          break;
	        case "componentoptions":
	        case "documentproperties":
	        case "customdocumentproperties":
	        case "officedocumentsettings":
	        case "pivottable":
	        case "pivotcache":
	        case "names":
	        case "mapinfo":
	        case "pagebreaks":
	        case "querytable":
	        case "sorting":
	        case "schema":
	        case "conditionalformatting":
	        case "smarttagtype":
	        case "smarttags":
	        case "excelworkbook":
	        case "workbookoptions":
	        case "worksheetoptions":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
	          break;
	        case "null":
	          break;
	        default:
	          if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
	          if (state.length == 0 && Rn[3] == "uof") return parse_fods(str, opts);
	          var seen = true;
	          switch (state[state.length - 1][0]) {
	            case "officedocumentsettings":
	              switch (Rn[3]) {
	                case "allowpng":
	                  break;
	                case "removepersonalinformation":
	                  break;
	                case "downloadcomponents":
	                  break;
	                case "locationofcomponents":
	                  break;
	                case "colors":
	                  break;
	                case "color":
	                  break;
	                case "index":
	                  break;
	                case "rgb":
	                  break;
	                case "targetscreensize":
	                  break;
	                case "readonlyrecommended":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "componentoptions":
	              switch (Rn[3]) {
	                case "toolbar":
	                  break;
	                case "hideofficelogo":
	                  break;
	                case "spreadsheetautofit":
	                  break;
	                case "label":
	                  break;
	                case "caption":
	                  break;
	                case "maxheight":
	                  break;
	                case "maxwidth":
	                  break;
	                case "nextsheetnumber":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "excelworkbook":
	              switch (Rn[3]) {
	                case "date1904":
	                  Workbook.WBProps.date1904 = true;
	                  break;
	                case "hidehorizontalscrollbar":
	                  break;
	                case "hideverticalscrollbar":
	                  break;
	                case "hideworkbooktabs":
	                  break;
	                case "windowheight":
	                  break;
	                case "windowwidth":
	                  break;
	                case "windowtopx":
	                  break;
	                case "windowtopy":
	                  break;
	                case "tabratio":
	                  break;
	                case "protectstructure":
	                  break;
	                case "protectwindow":
	                  break;
	                case "protectwindows":
	                  break;
	                case "activesheet":
	                  break;
	                case "displayinknotes":
	                  break;
	                case "firstvisiblesheet":
	                  break;
	                case "supbook":
	                  break;
	                case "sheetname":
	                  break;
	                case "sheetindex":
	                  break;
	                case "sheetindexfirst":
	                  break;
	                case "sheetindexlast":
	                  break;
	                case "dll":
	                  break;
	                case "acceptlabelsinformulas":
	                  break;
	                case "donotsavelinkvalues":
	                  break;
	                case "iteration":
	                  break;
	                case "maxiterations":
	                  break;
	                case "maxchange":
	                  break;
	                case "path":
	                  break;
	                case "xct":
	                  break;
	                case "count":
	                  break;
	                case "selectedsheets":
	                  break;
	                case "calculation":
	                  break;
	                case "uncalced":
	                  break;
	                case "startupprompt":
	                  break;
	                case "crn":
	                  break;
	                case "externname":
	                  break;
	                case "formula":
	                  break;
	                case "colfirst":
	                  break;
	                case "collast":
	                  break;
	                case "wantadvise":
	                  break;
	                case "boolean":
	                  break;
	                case "error":
	                  break;
	                case "text":
	                  break;
	                case "ole":
	                  break;
	                case "noautorecover":
	                  break;
	                case "publishobjects":
	                  break;
	                case "donotcalculatebeforesave":
	                  break;
	                case "number":
	                  break;
	                case "refmoder1c1":
	                  break;
	                case "embedsavesmarttags":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "workbookoptions":
	              switch (Rn[3]) {
	                case "owcversion":
	                  break;
	                case "height":
	                  break;
	                case "width":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "worksheetoptions":
	              switch (Rn[3]) {
	                case "visible":
	                  if (Rn[0].slice(-2) === "/>") ; else if (Rn[1] === "/") switch (str.slice(pidx, Rn.index)) {
	                    case "SheetHidden":
	                      wsprops.Hidden = 1;
	                      break;
	                    case "SheetVeryHidden":
	                      wsprops.Hidden = 2;
	                      break;
	                  } else pidx = Rn.index + Rn[0].length;
	                  break;
	                case "header":
	                  if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
	                  if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
	                  break;
	                case "footer":
	                  if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
	                  if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
	                  break;
	                case "pagemargins":
	                  var pagemargins = parsexmltag(Rn[0]);
	                  if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
	                  if (!isNaN(+pagemargins.Top)) cursheet["!margins"].top = +pagemargins.Top;
	                  if (!isNaN(+pagemargins.Left)) cursheet["!margins"].left = +pagemargins.Left;
	                  if (!isNaN(+pagemargins.Right)) cursheet["!margins"].right = +pagemargins.Right;
	                  if (!isNaN(+pagemargins.Bottom)) cursheet["!margins"].bottom = +pagemargins.Bottom;
	                  break;
	                case "displayrighttoleft":
	                  if (!Workbook.Views) Workbook.Views = [];
	                  if (!Workbook.Views[0]) Workbook.Views[0] = {};
	                  Workbook.Views[0].RTL = true;
	                  break;
	                case "freezepanes":
	                  break;
	                case "frozennosplit":
	                  break;
	                case "splithorizontal":
	                case "splitvertical":
	                  break;
	                case "donotdisplaygridlines":
	                  break;
	                case "activerow":
	                  break;
	                case "activecol":
	                  break;
	                case "toprowbottompane":
	                  break;
	                case "leftcolumnrightpane":
	                  break;
	                case "unsynced":
	                  break;
	                case "print":
	                  break;
	                case "printerrors":
	                  break;
	                case "panes":
	                  break;
	                case "scale":
	                  break;
	                case "pane":
	                  break;
	                case "number":
	                  break;
	                case "layout":
	                  break;
	                case "pagesetup":
	                  break;
	                case "selected":
	                  break;
	                case "protectobjects":
	                  break;
	                case "enableselection":
	                  break;
	                case "protectscenarios":
	                  break;
	                case "validprinterinfo":
	                  break;
	                case "horizontalresolution":
	                  break;
	                case "verticalresolution":
	                  break;
	                case "numberofcopies":
	                  break;
	                case "activepane":
	                  break;
	                case "toprowvisible":
	                  break;
	                case "leftcolumnvisible":
	                  break;
	                case "fittopage":
	                  break;
	                case "rangeselection":
	                  break;
	                case "papersizeindex":
	                  break;
	                case "pagelayoutzoom":
	                  break;
	                case "pagebreakzoom":
	                  break;
	                case "filteron":
	                  break;
	                case "fitwidth":
	                  break;
	                case "fitheight":
	                  break;
	                case "commentslayout":
	                  break;
	                case "zoom":
	                  break;
	                case "lefttoright":
	                  break;
	                case "gridlines":
	                  break;
	                case "allowsort":
	                  break;
	                case "allowfilter":
	                  break;
	                case "allowinsertrows":
	                  break;
	                case "allowdeleterows":
	                  break;
	                case "allowinsertcols":
	                  break;
	                case "allowdeletecols":
	                  break;
	                case "allowinserthyperlinks":
	                  break;
	                case "allowformatcells":
	                  break;
	                case "allowsizecols":
	                  break;
	                case "allowsizerows":
	                  break;
	                case "nosummaryrowsbelowdetail":
	                  if (!cursheet["!outline"]) cursheet["!outline"] = {};
	                  cursheet["!outline"].above = true;
	                  break;
	                case "tabcolorindex":
	                  break;
	                case "donotdisplayheadings":
	                  break;
	                case "showpagelayoutzoom":
	                  break;
	                case "nosummarycolumnsrightdetail":
	                  if (!cursheet["!outline"]) cursheet["!outline"] = {};
	                  cursheet["!outline"].left = true;
	                  break;
	                case "blackandwhite":
	                  break;
	                case "donotdisplayzeros":
	                  break;
	                case "displaypagebreak":
	                  break;
	                case "rowcolheadings":
	                  break;
	                case "donotdisplayoutline":
	                  break;
	                case "noorientation":
	                  break;
	                case "allowusepivottables":
	                  break;
	                case "zeroheight":
	                  break;
	                case "viewablerange":
	                  break;
	                case "selection":
	                  break;
	                case "protectcontents":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "pivottable":
	            case "pivotcache":
	              switch (Rn[3]) {
	                case "immediateitemsondrop":
	                  break;
	                case "showpagemultipleitemlabel":
	                  break;
	                case "compactrowindent":
	                  break;
	                case "location":
	                  break;
	                case "pivotfield":
	                  break;
	                case "orientation":
	                  break;
	                case "layoutform":
	                  break;
	                case "layoutsubtotallocation":
	                  break;
	                case "layoutcompactrow":
	                  break;
	                case "position":
	                  break;
	                case "pivotitem":
	                  break;
	                case "datatype":
	                  break;
	                case "datafield":
	                  break;
	                case "sourcename":
	                  break;
	                case "parentfield":
	                  break;
	                case "ptlineitems":
	                  break;
	                case "ptlineitem":
	                  break;
	                case "countofsameitems":
	                  break;
	                case "item":
	                  break;
	                case "itemtype":
	                  break;
	                case "ptsource":
	                  break;
	                case "cacheindex":
	                  break;
	                case "consolidationreference":
	                  break;
	                case "filename":
	                  break;
	                case "reference":
	                  break;
	                case "nocolumngrand":
	                  break;
	                case "norowgrand":
	                  break;
	                case "blanklineafteritems":
	                  break;
	                case "hidden":
	                  break;
	                case "subtotal":
	                  break;
	                case "basefield":
	                  break;
	                case "mapchilditems":
	                  break;
	                case "function":
	                  break;
	                case "refreshonfileopen":
	                  break;
	                case "printsettitles":
	                  break;
	                case "mergelabels":
	                  break;
	                case "defaultversion":
	                  break;
	                case "refreshname":
	                  break;
	                case "refreshdate":
	                  break;
	                case "refreshdatecopy":
	                  break;
	                case "versionlastrefresh":
	                  break;
	                case "versionlastupdate":
	                  break;
	                case "versionupdateablemin":
	                  break;
	                case "versionrefreshablemin":
	                  break;
	                case "calculation":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "pagebreaks":
	              switch (Rn[3]) {
	                case "colbreaks":
	                  break;
	                case "colbreak":
	                  break;
	                case "rowbreaks":
	                  break;
	                case "rowbreak":
	                  break;
	                case "colstart":
	                  break;
	                case "colend":
	                  break;
	                case "rowend":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "autofilter":
	              switch (Rn[3]) {
	                case "autofiltercolumn":
	                  break;
	                case "autofiltercondition":
	                  break;
	                case "autofilterand":
	                  break;
	                case "autofilteror":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "querytable":
	              switch (Rn[3]) {
	                case "id":
	                  break;
	                case "autoformatfont":
	                  break;
	                case "autoformatpattern":
	                  break;
	                case "querysource":
	                  break;
	                case "querytype":
	                  break;
	                case "enableredirections":
	                  break;
	                case "refreshedinxl9":
	                  break;
	                case "urlstring":
	                  break;
	                case "htmltables":
	                  break;
	                case "connection":
	                  break;
	                case "commandtext":
	                  break;
	                case "refreshinfo":
	                  break;
	                case "notitles":
	                  break;
	                case "nextid":
	                  break;
	                case "columninfo":
	                  break;
	                case "overwritecells":
	                  break;
	                case "donotpromptforfile":
	                  break;
	                case "textwizardsettings":
	                  break;
	                case "source":
	                  break;
	                case "number":
	                  break;
	                case "decimal":
	                  break;
	                case "thousandseparator":
	                  break;
	                case "trailingminusnumbers":
	                  break;
	                case "formatsettings":
	                  break;
	                case "fieldtype":
	                  break;
	                case "delimiters":
	                  break;
	                case "tab":
	                  break;
	                case "comma":
	                  break;
	                case "autoformatname":
	                  break;
	                case "versionlastedit":
	                  break;
	                case "versionlastrefresh":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "datavalidation":
	              switch (Rn[3]) {
	                case "range":
	                  break;
	                case "type":
	                  break;
	                case "min":
	                  break;
	                case "max":
	                  break;
	                case "sort":
	                  break;
	                case "descending":
	                  break;
	                case "order":
	                  break;
	                case "casesensitive":
	                  break;
	                case "value":
	                  break;
	                case "errorstyle":
	                  break;
	                case "errormessage":
	                  break;
	                case "errortitle":
	                  break;
	                case "inputmessage":
	                  break;
	                case "inputtitle":
	                  break;
	                case "combohide":
	                  break;
	                case "inputhide":
	                  break;
	                case "condition":
	                  break;
	                case "qualifier":
	                  break;
	                case "useblank":
	                  break;
	                case "value1":
	                  break;
	                case "value2":
	                  break;
	                case "format":
	                  break;
	                case "cellrangelist":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "sorting":
	            case "conditionalformatting":
	              switch (Rn[3]) {
	                case "range":
	                  break;
	                case "type":
	                  break;
	                case "min":
	                  break;
	                case "max":
	                  break;
	                case "sort":
	                  break;
	                case "descending":
	                  break;
	                case "order":
	                  break;
	                case "casesensitive":
	                  break;
	                case "value":
	                  break;
	                case "errorstyle":
	                  break;
	                case "errormessage":
	                  break;
	                case "errortitle":
	                  break;
	                case "cellrangelist":
	                  break;
	                case "inputmessage":
	                  break;
	                case "inputtitle":
	                  break;
	                case "combohide":
	                  break;
	                case "inputhide":
	                  break;
	                case "condition":
	                  break;
	                case "qualifier":
	                  break;
	                case "useblank":
	                  break;
	                case "value1":
	                  break;
	                case "value2":
	                  break;
	                case "format":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "mapinfo":
	            case "schema":
	            case "data":
	              switch (Rn[3]) {
	                case "map":
	                  break;
	                case "entry":
	                  break;
	                case "range":
	                  break;
	                case "xpath":
	                  break;
	                case "field":
	                  break;
	                case "xsdtype":
	                  break;
	                case "filteron":
	                  break;
	                case "aggregate":
	                  break;
	                case "elementtype":
	                  break;
	                case "attributetype":
	                  break;
	                case "schema":
	                case "element":
	                case "complextype":
	                case "datatype":
	                case "all":
	                case "attribute":
	                case "extends":
	                  break;
	                case "row":
	                  break;
	                default:
	                  seen = false;
	              }
	              break;
	            case "smarttags":
	              break;
	            default:
	              seen = false;
	              break;
	          }
	          if (seen) break;
	          if (Rn[3].match(/!\[CDATA/)) break;
	          if (!state[state.length - 1][1]) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
	          if (state[state.length - 1][0] === "customdocumentproperties") {
	            if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index)); else {
	              cp = Rn;
	              pidx = Rn.index + Rn[0].length;
	            }
	            break;
	          }
	          if (opts.WTF) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
	      }
	      var out = {};
	      if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
	      out.SheetNames = sheetnames;
	      out.Workbook = Workbook;
	      out.SSF = dup(table_fmt);
	      out.Props = Props;
	      out.Custprops = Custprops;
	      out.bookType = "xlml";
	      return out;
	    }
	    function parse_xlml(data, opts) {
	      fix_read_opts(opts = opts || ({}));
	      switch (opts.type || "base64") {
	        case "base64":
	          return parse_xlml_xml(Base64_decode(data), opts);
	        case "binary":
	        case "buffer":
	        case "file":
	          return parse_xlml_xml(data, opts);
	        case "array":
	          return parse_xlml_xml(a2s(data), opts);
	      }
	    }
	    function write_props_xlml(wb, opts) {
	      var o = [];
	      if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
	      if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops));
	      return o.join("");
	    }
	    function write_wb_xlml(wb) {
	      if ((((wb || ({})).Workbook || ({})).WBProps || ({})).date1904) return "<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\"><Date1904/></ExcelWorkbook>";
	      return "";
	    }
	    function write_sty_xlml(wb, opts) {
	      var styles = ["<Style ss:ID=\"Default\" ss:Name=\"Normal\"><NumberFormat/></Style>"];
	      opts.cellXfs.forEach(function (xf, id) {
	        var payload = [];
	        payload.push(writextag("NumberFormat", null, {
	          "ss:Format": escapexml(table_fmt[xf.numFmtId])
	        }));
	        var o = {
	          "ss:ID": "s" + (21 + id)
	        };
	        styles.push(writextag("Style", payload.join(""), o));
	      });
	      return writextag("Styles", styles.join(""));
	    }
	    function write_name_xlml(n) {
	      return writextag("NamedRange", null, {
	        "ss:Name": n.Name.slice(0, 6) == "_xlnm." ? n.Name.slice(6) : n.Name,
	        "ss:RefersTo": "=" + a1_to_rc(n.Ref, {
	          r: 0,
	          c: 0
	        })
	      });
	    }
	    function write_names_xlml(wb) {
	      if (!((wb || ({})).Workbook || ({})).Names) return "";
	      var names = wb.Workbook.Names;
	      var out = [];
	      for (var i = 0; i < names.length; ++i) {
	        var n = names[i];
	        if (n.Sheet != null) continue;
	        if (n.Name.match(/^_xlfn\./)) continue;
	        out.push(write_name_xlml(n));
	      }
	      return writextag("Names", out.join(""));
	    }
	    function write_ws_xlml_names(ws, opts, idx, wb) {
	      if (!ws) return "";
	      if (!((wb || ({})).Workbook || ({})).Names) return "";
	      var names = wb.Workbook.Names;
	      var out = [];
	      for (var i = 0; i < names.length; ++i) {
	        var n = names[i];
	        if (n.Sheet != idx) continue;
	        if (n.Name.match(/^_xlfn\./)) continue;
	        out.push(write_name_xlml(n));
	      }
	      return out.join("");
	    }
	    function write_ws_xlml_wsopts(ws, opts, idx, wb) {
	      if (!ws) return "";
	      var o = [];
	      if (ws["!margins"]) {
	        o.push("<PageSetup>");
	        if (ws["!margins"].header) o.push(writextag("Header", null, {
	          "x:Margin": ws["!margins"].header
	        }));
	        if (ws["!margins"].footer) o.push(writextag("Footer", null, {
	          "x:Margin": ws["!margins"].footer
	        }));
	        o.push(writextag("PageMargins", null, {
	          "x:Bottom": ws["!margins"].bottom || "0.75",
	          "x:Left": ws["!margins"].left || "0.7",
	          "x:Right": ws["!margins"].right || "0.7",
	          "x:Top": ws["!margins"].top || "0.75"
	        }));
	        o.push("</PageSetup>");
	      }
	      if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
	        if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {})); else {
	          for (var i = 0; i < idx; ++i) if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;
	          if (i == idx) o.push("<Selected/>");
	        }
	      }
	      if (((((wb || ({})).Workbook || ({})).Views || [])[0] || ({})).RTL) o.push("<DisplayRightToLeft/>");
	      if (ws["!protect"]) {
	        o.push(writetag("ProtectContents", "True"));
	        if (ws["!protect"].objects) o.push(writetag("ProtectObjects", "True"));
	        if (ws["!protect"].scenarios) o.push(writetag("ProtectScenarios", "True"));
	        if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection")); else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
	        [["formatCells", "AllowFormatCells"], ["formatColumns", "AllowSizeCols"], ["formatRows", "AllowSizeRows"], ["insertColumns", "AllowInsertCols"], ["insertRows", "AllowInsertRows"], ["insertHyperlinks", "AllowInsertHyperlinks"], ["deleteColumns", "AllowDeleteCols"], ["deleteRows", "AllowDeleteRows"], ["sort", "AllowSort"], ["autoFilter", "AllowFilter"], ["pivotTables", "AllowUsePivotTables"]].forEach(function (x) {
	          if (ws["!protect"][x[0]]) o.push("<" + x[1] + "/>");
	        });
	      }
	      if (o.length == 0) return "";
	      return writextag("WorksheetOptions", o.join(""), {
	        xmlns: XLMLNS.x
	      });
	    }
	    function write_ws_xlml_comment(comments) {
	      return comments.map(function (c) {
	        var t = xlml_unfixstr(c.t || "");
	        var d = writextag("ss:Data", t, {
	          "xmlns": "http://www.w3.org/TR/REC-html40"
	        });
	        var p = {};
	        if (c.a) p["ss:Author"] = c.a;
	        if (!comments.hidden) p["ss:ShowAlways"] = "1";
	        return writextag("Comment", d, p);
	      }).join("");
	    }
	    function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
	      if (!cell || cell.v == undefined && cell.f == undefined) return "";
	      var attr = {};
	      if (cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
	      if (cell.F && cell.F.slice(0, ref.length) == ref) {
	        var end = decode_cell(cell.F.slice(ref.length + 1));
	        attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
	      }
	      if (cell.l && cell.l.Target) {
	        attr["ss:HRef"] = escapexml(cell.l.Target);
	        if (cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
	      }
	      if (ws["!merges"]) {
	        var marr = ws["!merges"];
	        for (var mi = 0; mi != marr.length; ++mi) {
	          if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
	          if (marr[mi].e.c > marr[mi].s.c) attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
	          if (marr[mi].e.r > marr[mi].s.r) attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
	        }
	      }
	      var t = "", p = "";
	      switch (cell.t) {
	        case "z":
	          if (!opts.sheetStubs) return "";
	          break;
	        case "n":
	          t = "Number";
	          p = String(cell.v);
	          break;
	        case "b":
	          t = "Boolean";
	          p = cell.v ? "1" : "0";
	          break;
	        case "e":
	          t = "Error";
	          p = BErr[cell.v];
	          break;
	        case "d":
	          t = "DateTime";
	          p = new Date(cell.v).toISOString();
	          if (cell.z == null) cell.z = cell.z || table_fmt[14];
	          break;
	        case "s":
	          t = "String";
	          p = escapexlml(cell.v || "");
	          break;
	      }
	      var os = get_cell_style(opts.cellXfs, cell, opts);
	      attr["ss:StyleID"] = "s" + (21 + os);
	      attr["ss:Index"] = addr.c + 1;
	      var _v = cell.v != null ? p : "";
	      var m = cell.t == "z" ? "" : "<Data ss:Type=\"" + t + "\">" + _v + "</Data>";
	      if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c);
	      return writextag("Cell", m, attr);
	    }
	    function write_ws_xlml_row(R, row) {
	      var o = "<Row ss:Index=\"" + (R + 1) + "\"";
	      if (row) {
	        if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
	        if (row.hpx) o += " ss:AutoFitHeight=\"0\" ss:Height=\"" + row.hpx + "\"";
	        if (row.hidden) o += " ss:Hidden=\"1\"";
	      }
	      return o + ">";
	    }
	    function write_ws_xlml_table(ws, opts, idx, wb) {
	      if (!ws["!ref"]) return "";
	      var range = safe_decode_range(ws["!ref"]);
	      var marr = ws["!merges"] || [], mi = 0;
	      var o = [];
	      if (ws["!cols"]) ws["!cols"].forEach(function (n, i) {
	        process_col(n);
	        var w = !!n.width;
	        var p = col_obj_w(i, n);
	        var k = {
	          "ss:Index": i + 1
	        };
	        if (w) k["ss:Width"] = width2px(p.width);
	        if (n.hidden) k["ss:Hidden"] = "1";
	        o.push(writextag("Column", null, k));
	      });
	      var dense = ws["!data"] != null;
	      for (var R = range.s.r; R <= range.e.r; ++R) {
	        var row = [write_ws_xlml_row(R, (ws["!rows"] || [])[R])];
	        for (var C = range.s.c; C <= range.e.c; ++C) {
	          var skip = false;
	          for (mi = 0; mi != marr.length; ++mi) {
	            if (marr[mi].s.c > C) continue;
	            if (marr[mi].s.r > R) continue;
	            if (marr[mi].e.c < C) continue;
	            if (marr[mi].e.r < R) continue;
	            if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
	            break;
	          }
	          if (skip) continue;
	          var addr = {
	            r: R,
	            c: C
	          };
	          var ref = encode_col(C) + encode_row(R), cell = dense ? (ws["!data"][R] || [])[C] : ws[ref];
	          row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
	        }
	        row.push("</Row>");
	        if (row.length > 2) o.push(row.join(""));
	      }
	      return o.join("");
	    }
	    function write_ws_xlml(idx, opts, wb) {
	      var o = [];
	      var s = wb.SheetNames[idx];
	      var ws = wb.Sheets[s];
	      var t = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
	      if (t.length > 0) o.push("<Names>" + t + "</Names>");
	      t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
	      if (t.length > 0) o.push("<Table>" + t + "</Table>");
	      o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
	      if (ws["!autofilter"]) o.push("<AutoFilter x:Range=\"" + a1_to_rc(fix_range(ws["!autofilter"].ref), {
	        r: 0,
	        c: 0
	      }) + "\" xmlns=\"urn:schemas-microsoft-com:office:excel\"></AutoFilter>");
	      return o.join("");
	    }
	    function write_xlml(wb, opts) {
	      if (!opts) opts = {};
	      if (!wb.SSF) wb.SSF = dup(table_fmt);
	      if (wb.SSF) {
	        make_ssf();
	        SSF_load_table(wb.SSF);
	        opts.revssf = evert_num(wb.SSF);
	        opts.revssf[wb.SSF[65535]] = 0;
	        opts.ssf = wb.SSF;
	        opts.cellXfs = [];
	        get_cell_style(opts.cellXfs, {}, {
	          revssf: {
	            "General": 0
	          }
	        });
	      }
	      var d = [];
	      d.push(write_props_xlml(wb, opts));
	      d.push(write_wb_xlml(wb));
	      d.push("");
	      d.push("");
	      for (var i = 0; i < wb.SheetNames.length; ++i) d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {
	        "ss:Name": escapexml(wb.SheetNames[i])
	      }));
	      d[2] = write_sty_xlml(wb, opts);
	      d[3] = write_names_xlml(wb);
	      return XML_HEADER + writextag("Workbook", d.join(""), {
	        "xmlns": XLMLNS.ss,
	        "xmlns:o": XLMLNS.o,
	        "xmlns:x": XLMLNS.x,
	        "xmlns:ss": XLMLNS.ss,
	        "xmlns:dt": XLMLNS.dt,
	        "xmlns:html": XLMLNS.html
	      });
	    }
	    function parse_compobj(obj) {
	      var v = {};
	      var o = obj.content;
	      o.l = 28;
	      v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
	      v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
	      if (o.length - o.l <= 4) return v;
	      var m = o.read_shift(4);
	      if (m == 0 || m > 40) return v;
	      o.l -= 4;
	      v.Reserved1 = o.read_shift(0, "lpstr-ansi");
	      if (o.length - o.l <= 4) return v;
	      m = o.read_shift(4);
	      if (m !== 1907505652) return v;
	      v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
	      m = o.read_shift(4);
	      if (m == 0 || m > 40) return v;
	      o.l -= 4;
	      v.Reserved2 = o.read_shift(0, "lpwstr");
	    }
	    var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
	    function slurp(RecordType, R, blob, length, opts) {
	      var l = length;
	      var bufs = [];
	      var d = blob.slice(blob.l, blob.l + l);
	      if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch (RecordType) {
	        case 9:
	        case 521:
	        case 1033:
	        case 2057:
	        case 47:
	        case 405:
	        case 225:
	        case 406:
	        case 312:
	        case 404:
	        case 10:
	          break;
	        case 133:
	          break;
	        default:
	          opts.enc.insitu(d);
	      }
	      bufs.push(d);
	      blob.l += l;
	      var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
	      var start = 0;
	      while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
	        l = __readUInt16LE(blob, blob.l + 2);
	        start = blob.l + 4;
	        if (nextrt == 2066) start += 4; else if (nextrt == 2165 || nextrt == 2175) {
	          start += 12;
	        }
	        d = blob.slice(start, blob.l + 4 + l);
	        bufs.push(d);
	        blob.l += 4 + l;
	        next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
	      }
	      var b = bconcat(bufs);
	      prep_blob(b, 0);
	      var ll = 0;
	      b.lens = [];
	      for (var j = 0; j < bufs.length; ++j) {
	        b.lens.push(ll);
	        ll += bufs[j].length;
	      }
	      if (b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
	      return R.f(b, b.length, opts);
	    }
	    function safe_format_xf(p, opts, date1904) {
	      if (p.t === "z") return;
	      if (!p.XF) return;
	      var fmtid = 0;
	      try {
	        fmtid = p.z || p.XF.numFmtId || 0;
	        if (opts.cellNF && p.z == null) p.z = table_fmt[fmtid];
	      } catch (e) {
	        if (opts.WTF) throw e;
	      }
	      if (!opts || opts.cellText !== false) try {
	        if (p.t === "e") {
	          p.w = p.w || BErr[p.v];
	        } else if (fmtid === 0 || fmtid == "General") {
	          if (p.t === "n") {
	            if ((p.v | 0) === p.v) p.w = p.v.toString(10); else p.w = SSF_general_num(p.v);
	          } else p.w = SSF_general(p.v);
	        } else p.w = SSF_format(fmtid, p.v, {
	          date1904: !!date1904,
	          dateNF: opts && opts.dateNF
	        });
	      } catch (e) {
	        if (opts.WTF) throw e;
	      }
	      if (opts.cellDates && fmtid && p.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
	        var _d = SSF_parse_date_code(p.v + (date1904 ? 1462 : 0));
	        if (_d) {
	          p.t = "d";
	          p.v = new Date(Date.UTC(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u));
	        }
	      }
	    }
	    function make_cell(val, ixfe, t) {
	      return {
	        v: val,
	        ixfe: ixfe,
	        t: t
	      };
	    }
	    function parse_workbook(blob, options) {
	      var wb = {
	        opts: {}
	      };
	      var Sheets = {};
	      var out = {};
	      if (options.dense) out["!data"] = [];
	      var Directory = {};
	      var range = {};
	      var last_formula = null;
	      var sst = [];
	      var cur_sheet = "";
	      var Preamble = {};
	      var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
	      var sharedf = {};
	      var arrayf = [];
	      var temp_val;
	      var country;
	      var XFs = [];
	      var palette = [];
	      var Workbook = {
	        Sheets: [],
	        WBProps: {
	          date1904: false
	        },
	        Views: [{}]
	      }, wsprops = {};
	      var biff4w = false;
	      var get_rgb = function getrgb(icv) {
	        if (icv < 8) return XLSIcv[icv];
	        if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
	        return XLSIcv[icv];
	      };
	      var process_cell_style = function pcs(cell, line, options) {
	        var xfd = line.XF.data;
	        if (!xfd || !xfd.patternType || !options || !options.cellStyles) return;
	        line.s = {};
	        line.s.patternType = xfd.patternType;
	        var t;
	        if (t = rgb2Hex(get_rgb(xfd.icvFore))) {
	          line.s.fgColor = {
	            rgb: t
	          };
	        }
	        if (t = rgb2Hex(get_rgb(xfd.icvBack))) {
	          line.s.bgColor = {
	            rgb: t
	          };
	        }
	      };
	      var addcell = function addcell(cell, line, options) {
	        if (!biff4w && file_depth > 1) return;
	        if (options.sheetRows && cell.r >= options.sheetRows) return;
	        if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
	        delete line.ixfe;
	        delete line.XF;
	        lastcell = cell;
	        last_cell = encode_cell(cell);
	        if (!range || !range.s || !range.e) range = {
	          s: {
	            r: 0,
	            c: 0
	          },
	          e: {
	            r: 0,
	            c: 0
	          }
	        };
	        if (cell.r < range.s.r) range.s.r = cell.r;
	        if (cell.c < range.s.c) range.s.c = cell.c;
	        if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
	        if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
	        if (options.cellFormula && line.f) {
	          for (var afi = 0; afi < arrayf.length; ++afi) {
	            if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
	            if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
	            line.F = encode_range(arrayf[afi][0]);
	            if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
	            if (line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
	            break;
	          }
	        }
	        {
	          if (options.dense) {
	            if (!out["!data"][cell.r]) out["!data"][cell.r] = [];
	            out["!data"][cell.r][cell.c] = line;
	          } else out[last_cell] = line;
	        }
	      };
	      var opts = {
	        enc: false,
	        sbcch: 0,
	        snames: [],
	        sharedf: sharedf,
	        arrayf: arrayf,
	        rrtabid: [],
	        lastuser: "",
	        biff: 8,
	        codepage: 0,
	        winlocked: 0,
	        cellStyles: !!options && !!options.cellStyles,
	        WTF: !!options && !!options.wtf
	      };
	      if (options.password) opts.password = options.password;
	      var themes;
	      var merges = [];
	      var objects = [];
	      var colinfo = [], rowinfo = [];
	      var seencol = false;
	      var supbooks = [];
	      supbooks.SheetNames = opts.snames;
	      supbooks.sharedf = opts.sharedf;
	      supbooks.arrayf = opts.arrayf;
	      supbooks.names = [];
	      supbooks.XTI = [];
	      var last_RT = 0;
	      var file_depth = 0;
	      var BIFF2Fmt = 0, BIFF2FmtTable = [];
	      var FilterDatabases = [];
	      var last_lbl;
	      opts.codepage = 1200;
	      set_cp(1200);
	      var seen_codepage = false;
	      while (blob.l < blob.length - 1) {
	        var s = blob.l;
	        var RecordType = blob.read_shift(2);
	        if (RecordType === 0 && last_RT === 10) break;
	        var length = blob.l === blob.length ? 0 : blob.read_shift(2);
	        var R = XLSRecordEnum[RecordType];
	        if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(RecordType) == -1) break;
	        if (R && R.f) {
	          if (options.bookSheets) {
	            if (last_RT === 133 && RecordType !== 133) break;
	          }
	          last_RT = RecordType;
	          if (R.r === 2 || R.r == 12) {
	            var rt = blob.read_shift(2);
	            length -= 2;
	            if (!opts.enc && rt !== RecordType && ((rt & 255) << 8 | rt >> 8) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
	            if (R.r == 12) {
	              blob.l += 10;
	              length -= 10;
	            }
	          }
	          var val = {};
	          if (RecordType === 10) val = R.f(blob, length, opts); else val = slurp(RecordType, R, blob, length, opts);
	          if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1) continue;
	          switch (RecordType) {
	            case 34:
	              wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
	              break;
	            case 134:
	              wb.opts.WriteProtect = true;
	              break;
	            case 47:
	              if (!opts.enc) blob.l = 0;
	              opts.enc = val;
	              if (!options.password) throw new Error("File is password-protected");
	              if (val.valid == null) throw new Error("Encryption scheme unsupported");
	              if (!val.valid) throw new Error("Password is incorrect");
	              break;
	            case 92:
	              opts.lastuser = val;
	              break;
	            case 66:
	              var cpval = Number(val);
	              switch (cpval) {
	                case 21010:
	                  cpval = 1200;
	                  break;
	                case 32768:
	                  cpval = 10000;
	                  break;
	                case 32769:
	                  cpval = 1252;
	                  break;
	              }
	              set_cp(opts.codepage = cpval);
	              seen_codepage = true;
	              break;
	            case 317:
	              opts.rrtabid = val;
	              break;
	            case 25:
	              opts.winlocked = val;
	              break;
	            case 439:
	              wb.opts["RefreshAll"] = val;
	              break;
	            case 12:
	              wb.opts["CalcCount"] = val;
	              break;
	            case 16:
	              wb.opts["CalcDelta"] = val;
	              break;
	            case 17:
	              wb.opts["CalcIter"] = val;
	              break;
	            case 13:
	              wb.opts["CalcMode"] = val;
	              break;
	            case 14:
	              wb.opts["CalcPrecision"] = val;
	              break;
	            case 95:
	              wb.opts["CalcSaveRecalc"] = val;
	              break;
	            case 15:
	              opts.CalcRefMode = val;
	              break;
	            case 2211:
	              wb.opts.FullCalc = val;
	              break;
	            case 129:
	              if (val.fDialog) out["!type"] = "dialog";
	              if (!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
	              if (!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
	              break;
	            case 67:
	            case 579:
	            case 1091:
	            case 224:
	              XFs.push(val);
	              break;
	            case 430:
	              supbooks.push([val]);
	              supbooks[supbooks.length - 1].XTI = [];
	              break;
	            case 35:
	            case 547:
	              supbooks[supbooks.length - 1].push(val);
	              break;
	            case 24:
	            case 536:
	              last_lbl = {
	                Name: val.Name,
	                Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
	              };
	              if (val.itab > 0) last_lbl.Sheet = val.itab - 1;
	              supbooks.names.push(last_lbl);
	              if (!supbooks[0]) {
	                supbooks[0] = [];
	                supbooks[0].XTI = [];
	              }
	              supbooks[supbooks.length - 1].push(val);
	              if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d") FilterDatabases[val.itab - 1] = {
	                ref: encode_range(val.rgce[0][0][1][2])
	              };
	              break;
	            case 22:
	              opts.ExternCount = val;
	              break;
	            case 23:
	              if (supbooks.length == 0) {
	                supbooks[0] = [];
	                supbooks[0].XTI = [];
	              }
	              supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
	              supbooks.XTI = supbooks.XTI.concat(val);
	              break;
	            case 2196:
	              if (opts.biff < 8) break;
	              if (last_lbl != null) last_lbl.Comment = val[1];
	              break;
	            case 18:
	              out["!protect"] = val;
	              break;
	            case 19:
	              if (val !== 0 && opts.WTF) console.error("Password verifier: " + val);
	              break;
	            case 133:
	              {
	                Directory[opts.biff == 4 ? opts.snames.length : val.pos] = val;
	                opts.snames.push(val.name);
	              }
	              break;
	            case 10:
	              {
	                if (--file_depth ? !biff4w : biff4w) break;
	                if (range.e) {
	                  if (range.e.r > 0 && range.e.c > 0) {
	                    range.e.r--;
	                    range.e.c--;
	                    out["!ref"] = encode_range(range);
	                    if (options.sheetRows && options.sheetRows <= range.e.r) {
	                      var tmpri = range.e.r;
	                      range.e.r = options.sheetRows - 1;
	                      out["!fullref"] = out["!ref"];
	                      out["!ref"] = encode_range(range);
	                      range.e.r = tmpri;
	                    }
	                    range.e.r++;
	                    range.e.c++;
	                  }
	                  if (merges.length > 0) out["!merges"] = merges;
	                  if (objects.length > 0) out["!objects"] = objects;
	                  if (colinfo.length > 0) out["!cols"] = colinfo;
	                  if (rowinfo.length > 0) out["!rows"] = rowinfo;
	                  Workbook.Sheets.push(wsprops);
	                }
	                if (cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out;
	                out = {};
	                if (options.dense) out["!data"] = [];
	              }
	              break;
	            case 9:
	            case 521:
	            case 1033:
	            case 2057:
	              {
	                if (opts.biff === 8) opts.biff = ({
	                  9: 2,
	                  521: 3,
	                  1033: 4
	                })[RecordType] || ({
	                  512: 2,
	                  768: 3,
	                  1024: 4,
	                  1280: 5,
	                  1536: 8,
	                  2: 2,
	                  7: 2
	                })[val.BIFFVer] || 8;
	                opts.biffguess = val.BIFFVer == 0;
	                if (val.BIFFVer == 0 && val.dt == 4096) {
	                  opts.biff = 5;
	                  seen_codepage = true;
	                  set_cp(opts.codepage = 28591);
	                }
	                if (opts.biff == 4 && val.dt & 256) biff4w = true;
	                if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
	                if (file_depth++ && !biff4w) break;
	                out = {};
	                if (options.dense) out["!data"] = [];
	                if (opts.biff < 8 && !seen_codepage) {
	                  seen_codepage = true;
	                  set_cp(opts.codepage = options.codepage || 1252);
	                }
	                if (opts.biff == 4 && biff4w) {
	                  cur_sheet = (Directory[opts.snames.indexOf(cur_sheet) + 1] || ({
	                    name: ""
	                  })).name;
	                } else if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 4096) {
	                  if (cur_sheet === "") cur_sheet = "Sheet1";
	                  range = {
	                    s: {
	                      r: 0,
	                      c: 0
	                    },
	                    e: {
	                      r: 0,
	                      c: 0
	                    }
	                  };
	                  var fakebs8 = {
	                    pos: blob.l - length,
	                    name: cur_sheet
	                  };
	                  Directory[fakebs8.pos] = fakebs8;
	                  opts.snames.push(cur_sheet);
	                } else cur_sheet = (Directory[s] || ({
	                  name: ""
	                })).name;
	                if (val.dt == 32) out["!type"] = "chart";
	                if (val.dt == 64) out["!type"] = "macro";
	                merges = [];
	                objects = [];
	                opts.arrayf = arrayf = [];
	                colinfo = [];
	                rowinfo = [];
	                seencol = false;
	                wsprops = {
	                  Hidden: (Directory[s] || ({
	                    hs: 0
	                  })).hs,
	                  name: cur_sheet
	                };
	              }
	              break;
	            case 515:
	            case 3:
	            case 2:
	              {
	                if (out["!type"] == "chart") if (options.dense ? (out["!data"][val.r] || [])[val.c] : out[encode_col(val.c) + encode_row(val.r)]) ++val.c;
	                temp_val = {
	                  ixfe: val.ixfe,
	                  XF: XFs[val.ixfe] || ({}),
	                  v: val.val,
	                  t: "n"
	                };
	                if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                safe_format_xf(temp_val, options, wb.opts.Date1904);
	                addcell({
	                  c: val.c,
	                  r: val.r
	                }, temp_val, options);
	              }
	              break;
	            case 5:
	            case 517:
	              {
	                temp_val = {
	                  ixfe: val.ixfe,
	                  XF: XFs[val.ixfe],
	                  v: val.val,
	                  t: val.t
	                };
	                if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                safe_format_xf(temp_val, options, wb.opts.Date1904);
	                addcell({
	                  c: val.c,
	                  r: val.r
	                }, temp_val, options);
	              }
	              break;
	            case 638:
	              {
	                temp_val = {
	                  ixfe: val.ixfe,
	                  XF: XFs[val.ixfe],
	                  v: val.rknum,
	                  t: "n"
	                };
	                if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                safe_format_xf(temp_val, options, wb.opts.Date1904);
	                addcell({
	                  c: val.c,
	                  r: val.r
	                }, temp_val, options);
	              }
	              break;
	            case 189:
	              {
	                for (var j = val.c; j <= val.C; ++j) {
	                  var ixfe = val.rkrec[j - val.c][0];
	                  temp_val = {
	                    ixfe: ixfe,
	                    XF: XFs[ixfe],
	                    v: val.rkrec[j - val.c][1],
	                    t: "n"
	                  };
	                  if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                  safe_format_xf(temp_val, options, wb.opts.Date1904);
	                  addcell({
	                    c: j,
	                    r: val.r
	                  }, temp_val, options);
	                }
	              }
	              break;
	            case 6:
	            case 518:
	            case 1030:
	              {
	                if (val.val == "String") {
	                  last_formula = val;
	                  break;
	                }
	                temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
	                temp_val.XF = XFs[temp_val.ixfe];
	                if (options.cellFormula) {
	                  var _f = val.formula;
	                  if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
	                    var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
	                    var _fe = encode_cell({
	                      r: _fr,
	                      c: _fc
	                    });
	                    if (sharedf[_fe]) temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts); else temp_val.F = ((options.dense ? (out["!data"][_fr] || [])[_fc] : out[_fe]) || ({})).F;
	                  } else temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
	                }
	                if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                safe_format_xf(temp_val, options, wb.opts.Date1904);
	                addcell(val.cell, temp_val, options);
	                last_formula = val;
	              }
	              break;
	            case 7:
	            case 519:
	              {
	                if (last_formula) {
	                  last_formula.val = val;
	                  temp_val = make_cell(val, last_formula.cell.ixfe, "s");
	                  temp_val.XF = XFs[temp_val.ixfe];
	                  if (options.cellFormula) {
	                    temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
	                  }
	                  if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                  safe_format_xf(temp_val, options, wb.opts.Date1904);
	                  addcell(last_formula.cell, temp_val, options);
	                  last_formula = null;
	                } else throw new Error("String record expects Formula");
	              }
	              break;
	            case 33:
	            case 545:
	              {
	                arrayf.push(val);
	                var _arraystart = encode_cell(val[0].s);
	                cc = options.dense ? (out["!data"][val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
	                if (options.cellFormula && cc) {
	                  if (!last_formula) break;
	                  if (!_arraystart || !cc) break;
	                  cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
	                  cc.F = encode_range(val[0]);
	                }
	              }
	              break;
	            case 1212:
	              {
	                if (!options.cellFormula) break;
	                if (last_cell) {
	                  if (!last_formula) break;
	                  sharedf[encode_cell(last_formula.cell)] = val[0];
	                  cc = options.dense ? (out["!data"][last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
	                  (cc || ({})).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
	                }
	              }
	              break;
	            case 253:
	              temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
	              if (sst[val.isst].h) temp_val.h = sst[val.isst].h;
	              temp_val.XF = XFs[temp_val.ixfe];
	              if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	              safe_format_xf(temp_val, options, wb.opts.Date1904);
	              addcell({
	                c: val.c,
	                r: val.r
	              }, temp_val, options);
	              break;
	            case 513:
	              if (options.sheetStubs) {
	                temp_val = {
	                  ixfe: val.ixfe,
	                  XF: XFs[val.ixfe],
	                  t: "z"
	                };
	                if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                safe_format_xf(temp_val, options, wb.opts.Date1904);
	                addcell({
	                  c: val.c,
	                  r: val.r
	                }, temp_val, options);
	              }
	              break;
	            case 190:
	              if (options.sheetStubs) {
	                for (var _j = val.c; _j <= val.C; ++_j) {
	                  var _ixfe = val.ixfe[_j - val.c];
	                  temp_val = {
	                    ixfe: _ixfe,
	                    XF: XFs[_ixfe],
	                    t: "z"
	                  };
	                  if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	                  safe_format_xf(temp_val, options, wb.opts.Date1904);
	                  addcell({
	                    c: _j,
	                    r: val.r
	                  }, temp_val, options);
	                }
	              }
	              break;
	            case 214:
	            case 516:
	            case 4:
	              temp_val = make_cell(val.val, val.ixfe, "s");
	              temp_val.XF = XFs[temp_val.ixfe];
	              if (BIFF2Fmt > 0) temp_val.z = temp_val.XF && temp_val.XF.numFmtId && BIFF2FmtTable[temp_val.XF.numFmtId] || BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
	              safe_format_xf(temp_val, options, wb.opts.Date1904);
	              addcell({
	                c: val.c,
	                r: val.r
	              }, temp_val, options);
	              break;
	            case 0:
	            case 512:
	              {
	                if (file_depth === 1) range = val;
	              }
	              break;
	            case 252:
	              {
	                sst = val;
	              }
	              break;
	            case 1054:
	              {
	                if (opts.biff >= 3 && opts.biff <= 4) {
	                  BIFF2FmtTable[BIFF2Fmt++] = val[1];
	                  for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if (table_fmt[b4idx] == val[1]) break;
	                  if (b4idx >= 163) SSF__load(val[1], BIFF2Fmt + 163);
	                } else SSF__load(val[1], val[0]);
	              }
	              break;
	            case 30:
	              {
	                BIFF2FmtTable[BIFF2Fmt++] = val;
	                for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if (table_fmt[b2idx] == val) break;
	                if (b2idx >= 163) SSF__load(val, BIFF2Fmt + 163);
	              }
	              break;
	            case 229:
	              merges = merges.concat(val);
	              break;
	            case 93:
	              objects[val.cmo[0]] = opts.lastobj = val;
	              break;
	            case 438:
	              opts.lastobj.TxO = val;
	              break;
	            case 127:
	              opts.lastobj.ImData = val;
	              break;
	            case 440:
	              {
	                for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
	                  cc = options.dense ? (out["!data"][rngR] || [])[rngC] : out[encode_cell({
	                    c: rngC,
	                    r: rngR
	                  })];
	                  if (cc) cc.l = val[1];
	                }
	              }
	              break;
	            case 2048:
	              {
	                for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
	                  cc = options.dense ? (out["!data"][rngR] || [])[rngC] : out[encode_cell({
	                    c: rngC,
	                    r: rngR
	                  })];
	                  if (cc && cc.l) cc.l.Tooltip = val[1];
	                }
	              }
	              break;
	            case 28:
	              {
	                cc = options.dense ? (out["!data"][val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
	                if (!cc) {
	                  if (options.dense) {
	                    if (!out["!data"][val[0].r]) out["!data"][val[0].r] = [];
	                    cc = out["!data"][val[0].r][val[0].c] = {
	                      t: "z"
	                    };
	                  } else {
	                    cc = out[encode_cell(val[0])] = {
	                      t: "z"
	                    };
	                  }
	                  range.e.r = Math.max(range.e.r, val[0].r);
	                  range.s.r = Math.min(range.s.r, val[0].r);
	                  range.e.c = Math.max(range.e.c, val[0].c);
	                  range.s.c = Math.min(range.s.c, val[0].c);
	                }
	                if (!cc.c) cc.c = [];
	                if (opts.biff <= 5 && opts.biff >= 2) cmnt = {
	                  a: "SheetJ5",
	                  t: val[1]
	                }; else {
	                  var noteobj = objects[val[2]];
	                  cmnt = {
	                    a: val[1],
	                    t: noteobj.TxO.t
	                  };
	                  if (val[3] != null && !(val[3] & 2)) cc.c.hidden = true;
	                }
	                cc.c.push(cmnt);
	              }
	              break;
	            case 2173:
	              update_xfext(XFs[val.ixfe], val.ext);
	              break;
	            case 125:
	              {
	                if (!opts.cellStyles) break;
	                while (val.e >= val.s) {
	                  colinfo[val.e--] = {
	                    width: val.w / 256,
	                    level: val.level || 0,
	                    hidden: !!(val.flags & 1)
	                  };
	                  if (!seencol) {
	                    seencol = true;
	                    find_mdw_colw(val.w / 256);
	                  }
	                  process_col(colinfo[val.e + 1]);
	                }
	              }
	              break;
	            case 520:
	              {
	                var rowobj = {};
	                if (val.level != null) {
	                  rowinfo[val.r] = rowobj;
	                  rowobj.level = val.level;
	                }
	                if (val.hidden) {
	                  rowinfo[val.r] = rowobj;
	                  rowobj.hidden = true;
	                }
	                if (val.hpt) {
	                  rowinfo[val.r] = rowobj;
	                  rowobj.hpt = val.hpt;
	                  rowobj.hpx = pt2px(val.hpt);
	                }
	              }
	              break;
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	              if (!out["!margins"]) default_margins(out["!margins"] = {});
	              out["!margins"][({
	                38: "left",
	                39: "right",
	                40: "top",
	                41: "bottom"
	              })[RecordType]] = val;
	              break;
	            case 161:
	              if (!out["!margins"]) default_margins(out["!margins"] = {});
	              out["!margins"].header = val.header;
	              out["!margins"].footer = val.footer;
	              break;
	            case 574:
	              if (val.RTL) Workbook.Views[0].RTL = true;
	              break;
	            case 146:
	              palette = val;
	              break;
	            case 2198:
	              themes = val;
	              break;
	            case 140:
	              country = val;
	              break;
	            case 442:
	              {
	                if (!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook"; else wsprops.CodeName = val || wsprops.name;
	              }
	              break;
	          }
	        } else {
	          if (!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
	          blob.l += length;
	        }
	      }
	      wb.SheetNames = keys(Directory).sort(function (a, b) {
	        return Number(a) - Number(b);
	      }).map(function (x) {
	        return Directory[x].name;
	      });
	      if (!options.bookSheets) wb.Sheets = Sheets;
	      if (!wb.SheetNames.length && Preamble["!ref"]) {
	        wb.SheetNames.push("Sheet1");
	        if (wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
	      } else wb.Preamble = Preamble;
	      if (wb.Sheets) FilterDatabases.forEach(function (r, i) {
	        wb.Sheets[wb.SheetNames[i]]["!autofilter"] = r;
	      });
	      wb.Strings = sst;
	      wb.SSF = dup(table_fmt);
	      if (opts.enc) wb.Encryption = opts.enc;
	      if (themes) wb.Themes = themes;
	      wb.Metadata = {};
	      if (country !== undefined) wb.Metadata.Country = country;
	      if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
	      wb.Workbook = Workbook;
	      return wb;
	    }
	    var PSCLSID = {
	      SI: "e0859ff2f94f6810ab9108002b27b3d9",
	      DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
	      UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
	    };
	    function parse_xls_props(cfb, props, o) {
	      var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
	      if (DSI && DSI.size > 0) try {
	        var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
	        for (var d in DocSummary) props[d] = DocSummary[d];
	      } catch (e) {
	        if (o.WTF) throw e;
	      }
	      var SI = CFB.find(cfb, "/!SummaryInformation");
	      if (SI && SI.size > 0) try {
	        var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
	        for (var s in Summary) if (props[s] == null) props[s] = Summary[s];
	      } catch (e) {
	        if (o.WTF) throw e;
	      }
	      if (props.HeadingPairs && props.TitlesOfParts) {
	        load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
	        delete props.HeadingPairs;
	        delete props.TitlesOfParts;
	      }
	    }
	    function write_xls_props(wb, cfb) {
	      var DSEntries = [], SEntries = [], CEntries = [];
	      var i = 0, Keys;
	      var DocSummaryRE = evert_key(DocSummaryPIDDSI, "n");
	      var SummaryRE = evert_key(SummaryPIDSI, "n");
	      if (wb.Props) {
	        Keys = keys(wb.Props);
	        for (i = 0; i < Keys.length; ++i) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Props[Keys[i]]]);
	      }
	      if (wb.Custprops) {
	        Keys = keys(wb.Custprops);
	        for (i = 0; i < Keys.length; ++i) if (!Object.prototype.hasOwnProperty.call(wb.Props || ({}), Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Custprops[Keys[i]]]);
	      }
	      var CEntries2 = [];
	      for (i = 0; i < CEntries.length; ++i) {
	        if (XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1) continue;
	        if (CEntries[i][1] == null) continue;
	        CEntries2.push(CEntries[i]);
	      }
	      if (SEntries.length) CFB.utils.cfb_add(cfb, "/\u0005SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
	      if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, "/\u0005DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
	    }
	    function parse_xlscfb(cfb, options) {
	      if (!options) options = {};
	      fix_read_opts(options);
	      reset_cp();
	      if (options.codepage) set_ansi(options.codepage);
	      var CompObj, WB;
	      if (cfb.FullPaths) {
	        if (CFB.find(cfb, "/encryption")) throw new Error("File is password-protected");
	        CompObj = CFB.find(cfb, "!CompObj");
	        WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
	      } else {
	        switch (options.type) {
	          case "base64":
	            cfb = s2a(Base64_decode(cfb));
	            break;
	          case "binary":
	            cfb = s2a(cfb);
	            break;
	          case "buffer":
	            break;
	          case "array":
	            if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
	            break;
	        }
	        prep_blob(cfb, 0);
	        WB = {
	          content: cfb
	        };
	      }
	      var WorkbookP;
	      var _data;
	      if (CompObj) parse_compobj(CompObj);
	      if (options.bookProps && !options.bookSheets) WorkbookP = {}; else {
	        var T = has_buf ? "buffer" : "array";
	        if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options); else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options)); else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options)); else if ((_data = CFB.find(cfb, "MN0")) && _data.content) throw new Error("Unsupported Works 4 for Mac file"); else throw new Error("Cannot find Workbook stream");
	        if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir")) WorkbookP.vbaraw = make_vba_xls(cfb);
	      }
	      var props = {};
	      if (cfb.FullPaths) parse_xls_props(cfb, props, options);
	      WorkbookP.Props = WorkbookP.Custprops = props;
	      if (options.bookFiles) WorkbookP.cfb = cfb;
	      return WorkbookP;
	    }
	    function write_xlscfb(wb, opts) {
	      var o = opts || ({});
	      var cfb = CFB.utils.cfb_new({
	        root: "R"
	      });
	      var wbpath = "/Workbook";
	      switch (o.bookType || "xls") {
	        case "xls":
	          o.bookType = "biff8";
	        case "xla":
	          if (!o.bookType) o.bookType = "xla";
	        case "biff8":
	          wbpath = "/Workbook";
	          o.biff = 8;
	          break;
	        case "biff5":
	          wbpath = "/Book";
	          o.biff = 5;
	          break;
	        default:
	          throw new Error("invalid type " + o.bookType + " for XLS CFB");
	      }
	      CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
	      if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);
	      if (o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {
	        type: typeof wb.vbaraw == "string" ? "binary" : "buffer"
	      }));
	      return cfb;
	    }
	    var XLSBRecordEnum = {
	      0: {
	        f: parse_BrtRowHdr
	      },
	      1: {
	        f: parse_BrtCellBlank
	      },
	      2: {
	        f: parse_BrtCellRk
	      },
	      3: {
	        f: parse_BrtCellError
	      },
	      4: {
	        f: parse_BrtCellBool
	      },
	      5: {
	        f: parse_BrtCellReal
	      },
	      6: {
	        f: parse_BrtCellSt
	      },
	      7: {
	        f: parse_BrtCellIsst
	      },
	      8: {
	        f: parse_BrtFmlaString
	      },
	      9: {
	        f: parse_BrtFmlaNum
	      },
	      10: {
	        f: parse_BrtFmlaBool
	      },
	      11: {
	        f: parse_BrtFmlaError
	      },
	      12: {
	        f: parse_BrtShortBlank
	      },
	      13: {
	        f: parse_BrtShortRk
	      },
	      14: {
	        f: parse_BrtShortError
	      },
	      15: {
	        f: parse_BrtShortBool
	      },
	      16: {
	        f: parse_BrtShortReal
	      },
	      17: {
	        f: parse_BrtShortSt
	      },
	      18: {
	        f: parse_BrtShortIsst
	      },
	      19: {
	        f: parse_RichStr
	      },
	      20: {},
	      21: {},
	      22: {},
	      23: {},
	      24: {},
	      25: {},
	      26: {},
	      27: {},
	      28: {},
	      29: {},
	      30: {},
	      31: {},
	      32: {},
	      33: {},
	      34: {},
	      35: {
	        T: 1
	      },
	      36: {
	        T: -1
	      },
	      37: {
	        T: 1
	      },
	      38: {
	        T: -1
	      },
	      39: {
	        f: parse_BrtName
	      },
	      40: {},
	      42: {},
	      43: {
	        f: parse_BrtFont
	      },
	      44: {
	        f: parse_BrtFmt
	      },
	      45: {
	        f: parse_BrtFill
	      },
	      46: {
	        f: parse_BrtBorder
	      },
	      47: {
	        f: parse_BrtXF
	      },
	      48: {},
	      49: {
	        f: parse_Int32LE
	      },
	      50: {},
	      51: {
	        f: parse_BrtMdb
	      },
	      52: {
	        T: 1
	      },
	      53: {
	        T: -1
	      },
	      54: {
	        T: 1
	      },
	      55: {
	        T: -1
	      },
	      56: {
	        T: 1
	      },
	      57: {
	        T: -1
	      },
	      58: {},
	      59: {},
	      60: {
	        f: parse_ColInfo
	      },
	      62: {
	        f: parse_BrtCellRString
	      },
	      63: {
	        f: parse_BrtCalcChainItem$
	      },
	      64: {
	        f: parse_BrtDVal
	      },
	      65: {},
	      66: {},
	      67: {},
	      68: {},
	      69: {},
	      70: {},
	      128: {},
	      129: {
	        T: 1
	      },
	      130: {
	        T: -1
	      },
	      131: {
	        T: 1,
	        f: parsenoop,
	        p: 0
	      },
	      132: {
	        T: -1
	      },
	      133: {
	        T: 1
	      },
	      134: {
	        T: -1
	      },
	      135: {
	        T: 1
	      },
	      136: {
	        T: -1
	      },
	      137: {
	        T: 1,
	        f: parse_BrtBeginWsView
	      },
	      138: {
	        T: -1
	      },
	      139: {
	        T: 1
	      },
	      140: {
	        T: -1
	      },
	      141: {
	        T: 1
	      },
	      142: {
	        T: -1
	      },
	      143: {
	        T: 1
	      },
	      144: {
	        T: -1
	      },
	      145: {
	        T: 1
	      },
	      146: {
	        T: -1
	      },
	      147: {
	        f: parse_BrtWsProp
	      },
	      148: {
	        f: parse_BrtWsDim,
	        p: 16
	      },
	      151: {
	        f: parse_BrtPane
	      },
	      152: {},
	      153: {
	        f: parse_BrtWbProp
	      },
	      154: {},
	      155: {},
	      156: {
	        f: parse_BrtBundleSh
	      },
	      157: {},
	      158: {},
	      159: {
	        T: 1,
	        f: parse_BrtBeginSst
	      },
	      160: {
	        T: -1
	      },
	      161: {
	        T: 1,
	        f: parse_UncheckedRfX
	      },
	      162: {
	        T: -1
	      },
	      163: {
	        T: 1
	      },
	      164: {
	        T: -1
	      },
	      165: {
	        T: 1
	      },
	      166: {
	        T: -1
	      },
	      167: {},
	      168: {},
	      169: {},
	      170: {},
	      171: {},
	      172: {
	        T: 1
	      },
	      173: {
	        T: -1
	      },
	      174: {},
	      175: {},
	      176: {
	        f: parse_BrtMergeCell
	      },
	      177: {
	        T: 1
	      },
	      178: {
	        T: -1
	      },
	      179: {
	        T: 1
	      },
	      180: {
	        T: -1
	      },
	      181: {
	        T: 1
	      },
	      182: {
	        T: -1
	      },
	      183: {
	        T: 1
	      },
	      184: {
	        T: -1
	      },
	      185: {
	        T: 1
	      },
	      186: {
	        T: -1
	      },
	      187: {
	        T: 1
	      },
	      188: {
	        T: -1
	      },
	      189: {
	        T: 1
	      },
	      190: {
	        T: -1
	      },
	      191: {
	        T: 1
	      },
	      192: {
	        T: -1
	      },
	      193: {
	        T: 1
	      },
	      194: {
	        T: -1
	      },
	      195: {
	        T: 1
	      },
	      196: {
	        T: -1
	      },
	      197: {
	        T: 1
	      },
	      198: {
	        T: -1
	      },
	      199: {
	        T: 1
	      },
	      200: {
	        T: -1
	      },
	      201: {
	        T: 1
	      },
	      202: {
	        T: -1
	      },
	      203: {
	        T: 1
	      },
	      204: {
	        T: -1
	      },
	      205: {
	        T: 1
	      },
	      206: {
	        T: -1
	      },
	      207: {
	        T: 1
	      },
	      208: {
	        T: -1
	      },
	      209: {
	        T: 1
	      },
	      210: {
	        T: -1
	      },
	      211: {
	        T: 1
	      },
	      212: {
	        T: -1
	      },
	      213: {
	        T: 1
	      },
	      214: {
	        T: -1
	      },
	      215: {
	        T: 1
	      },
	      216: {
	        T: -1
	      },
	      217: {
	        T: 1
	      },
	      218: {
	        T: -1
	      },
	      219: {
	        T: 1
	      },
	      220: {
	        T: -1
	      },
	      221: {
	        T: 1
	      },
	      222: {
	        T: -1
	      },
	      223: {
	        T: 1
	      },
	      224: {
	        T: -1
	      },
	      225: {
	        T: 1
	      },
	      226: {
	        T: -1
	      },
	      227: {
	        T: 1
	      },
	      228: {
	        T: -1
	      },
	      229: {
	        T: 1
	      },
	      230: {
	        T: -1
	      },
	      231: {
	        T: 1
	      },
	      232: {
	        T: -1
	      },
	      233: {
	        T: 1
	      },
	      234: {
	        T: -1
	      },
	      235: {
	        T: 1
	      },
	      236: {
	        T: -1
	      },
	      237: {
	        T: 1
	      },
	      238: {
	        T: -1
	      },
	      239: {
	        T: 1
	      },
	      240: {
	        T: -1
	      },
	      241: {
	        T: 1
	      },
	      242: {
	        T: -1
	      },
	      243: {
	        T: 1
	      },
	      244: {
	        T: -1
	      },
	      245: {
	        T: 1
	      },
	      246: {
	        T: -1
	      },
	      247: {
	        T: 1
	      },
	      248: {
	        T: -1
	      },
	      249: {
	        T: 1
	      },
	      250: {
	        T: -1
	      },
	      251: {
	        T: 1
	      },
	      252: {
	        T: -1
	      },
	      253: {
	        T: 1
	      },
	      254: {
	        T: -1
	      },
	      255: {
	        T: 1
	      },
	      256: {
	        T: -1
	      },
	      257: {
	        T: 1
	      },
	      258: {
	        T: -1
	      },
	      259: {
	        T: 1
	      },
	      260: {
	        T: -1
	      },
	      261: {
	        T: 1
	      },
	      262: {
	        T: -1
	      },
	      263: {
	        T: 1
	      },
	      264: {
	        T: -1
	      },
	      265: {
	        T: 1
	      },
	      266: {
	        T: -1
	      },
	      267: {
	        T: 1
	      },
	      268: {
	        T: -1
	      },
	      269: {
	        T: 1
	      },
	      270: {
	        T: -1
	      },
	      271: {
	        T: 1
	      },
	      272: {
	        T: -1
	      },
	      273: {
	        T: 1
	      },
	      274: {
	        T: -1
	      },
	      275: {
	        T: 1
	      },
	      276: {
	        T: -1
	      },
	      277: {},
	      278: {
	        T: 1
	      },
	      279: {
	        T: -1
	      },
	      280: {
	        T: 1
	      },
	      281: {
	        T: -1
	      },
	      282: {
	        T: 1
	      },
	      283: {
	        T: 1
	      },
	      284: {
	        T: -1
	      },
	      285: {
	        T: 1
	      },
	      286: {
	        T: -1
	      },
	      287: {
	        T: 1
	      },
	      288: {
	        T: -1
	      },
	      289: {
	        T: 1
	      },
	      290: {
	        T: -1
	      },
	      291: {
	        T: 1
	      },
	      292: {
	        T: -1
	      },
	      293: {
	        T: 1
	      },
	      294: {
	        T: -1
	      },
	      295: {
	        T: 1
	      },
	      296: {
	        T: -1
	      },
	      297: {
	        T: 1
	      },
	      298: {
	        T: -1
	      },
	      299: {
	        T: 1
	      },
	      300: {
	        T: -1
	      },
	      301: {
	        T: 1
	      },
	      302: {
	        T: -1
	      },
	      303: {
	        T: 1
	      },
	      304: {
	        T: -1
	      },
	      305: {
	        T: 1
	      },
	      306: {
	        T: -1
	      },
	      307: {
	        T: 1
	      },
	      308: {
	        T: -1
	      },
	      309: {
	        T: 1
	      },
	      310: {
	        T: -1
	      },
	      311: {
	        T: 1
	      },
	      312: {
	        T: -1
	      },
	      313: {
	        T: -1
	      },
	      314: {
	        T: 1
	      },
	      315: {
	        T: -1
	      },
	      316: {
	        T: 1
	      },
	      317: {
	        T: -1
	      },
	      318: {
	        T: 1
	      },
	      319: {
	        T: -1
	      },
	      320: {
	        T: 1
	      },
	      321: {
	        T: -1
	      },
	      322: {
	        T: 1
	      },
	      323: {
	        T: -1
	      },
	      324: {
	        T: 1
	      },
	      325: {
	        T: -1
	      },
	      326: {
	        T: 1
	      },
	      327: {
	        T: -1
	      },
	      328: {
	        T: 1
	      },
	      329: {
	        T: -1
	      },
	      330: {
	        T: 1
	      },
	      331: {
	        T: -1
	      },
	      332: {
	        T: 1
	      },
	      333: {
	        T: -1
	      },
	      334: {
	        T: 1
	      },
	      335: {
	        f: parse_BrtMdtinfo
	      },
	      336: {
	        T: -1
	      },
	      337: {
	        f: parse_BrtBeginEsmdb,
	        T: 1
	      },
	      338: {
	        T: -1
	      },
	      339: {
	        T: 1
	      },
	      340: {
	        T: -1
	      },
	      341: {
	        T: 1
	      },
	      342: {
	        T: -1
	      },
	      343: {
	        T: 1
	      },
	      344: {
	        T: -1
	      },
	      345: {
	        T: 1
	      },
	      346: {
	        T: -1
	      },
	      347: {
	        T: 1
	      },
	      348: {
	        T: -1
	      },
	      349: {
	        T: 1
	      },
	      350: {
	        T: -1
	      },
	      351: {},
	      352: {},
	      353: {
	        T: 1
	      },
	      354: {
	        T: -1
	      },
	      355: {
	        f: parse_RelID
	      },
	      357: {},
	      358: {},
	      359: {},
	      360: {
	        T: 1
	      },
	      361: {},
	      362: {
	        f: parse_ExternSheet
	      },
	      363: {},
	      364: {},
	      366: {},
	      367: {},
	      368: {},
	      369: {},
	      370: {},
	      371: {},
	      372: {
	        T: 1
	      },
	      373: {
	        T: -1
	      },
	      374: {
	        T: 1
	      },
	      375: {
	        T: -1
	      },
	      376: {
	        T: 1
	      },
	      377: {
	        T: -1
	      },
	      378: {
	        T: 1
	      },
	      379: {
	        T: -1
	      },
	      380: {
	        T: 1
	      },
	      381: {
	        T: -1
	      },
	      382: {
	        T: 1
	      },
	      383: {
	        T: -1
	      },
	      384: {
	        T: 1
	      },
	      385: {
	        T: -1
	      },
	      386: {
	        T: 1
	      },
	      387: {
	        T: -1
	      },
	      388: {
	        T: 1
	      },
	      389: {
	        T: -1
	      },
	      390: {
	        T: 1
	      },
	      391: {
	        T: -1
	      },
	      392: {
	        T: 1
	      },
	      393: {
	        T: -1
	      },
	      394: {
	        T: 1
	      },
	      395: {
	        T: -1
	      },
	      396: {},
	      397: {},
	      398: {},
	      399: {},
	      400: {},
	      401: {
	        T: 1
	      },
	      403: {},
	      404: {},
	      405: {},
	      406: {},
	      407: {},
	      408: {},
	      409: {},
	      410: {},
	      411: {},
	      412: {},
	      413: {},
	      414: {},
	      415: {},
	      416: {},
	      417: {},
	      418: {},
	      419: {},
	      420: {},
	      421: {},
	      422: {
	        T: 1
	      },
	      423: {
	        T: 1
	      },
	      424: {
	        T: -1
	      },
	      425: {
	        T: -1
	      },
	      426: {
	        f: parse_BrtArrFmla
	      },
	      427: {
	        f: parse_BrtShrFmla
	      },
	      428: {},
	      429: {
	        T: 1
	      },
	      430: {
	        T: -1
	      },
	      431: {
	        T: 1
	      },
	      432: {
	        T: -1
	      },
	      433: {
	        T: 1
	      },
	      434: {
	        T: -1
	      },
	      435: {
	        T: 1
	      },
	      436: {
	        T: -1
	      },
	      437: {
	        T: 1
	      },
	      438: {
	        T: -1
	      },
	      439: {
	        T: 1
	      },
	      440: {
	        T: -1
	      },
	      441: {
	        T: 1
	      },
	      442: {
	        T: -1
	      },
	      443: {
	        T: 1
	      },
	      444: {
	        T: -1
	      },
	      445: {
	        T: 1
	      },
	      446: {
	        T: -1
	      },
	      447: {
	        T: 1
	      },
	      448: {
	        T: -1
	      },
	      449: {
	        T: 1
	      },
	      450: {
	        T: -1
	      },
	      451: {
	        T: 1
	      },
	      452: {
	        T: -1
	      },
	      453: {
	        T: 1
	      },
	      454: {
	        T: -1
	      },
	      455: {
	        T: 1
	      },
	      456: {
	        T: -1
	      },
	      457: {
	        T: 1
	      },
	      458: {
	        T: -1
	      },
	      459: {
	        T: 1
	      },
	      460: {
	        T: -1
	      },
	      461: {
	        T: 1
	      },
	      462: {
	        T: -1
	      },
	      463: {
	        T: 1
	      },
	      464: {
	        T: -1
	      },
	      465: {
	        T: 1
	      },
	      466: {
	        T: -1
	      },
	      467: {
	        T: 1
	      },
	      468: {
	        T: -1
	      },
	      469: {
	        T: 1
	      },
	      470: {
	        T: -1
	      },
	      471: {},
	      472: {},
	      473: {
	        T: 1
	      },
	      474: {
	        T: -1
	      },
	      475: {},
	      476: {
	        f: parse_BrtMargins
	      },
	      477: {},
	      478: {},
	      479: {
	        T: 1
	      },
	      480: {
	        T: -1
	      },
	      481: {
	        T: 1
	      },
	      482: {
	        T: -1
	      },
	      483: {
	        T: 1
	      },
	      484: {
	        T: -1
	      },
	      485: {
	        f: parse_BrtWsFmtInfo
	      },
	      486: {
	        T: 1
	      },
	      487: {
	        T: -1
	      },
	      488: {
	        T: 1
	      },
	      489: {
	        T: -1
	      },
	      490: {
	        T: 1
	      },
	      491: {
	        T: -1
	      },
	      492: {
	        T: 1
	      },
	      493: {
	        T: -1
	      },
	      494: {
	        f: parse_BrtHLink
	      },
	      495: {
	        T: 1
	      },
	      496: {
	        T: -1
	      },
	      497: {
	        T: 1
	      },
	      498: {
	        T: -1
	      },
	      499: {},
	      500: {
	        T: 1
	      },
	      501: {
	        T: -1
	      },
	      502: {
	        T: 1
	      },
	      503: {
	        T: -1
	      },
	      504: {},
	      505: {
	        T: 1
	      },
	      506: {
	        T: -1
	      },
	      507: {},
	      508: {
	        T: 1
	      },
	      509: {
	        T: -1
	      },
	      510: {
	        T: 1
	      },
	      511: {
	        T: -1
	      },
	      512: {},
	      513: {},
	      514: {
	        T: 1
	      },
	      515: {
	        T: -1
	      },
	      516: {
	        T: 1
	      },
	      517: {
	        T: -1
	      },
	      518: {
	        T: 1
	      },
	      519: {
	        T: -1
	      },
	      520: {
	        T: 1
	      },
	      521: {
	        T: -1
	      },
	      522: {},
	      523: {},
	      524: {},
	      525: {},
	      526: {},
	      527: {},
	      528: {
	        T: 1
	      },
	      529: {
	        T: -1
	      },
	      530: {
	        T: 1
	      },
	      531: {
	        T: -1
	      },
	      532: {
	        T: 1
	      },
	      533: {
	        T: -1
	      },
	      534: {},
	      535: {},
	      536: {},
	      537: {},
	      538: {
	        T: 1
	      },
	      539: {
	        T: -1
	      },
	      540: {
	        T: 1
	      },
	      541: {
	        T: -1
	      },
	      542: {
	        T: 1
	      },
	      548: {},
	      549: {},
	      550: {
	        f: parse_RelID
	      },
	      551: {
	        f: parse_XLNullableWideString
	      },
	      552: {},
	      553: {},
	      554: {
	        T: 1
	      },
	      555: {
	        T: -1
	      },
	      556: {
	        T: 1
	      },
	      557: {
	        T: -1
	      },
	      558: {
	        T: 1
	      },
	      559: {
	        T: -1
	      },
	      560: {
	        T: 1
	      },
	      561: {
	        T: -1
	      },
	      562: {},
	      564: {},
	      565: {
	        T: 1
	      },
	      566: {
	        T: -1
	      },
	      569: {
	        T: 1
	      },
	      570: {
	        T: -1
	      },
	      572: {},
	      573: {
	        T: 1
	      },
	      574: {
	        T: -1
	      },
	      577: {},
	      578: {},
	      579: {},
	      580: {},
	      581: {},
	      582: {},
	      583: {},
	      584: {},
	      585: {},
	      586: {},
	      587: {},
	      588: {
	        T: -1
	      },
	      589: {},
	      590: {
	        T: 1
	      },
	      591: {
	        T: -1
	      },
	      592: {
	        T: 1
	      },
	      593: {
	        T: -1
	      },
	      594: {
	        T: 1
	      },
	      595: {
	        T: -1
	      },
	      596: {},
	      597: {
	        T: 1
	      },
	      598: {
	        T: -1
	      },
	      599: {
	        T: 1
	      },
	      600: {
	        T: -1
	      },
	      601: {
	        T: 1
	      },
	      602: {
	        T: -1
	      },
	      603: {
	        T: 1
	      },
	      604: {
	        T: -1
	      },
	      605: {
	        T: 1
	      },
	      606: {
	        T: -1
	      },
	      607: {},
	      608: {
	        T: 1
	      },
	      609: {
	        T: -1
	      },
	      610: {},
	      611: {
	        T: 1
	      },
	      612: {
	        T: -1
	      },
	      613: {
	        T: 1
	      },
	      614: {
	        T: -1
	      },
	      615: {
	        T: 1
	      },
	      616: {
	        T: -1
	      },
	      617: {
	        T: 1
	      },
	      618: {
	        T: -1
	      },
	      619: {
	        T: 1
	      },
	      620: {
	        T: -1
	      },
	      625: {},
	      626: {
	        T: 1
	      },
	      627: {
	        T: -1
	      },
	      628: {
	        T: 1
	      },
	      629: {
	        T: -1
	      },
	      630: {
	        T: 1
	      },
	      631: {
	        T: -1
	      },
	      632: {
	        f: parse_BrtCommentAuthor
	      },
	      633: {
	        T: 1
	      },
	      634: {
	        T: -1
	      },
	      635: {
	        T: 1,
	        f: parse_BrtBeginComment
	      },
	      636: {
	        T: -1
	      },
	      637: {
	        f: parse_BrtCommentText
	      },
	      638: {
	        T: 1
	      },
	      639: {},
	      640: {
	        T: -1
	      },
	      641: {
	        T: 1
	      },
	      642: {
	        T: -1
	      },
	      643: {
	        T: 1
	      },
	      644: {},
	      645: {
	        T: -1
	      },
	      646: {
	        T: 1
	      },
	      648: {
	        T: 1
	      },
	      649: {},
	      650: {
	        T: -1
	      },
	      651: {
	        f: parse_BrtCsProp
	      },
	      652: {},
	      653: {
	        T: 1
	      },
	      654: {
	        T: -1
	      },
	      655: {
	        T: 1
	      },
	      656: {
	        T: -1
	      },
	      657: {
	        T: 1
	      },
	      658: {
	        T: -1
	      },
	      659: {},
	      660: {
	        T: 1
	      },
	      661: {},
	      662: {
	        T: -1
	      },
	      663: {},
	      664: {
	        T: 1
	      },
	      665: {},
	      666: {
	        T: -1
	      },
	      667: {},
	      668: {},
	      669: {},
	      671: {
	        T: 1
	      },
	      672: {
	        T: -1
	      },
	      673: {
	        T: 1
	      },
	      674: {
	        T: -1
	      },
	      675: {},
	      676: {},
	      677: {},
	      678: {},
	      679: {},
	      680: {},
	      681: {},
	      1024: {},
	      1025: {},
	      1026: {
	        T: 1
	      },
	      1027: {
	        T: -1
	      },
	      1028: {
	        T: 1
	      },
	      1029: {
	        T: -1
	      },
	      1030: {},
	      1031: {
	        T: 1
	      },
	      1032: {
	        T: -1
	      },
	      1033: {
	        T: 1
	      },
	      1034: {
	        T: -1
	      },
	      1035: {},
	      1036: {},
	      1037: {},
	      1038: {
	        T: 1
	      },
	      1039: {
	        T: -1
	      },
	      1040: {},
	      1041: {
	        T: 1
	      },
	      1042: {
	        T: -1
	      },
	      1043: {},
	      1044: {},
	      1045: {},
	      1046: {
	        T: 1
	      },
	      1047: {
	        T: -1
	      },
	      1048: {
	        T: 1
	      },
	      1049: {
	        T: -1
	      },
	      1050: {},
	      1051: {
	        T: 1
	      },
	      1052: {
	        T: 1
	      },
	      1053: {
	        f: parse_BrtDVal14
	      },
	      1054: {
	        T: 1
	      },
	      1055: {},
	      1056: {
	        T: 1
	      },
	      1057: {
	        T: -1
	      },
	      1058: {
	        T: 1
	      },
	      1059: {
	        T: -1
	      },
	      1061: {},
	      1062: {
	        T: 1
	      },
	      1063: {
	        T: -1
	      },
	      1064: {
	        T: 1
	      },
	      1065: {
	        T: -1
	      },
	      1066: {
	        T: 1
	      },
	      1067: {
	        T: -1
	      },
	      1068: {
	        T: 1
	      },
	      1069: {
	        T: -1
	      },
	      1070: {
	        T: 1
	      },
	      1071: {
	        T: -1
	      },
	      1072: {
	        T: 1
	      },
	      1073: {
	        T: -1
	      },
	      1075: {
	        T: 1
	      },
	      1076: {
	        T: -1
	      },
	      1077: {
	        T: 1
	      },
	      1078: {
	        T: -1
	      },
	      1079: {
	        T: 1
	      },
	      1080: {
	        T: -1
	      },
	      1081: {
	        T: 1
	      },
	      1082: {
	        T: -1
	      },
	      1083: {
	        T: 1
	      },
	      1084: {
	        T: -1
	      },
	      1085: {},
	      1086: {
	        T: 1
	      },
	      1087: {
	        T: -1
	      },
	      1088: {
	        T: 1
	      },
	      1089: {
	        T: -1
	      },
	      1090: {
	        T: 1
	      },
	      1091: {
	        T: -1
	      },
	      1092: {
	        T: 1
	      },
	      1093: {
	        T: -1
	      },
	      1094: {
	        T: 1
	      },
	      1095: {
	        T: -1
	      },
	      1096: {},
	      1097: {
	        T: 1
	      },
	      1098: {},
	      1099: {
	        T: -1
	      },
	      1100: {
	        T: 1
	      },
	      1101: {
	        T: -1
	      },
	      1102: {},
	      1103: {},
	      1104: {},
	      1105: {},
	      1111: {},
	      1112: {},
	      1113: {
	        T: 1
	      },
	      1114: {
	        T: -1
	      },
	      1115: {
	        T: 1
	      },
	      1116: {
	        T: -1
	      },
	      1117: {},
	      1118: {
	        T: 1
	      },
	      1119: {
	        T: -1
	      },
	      1120: {
	        T: 1
	      },
	      1121: {
	        T: -1
	      },
	      1122: {
	        T: 1
	      },
	      1123: {
	        T: -1
	      },
	      1124: {
	        T: 1
	      },
	      1125: {
	        T: -1
	      },
	      1126: {},
	      1128: {
	        T: 1
	      },
	      1129: {
	        T: -1
	      },
	      1130: {},
	      1131: {
	        T: 1
	      },
	      1132: {
	        T: -1
	      },
	      1133: {
	        T: 1
	      },
	      1134: {
	        T: -1
	      },
	      1135: {
	        T: 1
	      },
	      1136: {
	        T: -1
	      },
	      1137: {
	        T: 1
	      },
	      1138: {
	        T: -1
	      },
	      1139: {
	        T: 1
	      },
	      1140: {
	        T: -1
	      },
	      1141: {},
	      1142: {
	        T: 1
	      },
	      1143: {
	        T: -1
	      },
	      1144: {
	        T: 1
	      },
	      1145: {
	        T: -1
	      },
	      1146: {},
	      1147: {
	        T: 1
	      },
	      1148: {
	        T: -1
	      },
	      1149: {
	        T: 1
	      },
	      1150: {
	        T: -1
	      },
	      1152: {
	        T: 1
	      },
	      1153: {
	        T: -1
	      },
	      1154: {
	        T: -1
	      },
	      1155: {
	        T: -1
	      },
	      1156: {
	        T: -1
	      },
	      1157: {
	        T: 1
	      },
	      1158: {
	        T: -1
	      },
	      1159: {
	        T: 1
	      },
	      1160: {
	        T: -1
	      },
	      1161: {
	        T: 1
	      },
	      1162: {
	        T: -1
	      },
	      1163: {
	        T: 1
	      },
	      1164: {
	        T: -1
	      },
	      1165: {
	        T: 1
	      },
	      1166: {
	        T: -1
	      },
	      1167: {
	        T: 1
	      },
	      1168: {
	        T: -1
	      },
	      1169: {
	        T: 1
	      },
	      1170: {
	        T: -1
	      },
	      1171: {},
	      1172: {
	        T: 1
	      },
	      1173: {
	        T: -1
	      },
	      1177: {},
	      1178: {
	        T: 1
	      },
	      1180: {},
	      1181: {},
	      1182: {},
	      2048: {
	        T: 1
	      },
	      2049: {
	        T: -1
	      },
	      2050: {},
	      2051: {
	        T: 1
	      },
	      2052: {
	        T: -1
	      },
	      2053: {},
	      2054: {},
	      2055: {
	        T: 1
	      },
	      2056: {
	        T: -1
	      },
	      2057: {
	        T: 1
	      },
	      2058: {
	        T: -1
	      },
	      2060: {},
	      2067: {},
	      2068: {
	        T: 1
	      },
	      2069: {
	        T: -1
	      },
	      2070: {},
	      2071: {},
	      2072: {
	        T: 1
	      },
	      2073: {
	        T: -1
	      },
	      2075: {},
	      2076: {},
	      2077: {
	        T: 1
	      },
	      2078: {
	        T: -1
	      },
	      2079: {},
	      2080: {
	        T: 1
	      },
	      2081: {
	        T: -1
	      },
	      2082: {},
	      2083: {
	        T: 1
	      },
	      2084: {
	        T: -1
	      },
	      2085: {
	        T: 1
	      },
	      2086: {
	        T: -1
	      },
	      2087: {
	        T: 1
	      },
	      2088: {
	        T: -1
	      },
	      2089: {
	        T: 1
	      },
	      2090: {
	        T: -1
	      },
	      2091: {},
	      2092: {},
	      2093: {
	        T: 1
	      },
	      2094: {
	        T: -1
	      },
	      2095: {},
	      2096: {
	        T: 1
	      },
	      2097: {
	        T: -1
	      },
	      2098: {
	        T: 1
	      },
	      2099: {
	        T: -1
	      },
	      2100: {
	        T: 1
	      },
	      2101: {
	        T: -1
	      },
	      2102: {},
	      2103: {
	        T: 1
	      },
	      2104: {
	        T: -1
	      },
	      2105: {},
	      2106: {
	        T: 1
	      },
	      2107: {
	        T: -1
	      },
	      2108: {},
	      2109: {
	        T: 1
	      },
	      2110: {
	        T: -1
	      },
	      2111: {
	        T: 1
	      },
	      2112: {
	        T: -1
	      },
	      2113: {
	        T: 1
	      },
	      2114: {
	        T: -1
	      },
	      2115: {},
	      2116: {},
	      2117: {},
	      2118: {
	        T: 1
	      },
	      2119: {
	        T: -1
	      },
	      2120: {},
	      2121: {
	        T: 1
	      },
	      2122: {
	        T: -1
	      },
	      2123: {
	        T: 1
	      },
	      2124: {
	        T: -1
	      },
	      2125: {},
	      2126: {
	        T: 1
	      },
	      2127: {
	        T: -1
	      },
	      2128: {},
	      2129: {
	        T: 1
	      },
	      2130: {
	        T: -1
	      },
	      2131: {
	        T: 1
	      },
	      2132: {
	        T: -1
	      },
	      2133: {
	        T: 1
	      },
	      2134: {},
	      2135: {},
	      2136: {},
	      2137: {
	        T: 1
	      },
	      2138: {
	        T: -1
	      },
	      2139: {
	        T: 1
	      },
	      2140: {
	        T: -1
	      },
	      2141: {},
	      3072: {},
	      3073: {},
	      4096: {
	        T: 1
	      },
	      4097: {
	        T: -1
	      },
	      5002: {
	        T: 1
	      },
	      5003: {
	        T: -1
	      },
	      5081: {
	        T: 1
	      },
	      5082: {
	        T: -1
	      },
	      5083: {},
	      5084: {
	        T: 1
	      },
	      5085: {
	        T: -1
	      },
	      5086: {
	        T: 1
	      },
	      5087: {
	        T: -1
	      },
	      5088: {},
	      5089: {},
	      5090: {},
	      5092: {
	        T: 1
	      },
	      5093: {
	        T: -1
	      },
	      5094: {},
	      5095: {
	        T: 1
	      },
	      5096: {
	        T: -1
	      },
	      5097: {},
	      5099: {},
	      65535: {
	        n: ""
	      }
	    };
	    var XLSRecordEnum = {
	      6: {
	        f: parse_Formula
	      },
	      10: {
	        f: parsenoop2
	      },
	      12: {
	        f: parseuint16
	      },
	      13: {
	        f: parseuint16
	      },
	      14: {
	        f: parsebool
	      },
	      15: {
	        f: parsebool
	      },
	      16: {
	        f: parse_Xnum
	      },
	      17: {
	        f: parsebool
	      },
	      18: {
	        f: parsebool
	      },
	      19: {
	        f: parseuint16
	      },
	      20: {
	        f: parse_XLHeaderFooter
	      },
	      21: {
	        f: parse_XLHeaderFooter
	      },
	      23: {
	        f: parse_ExternSheet
	      },
	      24: {
	        f: parse_Lbl
	      },
	      25: {
	        f: parsebool
	      },
	      26: {},
	      27: {},
	      28: {
	        f: parse_Note
	      },
	      29: {},
	      34: {
	        f: parsebool
	      },
	      35: {
	        f: parse_ExternName
	      },
	      38: {
	        f: parse_Xnum
	      },
	      39: {
	        f: parse_Xnum
	      },
	      40: {
	        f: parse_Xnum
	      },
	      41: {
	        f: parse_Xnum
	      },
	      42: {
	        f: parsebool
	      },
	      43: {
	        f: parsebool
	      },
	      47: {
	        f: parse_FilePass
	      },
	      49: {
	        f: parse_Font
	      },
	      51: {
	        f: parseuint16
	      },
	      60: {},
	      61: {
	        f: parse_Window1
	      },
	      64: {
	        f: parsebool
	      },
	      65: {
	        f: parse_Pane
	      },
	      66: {
	        f: parseuint16
	      },
	      77: {},
	      80: {},
	      81: {},
	      82: {},
	      85: {
	        f: parseuint16
	      },
	      89: {},
	      90: {},
	      91: {},
	      92: {
	        f: parse_WriteAccess
	      },
	      93: {
	        f: parse_Obj
	      },
	      94: {},
	      95: {
	        f: parsebool
	      },
	      96: {},
	      97: {},
	      99: {
	        f: parsebool
	      },
	      125: {
	        f: parse_ColInfo
	      },
	      128: {
	        f: parse_Guts
	      },
	      129: {
	        f: parse_WsBool
	      },
	      130: {
	        f: parseuint16
	      },
	      131: {
	        f: parsebool
	      },
	      132: {
	        f: parsebool
	      },
	      133: {
	        f: parse_BoundSheet8
	      },
	      134: {},
	      140: {
	        f: parse_Country
	      },
	      141: {
	        f: parseuint16
	      },
	      144: {},
	      146: {
	        f: parse_Palette
	      },
	      151: {},
	      152: {},
	      153: {},
	      154: {},
	      155: {},
	      156: {
	        f: parseuint16
	      },
	      157: {},
	      158: {},
	      160: {
	        f: parse_Scl
	      },
	      161: {
	        f: parse_Setup
	      },
	      174: {},
	      175: {},
	      176: {},
	      177: {},
	      178: {},
	      180: {},
	      181: {},
	      182: {},
	      184: {},
	      185: {},
	      189: {
	        f: parse_MulRk
	      },
	      190: {
	        f: parse_MulBlank
	      },
	      193: {
	        f: parsenoop2
	      },
	      197: {},
	      198: {},
	      199: {},
	      200: {},
	      201: {},
	      202: {
	        f: parsebool
	      },
	      203: {},
	      204: {},
	      205: {},
	      206: {},
	      207: {},
	      208: {},
	      209: {},
	      210: {},
	      211: {},
	      213: {},
	      215: {},
	      216: {},
	      217: {},
	      218: {
	        f: parseuint16
	      },
	      220: {},
	      221: {
	        f: parsebool
	      },
	      222: {},
	      224: {
	        f: parse_XF
	      },
	      225: {
	        f: parse_InterfaceHdr
	      },
	      226: {
	        f: parsenoop2
	      },
	      227: {},
	      229: {
	        f: parse_MergeCells
	      },
	      233: {},
	      235: {},
	      236: {},
	      237: {},
	      239: {},
	      240: {},
	      241: {},
	      242: {},
	      244: {},
	      245: {},
	      246: {},
	      247: {},
	      248: {},
	      249: {},
	      251: {},
	      252: {
	        f: parse_SST
	      },
	      253: {
	        f: parse_LabelSst
	      },
	      255: {
	        f: parse_ExtSST
	      },
	      256: {},
	      259: {},
	      290: {},
	      311: {},
	      312: {},
	      315: {},
	      317: {
	        f: parseuint16a
	      },
	      318: {},
	      319: {},
	      320: {},
	      330: {},
	      331: {},
	      333: {},
	      334: {},
	      335: {},
	      336: {},
	      337: {},
	      338: {},
	      339: {},
	      340: {},
	      351: {},
	      352: {
	        f: parsebool
	      },
	      353: {
	        f: parsenoop2
	      },
	      401: {},
	      402: {},
	      403: {},
	      404: {},
	      405: {},
	      406: {},
	      407: {},
	      408: {},
	      425: {},
	      426: {},
	      427: {},
	      428: {},
	      429: {},
	      430: {
	        f: parse_SupBook
	      },
	      431: {
	        f: parsebool
	      },
	      432: {},
	      433: {},
	      434: {},
	      437: {},
	      438: {
	        f: parse_TxO
	      },
	      439: {
	        f: parsebool
	      },
	      440: {
	        f: parse_HLink
	      },
	      441: {},
	      442: {
	        f: parse_XLUnicodeString
	      },
	      443: {},
	      444: {
	        f: parseuint16
	      },
	      445: {},
	      446: {},
	      448: {
	        f: parsenoop2
	      },
	      449: {
	        f: parse_RecalcId,
	        r: 2
	      },
	      450: {
	        f: parsenoop2
	      },
	      512: {
	        f: parse_Dimensions
	      },
	      513: {
	        f: parse_Blank
	      },
	      515: {
	        f: parse_Number
	      },
	      516: {
	        f: parse_Label
	      },
	      517: {
	        f: parse_BoolErr
	      },
	      519: {
	        f: parse_String
	      },
	      520: {
	        f: parse_Row
	      },
	      523: {},
	      545: {
	        f: parse_Array
	      },
	      549: {
	        f: parse_DefaultRowHeight
	      },
	      566: {},
	      574: {
	        f: parse_Window2
	      },
	      638: {
	        f: parse_RK
	      },
	      659: {},
	      1048: {},
	      1054: {
	        f: parse_Format
	      },
	      1084: {},
	      1212: {
	        f: parse_ShrFmla
	      },
	      2048: {
	        f: parse_HLinkTooltip
	      },
	      2049: {},
	      2050: {},
	      2051: {},
	      2052: {},
	      2053: {},
	      2054: {},
	      2055: {},
	      2056: {},
	      2057: {
	        f: parse_BOF
	      },
	      2058: {},
	      2059: {},
	      2060: {},
	      2061: {},
	      2062: {},
	      2063: {},
	      2064: {},
	      2066: {},
	      2067: {},
	      2128: {},
	      2129: {},
	      2130: {},
	      2131: {},
	      2132: {},
	      2133: {},
	      2134: {},
	      2135: {},
	      2136: {},
	      2137: {},
	      2138: {},
	      2146: {},
	      2147: {
	        r: 12
	      },
	      2148: {},
	      2149: {},
	      2150: {},
	      2151: {
	        f: parsenoop2
	      },
	      2152: {},
	      2154: {},
	      2155: {},
	      2156: {},
	      2161: {},
	      2162: {},
	      2164: {},
	      2165: {},
	      2166: {},
	      2167: {},
	      2168: {},
	      2169: {},
	      2170: {},
	      2171: {},
	      2172: {
	        f: parse_XFCRC,
	        r: 12
	      },
	      2173: {
	        f: parse_XFExt,
	        r: 12
	      },
	      2174: {},
	      2175: {},
	      2180: {},
	      2181: {},
	      2182: {},
	      2183: {},
	      2184: {},
	      2185: {},
	      2186: {},
	      2187: {},
	      2188: {
	        f: parsebool,
	        r: 12
	      },
	      2189: {},
	      2190: {
	        r: 12
	      },
	      2191: {},
	      2192: {},
	      2194: {},
	      2195: {},
	      2196: {
	        f: parse_NameCmt,
	        r: 12
	      },
	      2197: {},
	      2198: {
	        f: parse_Theme,
	        r: 12
	      },
	      2199: {},
	      2200: {},
	      2201: {},
	      2202: {
	        f: parse_MTRSettings,
	        r: 12
	      },
	      2203: {
	        f: parsenoop2
	      },
	      2204: {},
	      2205: {},
	      2206: {},
	      2207: {},
	      2211: {
	        f: parse_ForceFullCalculation
	      },
	      2212: {},
	      2213: {},
	      2214: {},
	      2215: {},
	      4097: {},
	      4098: {},
	      4099: {},
	      4102: {},
	      4103: {},
	      4105: {},
	      4106: {},
	      4107: {},
	      4108: {},
	      4109: {},
	      4116: {},
	      4117: {},
	      4118: {},
	      4119: {},
	      4120: {},
	      4121: {},
	      4122: {},
	      4123: {},
	      4124: {},
	      4125: {},
	      4126: {},
	      4127: {},
	      4128: {},
	      4129: {},
	      4130: {},
	      4132: {},
	      4133: {},
	      4134: {
	        f: parseuint16
	      },
	      4135: {},
	      4146: {},
	      4147: {},
	      4148: {},
	      4149: {},
	      4154: {},
	      4156: {},
	      4157: {},
	      4158: {},
	      4159: {},
	      4160: {},
	      4161: {},
	      4163: {},
	      4164: {
	        f: parse_ShtProps
	      },
	      4165: {},
	      4166: {},
	      4168: {},
	      4170: {},
	      4171: {},
	      4174: {},
	      4175: {},
	      4176: {},
	      4177: {},
	      4187: {},
	      4188: {
	        f: parse_ClrtClient
	      },
	      4189: {},
	      4191: {},
	      4192: {},
	      4193: {},
	      4194: {},
	      4195: {},
	      4196: {},
	      4197: {},
	      4198: {},
	      4199: {},
	      4200: {},
	      0: {
	        f: parse_Dimensions
	      },
	      1: {},
	      2: {
	        f: parse_BIFF2INT
	      },
	      3: {
	        f: parse_BIFF2NUM
	      },
	      4: {
	        f: parse_BIFF2STR
	      },
	      5: {
	        f: parse_BIFF2BOOLERR
	      },
	      7: {
	        f: parse_BIFF2STRING
	      },
	      8: {},
	      9: {
	        f: parse_BOF
	      },
	      11: {},
	      22: {
	        f: parseuint16
	      },
	      30: {
	        f: parse_BIFF2Format
	      },
	      31: {},
	      32: {},
	      33: {
	        f: parse_Array
	      },
	      36: {},
	      37: {
	        f: parse_DefaultRowHeight
	      },
	      50: {
	        f: parse_BIFF2FONTXTRA
	      },
	      62: {},
	      52: {},
	      67: {
	        f: parse_BIFF2XF
	      },
	      68: {
	        f: parseuint16
	      },
	      69: {},
	      86: {},
	      126: {},
	      127: {
	        f: parse_ImData
	      },
	      135: {},
	      136: {},
	      137: {},
	      143: {
	        f: parse_BIFF4SheetInfo
	      },
	      145: {},
	      148: {},
	      149: {},
	      150: {},
	      169: {},
	      171: {},
	      188: {},
	      191: {},
	      192: {},
	      194: {},
	      195: {},
	      214: {
	        f: parse_RString
	      },
	      223: {},
	      234: {},
	      354: {},
	      421: {},
	      518: {
	        f: parse_Formula
	      },
	      521: {
	        f: parse_BOF
	      },
	      536: {
	        f: parse_Lbl
	      },
	      547: {
	        f: parse_ExternName
	      },
	      561: {},
	      579: {
	        f: parse_BIFF3XF
	      },
	      1030: {
	        f: parse_Formula
	      },
	      1033: {
	        f: parse_BOF
	      },
	      1091: {
	        f: parse_BIFF4XF
	      },
	      2157: {},
	      2163: {},
	      2177: {},
	      2240: {},
	      2241: {},
	      2242: {},
	      2243: {},
	      2244: {},
	      2245: {},
	      2246: {},
	      2247: {},
	      2248: {},
	      2249: {},
	      2250: {},
	      2251: {},
	      2262: {
	        r: 12
	      },
	      101: {},
	      102: {},
	      105: {},
	      106: {},
	      107: {},
	      109: {},
	      112: {},
	      114: {},
	      29282: {}
	    };
	    function write_biff_rec(ba, type, payload, length) {
	      var t = type;
	      if (isNaN(t)) return;
	      var len = length || (payload || []).length || 0;
	      var o = ba.next(4);
	      o.write_shift(2, t);
	      o.write_shift(2, len);
	      if (len > 0 && is_buf(payload)) ba.push(payload);
	    }
	    function write_biff_continue(ba, type, payload, length) {
	      var len = length || (payload || []).length || 0;
	      if (len <= 8224) return write_biff_rec(ba, type, payload, len);
	      var t = type;
	      if (isNaN(t)) return;
	      var parts = payload.parts || [], sidx = 0;
	      var i = 0, w = 0;
	      while (w + (parts[sidx] || 8224) <= 8224) {
	        w += parts[sidx] || 8224;
	        sidx++;
	      }
	      var o = ba.next(4);
	      o.write_shift(2, t);
	      o.write_shift(2, w);
	      ba.push(payload.slice(i, i + w));
	      i += w;
	      while (i < len) {
	        o = ba.next(4);
	        o.write_shift(2, 60);
	        w = 0;
	        while (w + (parts[sidx] || 8224) <= 8224) {
	          w += parts[sidx] || 8224;
	          sidx++;
	        }
	        o.write_shift(2, w);
	        ba.push(payload.slice(i, i + w));
	        i += w;
	      }
	    }
	    function write_BIFF2BERR(r, c, val, t) {
	      var out = new_buf(9);
	      write_BIFF2Cell(out, r, c);
	      write_Bes(val, t || "b", out);
	      return out;
	    }
	    function write_BIFF2LABEL(r, c, val) {
	      var out = new_buf(8 + 2 * val.length);
	      write_BIFF2Cell(out, r, c);
	      out.write_shift(1, val.length);
	      out.write_shift(val.length, val, "sbcs");
	      return out.l < out.length ? out.slice(0, out.l) : out;
	    }
	    function write_comments_biff2(ba, comments) {
	      comments.forEach(function (data) {
	        var text = data[0].map(function (cc) {
	          return cc.t;
	        }).join("");
	        if (text.length <= 2048) return write_biff_rec(ba, 28, write_NOTE_BIFF2(text, data[1], data[2]));
	        write_biff_rec(ba, 28, write_NOTE_BIFF2(text.slice(0, 2048), data[1], data[2], text.length));
	        for (var i = 2048; i < text.length; i += 2048) write_biff_rec(ba, 28, write_NOTE_BIFF2(text.slice(i, Math.min(i + 2048, text.length)), -1, -1, Math.min(2048, text.length - i)));
	      });
	    }
	    function write_ws_biff2_cell(ba, cell, R, C, opts, date1904) {
	      var ifmt = 0;
	      if (cell.z != null) {
	        ifmt = opts._BIFF2FmtTable.indexOf(cell.z);
	        if (ifmt == -1) {
	          opts._BIFF2FmtTable.push(cell.z);
	          ifmt = opts._BIFF2FmtTable.length - 1;
	        }
	      }
	      var ixfe = 0;
	      if (cell.z != null) {
	        for (; ixfe < opts.cellXfs.length; ++ixfe) if (opts.cellXfs[ixfe].numFmtId == ifmt) break;
	        if (ixfe == opts.cellXfs.length) opts.cellXfs.push({
	          numFmtId: ifmt
	        });
	      }
	      if (cell.v != null) switch (cell.t) {
	        case "d":
	        case "n":
	          var v = cell.t == "d" ? datenum(parseDate(cell.v, date1904), date1904) : cell.v;
	          if (opts.biff == 2 && v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 2, write_BIFF2INT(R, C, v, ixfe, ifmt)); else if (isNaN(v)) write_biff_rec(ba, 5, write_BIFF2BERR(R, C, 36, "e")); else if (!isFinite(v)) write_biff_rec(ba, 5, write_BIFF2BERR(R, C, 7, "e")); else write_biff_rec(ba, 3, write_BIFF2NUM(R, C, v, ixfe, ifmt));
	          return;
	        case "b":
	        case "e":
	          write_biff_rec(ba, 5, write_BIFF2BERR(R, C, cell.v, cell.t));
	          return;
	        case "s":
	        case "str":
	          write_biff_rec(ba, 4, write_BIFF2LABEL(R, C, cell.v == null ? "" : String(cell.v).slice(0, 255)));
	          return;
	      }
	      write_biff_rec(ba, 1, write_BIFF2Cell(null, R, C));
	    }
	    function write_ws_biff2(ba, ws, idx, opts, wb) {
	      var dense = ws["!data"] != null;
	      var range = safe_decode_range(ws["!ref"] || "A1"), rr = "", cols = [];
	      if (range.e.c > 255 || range.e.r > 16383) {
	        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
	        range.e.c = Math.min(range.e.c, 255);
	        range.e.r = Math.min(range.e.c, 16383);
	      }
	      var date1904 = (((wb || ({})).Workbook || ({})).WBProps || ({})).date1904;
	      var row = [], comments = [];
	      for (var C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
	      for (var R = range.s.r; R <= range.e.r; ++R) {
	        if (dense) row = ws["!data"][R] || [];
	        rr = encode_row(R);
	        for (C = range.s.c; C <= range.e.c; ++C) {
	          var cell = dense ? row[C] : ws[cols[C] + rr];
	          if (!cell) continue;
	          write_ws_biff2_cell(ba, cell, R, C, opts, date1904);
	          if (cell.c) comments.push([cell.c, R, C]);
	        }
	      }
	      write_comments_biff2(ba, comments);
	    }
	    function write_biff2_buf(wb, opts) {
	      var o = opts || ({});
	      var ba = buf_array();
	      var idx = 0;
	      for (var i = 0; i < wb.SheetNames.length; ++i) if (wb.SheetNames[i] == o.sheet) idx = i;
	      if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
	      write_biff_rec(ba, o.biff == 4 ? 1033 : o.biff == 3 ? 521 : 9, write_BOF(wb, 16, o));
	      if (((wb.Workbook || ({})).WBProps || ({})).date1904) write_biff_rec(ba, 34, writebool(true));
	      o.cellXfs = [{
	        numFmtId: 0
	      }];
	      o._BIFF2FmtTable = ["General"];
	      o._Fonts = [];
	      var body = buf_array();
	      write_ws_biff2(body, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
	      o._BIFF2FmtTable.forEach(function (f) {
	        if (o.biff <= 3) write_biff_rec(ba, 30, write_BIFF2Format(f)); else write_biff_rec(ba, 1054, write_BIFF4Format(f));
	      });
	      o.cellXfs.forEach(function (xf) {
	        switch (o.biff) {
	          case 2:
	            write_biff_rec(ba, 67, write_BIFF2XF(xf));
	            break;
	          case 3:
	            write_biff_rec(ba, 579, write_BIFF3XF(xf));
	            break;
	          case 4:
	            write_biff_rec(ba, 1091, write_BIFF4XF(xf));
	            break;
	        }
	      });
	      delete o._BIFF2FmtTable;
	      delete o.cellXfs;
	      delete o._Fonts;
	      ba.push(body.end());
	      write_biff_rec(ba, 10);
	      return ba.end();
	    }
	    var b8oid = 1, b8ocnts = [];
	    function write_MsoDrawingGroup() {
	      var buf = new_buf(82 + 8 * b8ocnts.length);
	      buf.write_shift(2, 15);
	      buf.write_shift(2, 61440);
	      buf.write_shift(4, 74 + 8 * b8ocnts.length);
	      {
	        buf.write_shift(2, 0);
	        buf.write_shift(2, 61446);
	        buf.write_shift(4, 16 + 8 * b8ocnts.length);
	        {
	          buf.write_shift(4, b8oid);
	          buf.write_shift(4, b8ocnts.length + 1);
	          var acc = 0;
	          for (var i = 0; i < b8ocnts.length; ++i) acc += b8ocnts[i] && b8ocnts[i][1] || 0;
	          buf.write_shift(4, acc);
	          buf.write_shift(4, b8ocnts.length);
	        }
	        b8ocnts.forEach(function (b8) {
	          buf.write_shift(4, b8[0]);
	          buf.write_shift(4, b8[2]);
	        });
	      }
	      {
	        buf.write_shift(2, 51);
	        buf.write_shift(2, 61451);
	        buf.write_shift(4, 18);
	        buf.write_shift(2, 191);
	        buf.write_shift(4, 524296);
	        buf.write_shift(2, 385);
	        buf.write_shift(4, 134217793);
	        buf.write_shift(2, 448);
	        buf.write_shift(4, 134217792);
	      }
	      {
	        buf.write_shift(2, 64);
	        buf.write_shift(2, 61726);
	        buf.write_shift(4, 16);
	        buf.write_shift(4, 134217741);
	        buf.write_shift(4, 134217740);
	        buf.write_shift(4, 134217751);
	        buf.write_shift(4, 268435703);
	      }
	      return buf;
	    }
	    function write_comments_biff8(ba, comments) {
	      var notes = [], sz = 0, pl = buf_array(), baseid = b8oid;
	      var _oasc;
	      comments.forEach(function (c, ci) {
	        var author = "";
	        var text = c[0].map(function (t) {
	          if (t.a && !author) author = t.a;
	          return t.t;
	        }).join("");
	        ++b8oid;
	        {
	          var oasc = new_buf(150);
	          oasc.write_shift(2, 15);
	          oasc.write_shift(2, 61444);
	          oasc.write_shift(4, 150);
	          {
	            oasc.write_shift(2, 3234);
	            oasc.write_shift(2, 61450);
	            oasc.write_shift(4, 8);
	            oasc.write_shift(4, b8oid);
	            oasc.write_shift(4, 2560);
	          }
	          {
	            oasc.write_shift(2, 227);
	            oasc.write_shift(2, 61451);
	            oasc.write_shift(4, 84);
	            oasc.write_shift(2, 128);
	            oasc.write_shift(4, 0);
	            oasc.write_shift(2, 139);
	            oasc.write_shift(4, 2);
	            oasc.write_shift(2, 191);
	            oasc.write_shift(4, 524296);
	            oasc.write_shift(2, 344);
	            oasc.l += 4;
	            oasc.write_shift(2, 385);
	            oasc.write_shift(4, 134217808);
	            oasc.write_shift(2, 387);
	            oasc.write_shift(4, 134217808);
	            oasc.write_shift(2, 389);
	            oasc.write_shift(4, 268435700);
	            oasc.write_shift(2, 447);
	            oasc.write_shift(4, 1048592);
	            oasc.write_shift(2, 448);
	            oasc.write_shift(4, 134217809);
	            oasc.write_shift(2, 451);
	            oasc.write_shift(4, 268435700);
	            oasc.write_shift(2, 513);
	            oasc.write_shift(4, 134217809);
	            oasc.write_shift(2, 515);
	            oasc.write_shift(4, 268435700);
	            oasc.write_shift(2, 575);
	            oasc.write_shift(4, 196609);
	            oasc.write_shift(2, 959);
	            oasc.write_shift(4, 131072 | (c[0].hidden ? 2 : 0));
	          }
	          {
	            oasc.l += 2;
	            oasc.write_shift(2, 61456);
	            oasc.write_shift(4, 18);
	            oasc.write_shift(2, 3);
	            oasc.write_shift(2, c[2] + 2);
	            oasc.l += 2;
	            oasc.write_shift(2, c[1] + 1);
	            oasc.l += 2;
	            oasc.write_shift(2, c[2] + 4);
	            oasc.l += 2;
	            oasc.write_shift(2, c[1] + 5);
	            oasc.l += 2;
	          }
	          {
	            oasc.l += 2;
	            oasc.write_shift(2, 61457);
	            oasc.l += 4;
	          }
	          oasc.l = 150;
	          if (ci == 0) _oasc = oasc; else write_biff_rec(pl, 236, oasc);
	        }
	        sz += 150;
	        {
	          var obj = new_buf(52);
	          obj.write_shift(2, 21);
	          obj.write_shift(2, 18);
	          obj.write_shift(2, 25);
	          obj.write_shift(2, b8oid);
	          obj.write_shift(2, 0);
	          obj.l = 22;
	          obj.write_shift(2, 13);
	          obj.write_shift(2, 22);
	          obj.write_shift(4, 1651663474);
	          obj.write_shift(4, 2503426821);
	          obj.write_shift(4, 2150634280);
	          obj.write_shift(4, 1768515844 + b8oid * 256);
	          obj.write_shift(2, 0);
	          obj.write_shift(4, 0);
	          obj.l += 4;
	          write_biff_rec(pl, 93, obj);
	        }
	        {
	          var oact = new_buf(8);
	          oact.l += 2;
	          oact.write_shift(2, 61453);
	          oact.l += 4;
	          write_biff_rec(pl, 236, oact);
	        }
	        sz += 8;
	        {
	          var txo = new_buf(18);
	          txo.write_shift(2, 18);
	          txo.l += 8;
	          txo.write_shift(2, text.length);
	          txo.write_shift(2, 16);
	          txo.l += 4;
	          write_biff_rec(pl, 438, txo);
	          {
	            var cont = new_buf(1 + text.length);
	            cont.write_shift(1, 0);
	            cont.write_shift(text.length, text, "sbcs");
	            write_biff_rec(pl, 60, cont);
	          }
	          {
	            var conf = new_buf(16);
	            conf.l += 8;
	            conf.write_shift(2, text.length);
	            conf.l += 6;
	            write_biff_rec(pl, 60, conf);
	          }
	        }
	        {
	          var notesh = new_buf(12 + author.length);
	          notesh.write_shift(2, c[1]);
	          notesh.write_shift(2, c[2]);
	          notesh.write_shift(2, 0 | (c[0].hidden ? 0 : 2));
	          notesh.write_shift(2, b8oid);
	          notesh.write_shift(2, author.length);
	          notesh.write_shift(1, 0);
	          notesh.write_shift(author.length, author, "sbcs");
	          notesh.l++;
	          notes.push(notesh);
	        }
	      });
	      {
	        var hdr = new_buf(80);
	        hdr.write_shift(2, 15);
	        hdr.write_shift(2, 61442);
	        hdr.write_shift(4, sz + hdr.length - 8);
	        {
	          hdr.write_shift(2, 16);
	          hdr.write_shift(2, 61448);
	          hdr.write_shift(4, 8);
	          hdr.write_shift(4, comments.length + 1);
	          hdr.write_shift(4, b8oid);
	        }
	        {
	          hdr.write_shift(2, 15);
	          hdr.write_shift(2, 61443);
	          hdr.write_shift(4, sz + 48);
	          {
	            hdr.write_shift(2, 15);
	            hdr.write_shift(2, 61444);
	            hdr.write_shift(4, 40);
	            {
	              hdr.write_shift(2, 1);
	              hdr.write_shift(2, 61449);
	              hdr.write_shift(4, 16);
	              hdr.l += 16;
	            }
	            {
	              hdr.write_shift(2, 2);
	              hdr.write_shift(2, 61450);
	              hdr.write_shift(4, 8);
	              hdr.write_shift(4, baseid);
	              hdr.write_shift(4, 5);
	            }
	          }
	        }
	        write_biff_rec(ba, 236, _oasc ? bconcat([hdr, _oasc]) : hdr);
	      }
	      ba.push(pl.end());
	      notes.forEach(function (n) {
	        write_biff_rec(ba, 28, n);
	      });
	      b8ocnts.push([baseid, comments.length + 1, b8oid]);
	      ++b8oid;
	    }
	    function write_FONTS_biff8(ba, data, opts) {
	      write_biff_rec(ba, 49, write_Font({
	        sz: 12,
	        color: {
	          theme: 1
	        },
	        name: "Arial",
	        family: 2,
	        scheme: "minor"
	      }, opts));
	    }
	    function write_FMTS_biff8(ba, NF, opts) {
	      if (!NF) return;
	      [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) {
	        for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) write_biff_rec(ba, 1054, write_Format(i, NF[i], opts));
	      });
	    }
	    function write_FEAT(ba, ws) {
	      var o = new_buf(19);
	      o.write_shift(4, 2151);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      o.write_shift(2, 3);
	      o.write_shift(1, 1);
	      o.write_shift(4, 0);
	      write_biff_rec(ba, 2151, o);
	      o = new_buf(39);
	      o.write_shift(4, 2152);
	      o.write_shift(4, 0);
	      o.write_shift(4, 0);
	      o.write_shift(2, 3);
	      o.write_shift(1, 0);
	      o.write_shift(4, 0);
	      o.write_shift(2, 1);
	      o.write_shift(4, 4);
	      o.write_shift(2, 0);
	      write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o);
	      o.write_shift(4, 4);
	      write_biff_rec(ba, 2152, o);
	    }
	    function write_CELLXFS_biff8(ba, opts) {
	      for (var i = 0; i < 16; ++i) write_biff_rec(ba, 224, write_XF({
	        numFmtId: 0,
	        style: true
	      }, 0, opts));
	      opts.cellXfs.forEach(function (c) {
	        write_biff_rec(ba, 224, write_XF(c, 0, opts));
	      });
	    }
	    function write_ws_biff8_hlinks(ba, ws) {
	      for (var R = 0; R < ws["!links"].length; ++R) {
	        var HL = ws["!links"][R];
	        write_biff_rec(ba, 440, write_HLink(HL));
	        if (HL[1].Tooltip) write_biff_rec(ba, 2048, write_HLinkTooltip(HL));
	      }
	      delete ws["!links"];
	    }
	    function write_ws_cols_biff8(ba, cols) {
	      if (!cols) return;
	      var cnt = 0;
	      cols.forEach(function (col, idx) {
	        if (++cnt <= 256 && col) {
	          write_biff_rec(ba, 125, write_ColInfo(col_obj_w(idx, col), idx));
	        }
	      });
	    }
	    function write_ws_biff8_cell(ba, cell, R, C, opts, date1904) {
	      var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
	      if (cell.v == null && !cell.bf) {
	        write_biff_rec(ba, 513, write_XLSCell(R, C, os));
	        return;
	      }
	      if (cell.bf) write_biff_rec(ba, 6, write_Formula(cell, R, C, opts, os)); else switch (cell.t) {
	        case "d":
	        case "n":
	          var v = cell.t == "d" ? datenum(parseDate(cell.v, date1904), date1904) : cell.v;
	          if (isNaN(v)) write_biff_rec(ba, 517, write_BoolErr(R, C, 36, os, opts, "e")); else if (!isFinite(v)) write_biff_rec(ba, 517, write_BoolErr(R, C, 7, os, opts, "e")); else write_biff_rec(ba, 515, write_Number(R, C, v, os));
	          break;
	        case "b":
	        case "e":
	          write_biff_rec(ba, 517, write_BoolErr(R, C, cell.v, os, opts, cell.t));
	          break;
	        case "s":
	        case "str":
	          if (opts.bookSST) {
	            var isst = get_sst_id(opts.Strings, cell.v == null ? "" : String(cell.v), opts.revStrings);
	            write_biff_rec(ba, 253, write_LabelSst(R, C, isst, os));
	          } else write_biff_rec(ba, 516, write_Label(R, C, (cell.v == null ? "" : String(cell.v)).slice(0, 255), os, opts));
	          break;
	        default:
	          write_biff_rec(ba, 513, write_XLSCell(R, C, os));
	      }
	    }
	    function write_ws_biff8(idx, opts, wb) {
	      var ba = buf_array();
	      var s = wb.SheetNames[idx], ws = wb.Sheets[s] || ({});
	      var _WB = (wb || ({})).Workbook || ({});
	      var _sheet = (_WB.Sheets || [])[idx] || ({});
	      var dense = ws["!data"] != null;
	      var b8 = opts.biff == 8;
	      var ref, rr = "", cols = [];
	      var range = safe_decode_range(ws["!ref"] || "A1");
	      var MAX_ROWS = b8 ? 65536 : 16384;
	      if (range.e.c > 255 || range.e.r >= MAX_ROWS) {
	        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
	        range.e.c = Math.min(range.e.c, 255);
	        range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
	      }
	      write_biff_rec(ba, 2057, write_BOF(wb, 16, opts));
	      write_biff_rec(ba, 13, writeuint16(1));
	      write_biff_rec(ba, 12, writeuint16(100));
	      write_biff_rec(ba, 15, writebool(true));
	      write_biff_rec(ba, 17, writebool(false));
	      write_biff_rec(ba, 16, write_Xnum(0.001));
	      write_biff_rec(ba, 95, writebool(true));
	      write_biff_rec(ba, 42, writebool(false));
	      write_biff_rec(ba, 43, writebool(false));
	      write_biff_rec(ba, 130, writeuint16(1));
	      write_biff_rec(ba, 128, write_Guts([0, 0]));
	      write_biff_rec(ba, 131, writebool(false));
	      write_biff_rec(ba, 132, writebool(false));
	      if (b8) write_ws_cols_biff8(ba, ws["!cols"]);
	      write_biff_rec(ba, 512, write_Dimensions(range, opts));
	      var date1904 = (((wb || ({})).Workbook || ({})).WBProps || ({})).date1904;
	      if (b8) ws["!links"] = [];
	      var comments = [];
	      var row = [];
	      for (var C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
	      for (var R = range.s.r; R <= range.e.r; ++R) {
	        if (dense) row = ws["!data"][R] || [];
	        rr = encode_row(R);
	        for (C = range.s.c; C <= range.e.c; ++C) {
	          ref = cols[C] + rr;
	          var cell = dense ? row[C] : ws[ref];
	          if (!cell) continue;
	          write_ws_biff8_cell(ba, cell, R, C, opts, date1904);
	          if (b8 && cell.l) ws["!links"].push([ref, cell.l]);
	          if (cell.c) comments.push([cell.c, R, C]);
	        }
	      }
	      var cname = _sheet.CodeName || _sheet.name || s;
	      if (b8) write_comments_biff8(ba, comments); else write_comments_biff2(ba, comments);
	      if (b8) write_biff_rec(ba, 574, write_Window2((_WB.Views || [])[0]));
	      if (b8 && (ws["!merges"] || []).length) write_biff_rec(ba, 229, write_MergeCells(ws["!merges"]));
	      if (b8) write_ws_biff8_hlinks(ba, ws);
	      write_biff_rec(ba, 442, write_XLUnicodeString(cname));
	      if (b8) write_FEAT(ba, ws);
	      write_biff_rec(ba, 10);
	      return ba.end();
	    }
	    function write_biff8_global(wb, bufs, opts) {
	      var A = buf_array();
	      var _WB = (wb || ({})).Workbook || ({});
	      var _sheets = _WB.Sheets || [];
	      var _wb = _WB.WBProps || ({});
	      var b8 = opts.biff == 8, b5 = opts.biff == 5;
	      write_biff_rec(A, 2057, write_BOF(wb, 5, opts));
	      if (opts.bookType == "xla") write_biff_rec(A, 135);
	      write_biff_rec(A, 225, b8 ? writeuint16(1200) : null);
	      write_biff_rec(A, 193, writezeroes(2));
	      if (b5) write_biff_rec(A, 191);
	      if (b5) write_biff_rec(A, 192);
	      write_biff_rec(A, 226);
	      write_biff_rec(A, 92, write_WriteAccess("SheetJS", opts));
	      write_biff_rec(A, 66, writeuint16(b8 ? 1200 : 1252));
	      if (b8) write_biff_rec(A, 353, writeuint16(0));
	      if (b8) write_biff_rec(A, 448);
	      write_biff_rec(A, 317, write_RRTabId(wb.SheetNames.length));
	      if (b8 && wb.vbaraw) write_biff_rec(A, 211);
	      if (b8 && wb.vbaraw) {
	        var cname = _wb.CodeName || "ThisWorkbook";
	        write_biff_rec(A, 442, write_XLUnicodeString(cname));
	      }
	      write_biff_rec(A, 156, writeuint16(17));
	      write_biff_rec(A, 25, writebool(false));
	      write_biff_rec(A, 18, writebool(false));
	      write_biff_rec(A, 19, writeuint16(0));
	      if (b8) write_biff_rec(A, 431, writebool(false));
	      if (b8) write_biff_rec(A, 444, writeuint16(0));
	      write_biff_rec(A, 61, write_Window1());
	      write_biff_rec(A, 64, writebool(false));
	      write_biff_rec(A, 141, writeuint16(0));
	      write_biff_rec(A, 34, writebool(safe1904(wb) == "true"));
	      write_biff_rec(A, 14, writebool(true));
	      if (b8) write_biff_rec(A, 439, writebool(false));
	      write_biff_rec(A, 218, writeuint16(0));
	      write_FONTS_biff8(A, wb, opts);
	      write_FMTS_biff8(A, wb.SSF, opts);
	      write_CELLXFS_biff8(A, opts);
	      if (b8) write_biff_rec(A, 352, writebool(false));
	      var a = A.end();
	      var C = buf_array();
	      if (b8) write_biff_rec(C, 140, write_Country());
	      if (b8 && b8ocnts.length) write_biff_rec(C, 235, write_MsoDrawingGroup());
	      if (b8 && opts.Strings) write_biff_continue(C, 252, write_SST(opts.Strings));
	      write_biff_rec(C, 10);
	      var c = C.end();
	      var B = buf_array();
	      var blen = 0, j = 0;
	      for (j = 0; j < wb.SheetNames.length; ++j) blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
	      var start = a.length + blen + c.length;
	      for (j = 0; j < wb.SheetNames.length; ++j) {
	        var _sheet = _sheets[j] || ({});
	        write_biff_rec(B, 133, write_BoundSheet8({
	          pos: start,
	          hs: _sheet.Hidden || 0,
	          dt: 0,
	          name: wb.SheetNames[j]
	        }, opts));
	        start += bufs[j].length;
	      }
	      var b = B.end();
	      if (blen != b.length) throw new Error("BS8 " + blen + " != " + b.length);
	      var out = [];
	      if (a.length) out.push(a);
	      if (b.length) out.push(b);
	      if (c.length) out.push(c);
	      return bconcat(out);
	    }
	    function write_biff8_buf(wb, opts) {
	      var o = opts || ({});
	      var bufs = [];
	      if (wb && !wb.SSF) {
	        wb.SSF = dup(table_fmt);
	      }
	      if (wb && wb.SSF) {
	        make_ssf();
	        SSF_load_table(wb.SSF);
	        o.revssf = evert_num(wb.SSF);
	        o.revssf[wb.SSF[65535]] = 0;
	        o.ssf = wb.SSF;
	      }
	      b8oid = 1;
	      b8ocnts = [];
	      o.Strings = [];
	      o.Strings.Count = 0;
	      o.Strings.Unique = 0;
	      fix_write_opts(o);
	      o.cellXfs = [];
	      get_cell_style(o.cellXfs, {}, {
	        revssf: {
	          "General": 0
	        }
	      });
	      if (!wb.Props) wb.Props = {};
	      for (var i = 0; i < wb.SheetNames.length; ++i) bufs[bufs.length] = write_ws_biff8(i, o, wb);
	      bufs.unshift(write_biff8_global(wb, bufs, o));
	      return bconcat(bufs);
	    }
	    function write_biff_buf(wb, opts) {
	      for (var i = 0; i <= wb.SheetNames.length; ++i) {
	        var ws = wb.Sheets[wb.SheetNames[i]];
	        if (!ws || !ws["!ref"]) continue;
	        var range = decode_range(ws["!ref"]);
	        if (range.e.c > 255) {
	          if (typeof console != "undefined" && console.error) console.error("Worksheet '" + wb.SheetNames[i] + "' extends beyond column IV (255).  Data may be lost.");
	        }
	      }
	      var o = opts || ({});
	      switch (o.biff || 2) {
	        case 8:
	        case 5:
	          return write_biff8_buf(wb, opts);
	        case 4:
	        case 3:
	        case 2:
	          return write_biff2_buf(wb, opts);
	      }
	      throw new Error("invalid type " + o.bookType + " for BIFF");
	    }
	    function html_to_sheet(str, _opts) {
	      var opts = _opts || ({});
	      var dense = opts.dense != null ? opts.dense : DENSE;
	      var ws = {};
	      if (dense) ws["!data"] = [];
	      str = str.replace(/<!--.*?-->/g, "");
	      var mtch = str.match(/<table/i);
	      if (!mtch) throw new Error("Invalid HTML: could not find <table>");
	      var mtch2 = str.match(/<\/table/i);
	      var i = mtch.index, j = mtch2 && mtch2.index || str.length;
	      var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
	      var R = -1, C = 0, RS = 0, CS = 0;
	      var range = {
	        s: {
	          r: 10000000,
	          c: 10000000
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var merges = [];
	      for (i = 0; i < rows.length; ++i) {
	        var row = rows[i].trim();
	        var hd = row.slice(0, 3).toLowerCase();
	        if (hd == "<tr") {
	          ++R;
	          if (opts.sheetRows && opts.sheetRows <= R) {
	            --R;
	            break;
	          }
	          C = 0;
	          continue;
	        }
	        if (hd != "<td" && hd != "<th") continue;
	        var cells = row.split(/<\/t[dh]>/i);
	        for (j = 0; j < cells.length; ++j) {
	          var cell = cells[j].trim();
	          if (!cell.match(/<t[dh]/i)) continue;
	          var m = cell, cc = 0;
	          while (m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc + 1);
	          for (var midx = 0; midx < merges.length; ++midx) {
	            var _merge = merges[midx];
	            if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
	              C = _merge.e.c + 1;
	              midx = -1;
	            }
	          }
	          var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
	          CS = tag.colspan ? +tag.colspan : 1;
	          if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({
	            s: {
	              r: R,
	              c: C
	            },
	            e: {
	              r: R + (RS || 1) - 1,
	              c: C + CS - 1
	            }
	          });
	          var _t = tag.t || tag["data-t"] || "";
	          if (!m.length) {
	            C += CS;
	            continue;
	          }
	          m = htmldecode(m);
	          if (range.s.r > R) range.s.r = R;
	          if (range.e.r < R) range.e.r = R;
	          if (range.s.c > C) range.s.c = C;
	          if (range.e.c < C) range.e.c = C;
	          if (!m.length) {
	            C += CS;
	            continue;
	          }
	          var o = {
	            t: "s",
	            v: m
	          };
	          if (opts.raw || !m.trim().length || _t == "s") ; else if (m === "TRUE") o = {
	            t: "b",
	            v: true
	          }; else if (m === "FALSE") o = {
	            t: "b",
	            v: false
	          }; else if (!isNaN(fuzzynum(m))) o = {
	            t: "n",
	            v: fuzzynum(m)
	          }; else if (!isNaN(fuzzydate(m).getDate())) {
	            o = {
	              t: "d",
	              v: parseDate(m)
	            };
	            if (opts.UTC === false) o.v = utc_to_local(o.v);
	            if (!opts.cellDates) o = {
	              t: "n",
	              v: datenum(o.v)
	            };
	            o.z = opts.dateNF || table_fmt[14];
	          }
	          if (o.cellText !== false) o.w = m;
	          if (dense) {
	            if (!ws["!data"][R]) ws["!data"][R] = [];
	            ws["!data"][R][C] = o;
	          } else ws[encode_cell({
	            r: R,
	            c: C
	          })] = o;
	          C += CS;
	        }
	      }
	      ws["!ref"] = encode_range(range);
	      if (merges.length) ws["!merges"] = merges;
	      return ws;
	    }
	    function make_html_row(ws, r, R, o) {
	      var M = ws["!merges"] || [];
	      var oo = [];
	      var sp = {};
	      var dense = ws["!data"] != null;
	      for (var C = r.s.c; C <= r.e.c; ++C) {
	        var RS = 0, CS = 0;
	        for (var j = 0; j < M.length; ++j) {
	          if (M[j].s.r > R || M[j].s.c > C) continue;
	          if (M[j].e.r < R || M[j].e.c < C) continue;
	          if (M[j].s.r < R || M[j].s.c < C) {
	            RS = -1;
	            break;
	          }
	          RS = M[j].e.r - M[j].s.r + 1;
	          CS = M[j].e.c - M[j].s.c + 1;
	          break;
	        }
	        if (RS < 0) continue;
	        var coord = encode_col(C) + encode_row(R);
	        var cell = dense ? (ws["!data"][R] || [])[C] : ws[coord];
	        var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
	        sp = {};
	        if (RS > 1) sp.rowspan = RS;
	        if (CS > 1) sp.colspan = CS;
	        if (o.editable) w = "<span contenteditable=\"true\">" + w + "</span>"; else if (cell) {
	          sp["data-t"] = cell && cell.t || "z";
	          if (cell.v != null) sp["data-v"] = cell.v instanceof Date ? cell.v.toISOString() : cell.v;
	          if (cell.z != null) sp["data-z"] = cell.z;
	          if (cell.l && (cell.l.Target || "#").charAt(0) != "#") w = "<a href=\"" + escapehtml(cell.l.Target) + "\">" + w + "</a>";
	        }
	        sp.id = (o.id || "sjs") + "-" + coord;
	        oo.push(writextag("td", w, sp));
	      }
	      var preamble = "<tr>";
	      return preamble + oo.join("") + "</tr>";
	    }
	    var HTML_BEGIN = "<html><head><meta charset=\"utf-8\"/><title>SheetJS Table Export</title></head><body>";
	    var HTML_END = "</body></html>";
	    function html_to_workbook(str, opts) {
	      var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
	      if (!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
	      if (mtch.length == 1) {
	        var w = sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
	        w.bookType = "html";
	        return w;
	      }
	      var wb = book_new();
	      mtch.forEach(function (s, idx) {
	        book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx + 1));
	      });
	      wb.bookType = "html";
	      return wb;
	    }
	    function make_html_preamble(ws, R, o) {
	      var out = [];
	      return out.join("") + "<table" + (o && o.id ? " id=\"" + o.id + "\"" : "") + ">";
	    }
	    function sheet_to_html(ws, opts) {
	      var o = opts || ({});
	      var header = o.header != null ? o.header : HTML_BEGIN;
	      var footer = o.footer != null ? o.footer : HTML_END;
	      var out = [header];
	      var r = decode_range(ws["!ref"]);
	      out.push(make_html_preamble(ws, r, o));
	      for (var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));
	      out.push("</table>" + footer);
	      return out.join("");
	    }
	    function sheet_add_dom(ws, table, _opts) {
	      var rows = table.rows;
	      if (!rows) {
	        throw "Unsupported origin when " + table.tagName + " is not a TABLE";
	      }
	      var opts = _opts || ({});
	      var dense = ws["!data"] != null;
	      var or_R = 0, or_C = 0;
	      if (opts.origin != null) {
	        if (typeof opts.origin == "number") or_R = opts.origin; else {
	          var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
	          or_R = _origin.r;
	          or_C = _origin.c;
	        }
	      }
	      var sheetRows = Math.min(opts.sheetRows || 10000000, rows.length);
	      var range = {
	        s: {
	          r: 0,
	          c: 0
	        },
	        e: {
	          r: or_R,
	          c: or_C
	        }
	      };
	      if (ws["!ref"]) {
	        var _range = decode_range(ws["!ref"]);
	        range.s.r = Math.min(range.s.r, _range.s.r);
	        range.s.c = Math.min(range.s.c, _range.s.c);
	        range.e.r = Math.max(range.e.r, _range.e.r);
	        range.e.c = Math.max(range.e.c, _range.e.c);
	        if (or_R == -1) range.e.r = or_R = _range.e.r + 1;
	      }
	      var merges = [], midx = 0;
	      var rowinfo = ws["!rows"] || (ws["!rows"] = []);
	      var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
	      if (!ws["!cols"]) ws["!cols"] = [];
	      for (; _R < rows.length && R < sheetRows; ++_R) {
	        var row = rows[_R];
	        if (is_dom_element_hidden(row)) {
	          if (opts.display) continue;
	          rowinfo[R] = {
	            hidden: true
	          };
	        }
	        var elts = row.cells;
	        for (_C = C = 0; _C < elts.length; ++_C) {
	          var elt = elts[_C];
	          if (opts.display && is_dom_element_hidden(elt)) continue;
	          var v = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
	          var z = elt.getAttribute("data-z") || elt.getAttribute("z");
	          for (midx = 0; midx < merges.length; ++midx) {
	            var m = merges[midx];
	            if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
	              C = m.e.c + 1 - or_C;
	              midx = -1;
	            }
	          }
	          CS = +elt.getAttribute("colspan") || 1;
	          if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1) merges.push({
	            s: {
	              r: R + or_R,
	              c: C + or_C
	            },
	            e: {
	              r: R + or_R + (RS || 1) - 1,
	              c: C + or_C + (CS || 1) - 1
	            }
	          });
	          var o = {
	            t: "s",
	            v: v
	          };
	          var _t = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
	          if (v != null) {
	            if (v.length == 0) o.t = _t || "z"; else if (opts.raw || v.trim().length == 0 || _t == "s") ; else if (v === "TRUE") o = {
	              t: "b",
	              v: true
	            }; else if (v === "FALSE") o = {
	              t: "b",
	              v: false
	            }; else if (!isNaN(fuzzynum(v))) o = {
	              t: "n",
	              v: fuzzynum(v)
	            }; else if (!isNaN(fuzzydate(v).getDate())) {
	              o = {
	                t: "d",
	                v: parseDate(v)
	              };
	              if (opts.UTC) o.v = local_to_utc(o.v);
	              if (!opts.cellDates) o = {
	                t: "n",
	                v: datenum(o.v)
	              };
	              o.z = opts.dateNF || table_fmt[14];
	            }
	          }
	          if (o.z === undefined && z != null) o.z = z;
	          var l = "", Aelts = elt.getElementsByTagName("A");
	          if (Aelts && Aelts.length) for (var Aelti = 0; Aelti < Aelts.length; ++Aelti) if (Aelts[Aelti].hasAttribute("href")) {
	            l = Aelts[Aelti].getAttribute("href");
	            if (l.charAt(0) != "#") break;
	          }
	          if (l && l.charAt(0) != "#" && l.slice(0, 11).toLowerCase() != "javascript:") o.l = {
	            Target: l
	          };
	          if (dense) {
	            if (!ws["!data"][R + or_R]) ws["!data"][R + or_R] = [];
	            ws["!data"][R + or_R][C + or_C] = o;
	          } else ws[encode_cell({
	            c: C + or_C,
	            r: R + or_R
	          })] = o;
	          if (range.e.c < C + or_C) range.e.c = C + or_C;
	          C += CS;
	        }
	        ++R;
	      }
	      if (merges.length) ws["!merges"] = (ws["!merges"] || []).concat(merges);
	      range.e.r = Math.max(range.e.r, R - 1 + or_R);
	      ws["!ref"] = encode_range(range);
	      if (R >= sheetRows) ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range));
	      return ws;
	    }
	    function parse_dom_table(table, _opts) {
	      var opts = _opts || ({});
	      var ws = {};
	      if (opts.dense) ws["!data"] = [];
	      return sheet_add_dom(ws, table, _opts);
	    }
	    function table_to_book(table, opts) {
	      var o = sheet_to_workbook(parse_dom_table(table, opts), opts);
	      return o;
	    }
	    function is_dom_element_hidden(element) {
	      var display = "";
	      var get_computed_style = get_get_computed_style_function(element);
	      if (get_computed_style) display = get_computed_style(element).getPropertyValue("display");
	      if (!display) display = element.style && element.style.display;
	      return display === "none";
	    }
	    function get_get_computed_style_function(element) {
	      if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function") return element.ownerDocument.defaultView.getComputedStyle;
	      if (typeof getComputedStyle === "function") return getComputedStyle;
	      return null;
	    }
	    function parse_text_p(text) {
	      var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function ($$, $1) {
	        return Array(parseInt($1, 10) + 1).join(" ");
	      }).replace(/<text:tab[^>]*\/>/g, "\t").replace(/<text:line-break\/>/g, "\n");
	      var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
	      return [v];
	    }
	    function parse_ods_styles(d, _opts, _nfm) {
	      var number_format_map = _nfm || ({});
	      var str = xlml_normalize(d);
	      xlmlregex.lastIndex = 0;
	      str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
	      var Rn, NFtag, NF = "", tNF = "", y, etpos = 0, tidx = -1, payload = "";
	      while (Rn = xlmlregex.exec(str)) {
	        switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
	          case "number-style":
	          case "currency-style":
	          case "percentage-style":
	          case "date-style":
	          case "time-style":
	          case "text-style":
	            if (Rn[1] === "/") {
	              if (NFtag["truncate-on-overflow"] == "false") {
	                if (NF.match(/h/)) NF = NF.replace(/h+/, "[$&]"); else if (NF.match(/m/)) NF = NF.replace(/m+/, "[$&]"); else if (NF.match(/s/)) NF = NF.replace(/s+/, "[$&]");
	              }
	              number_format_map[NFtag.name] = NF;
	              NF = "";
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	              NF = "";
	              NFtag = parsexmltag(Rn[0], false);
	            }
	            break;
	          case "boolean-style":
	            if (Rn[1] === "/") {
	              number_format_map[NFtag.name] = "General";
	              NF = "";
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	              NF = "";
	              NFtag = parsexmltag(Rn[0], false);
	            }
	            break;
	          case "boolean":
	            NF += "General";
	            break;
	          case "text":
	            if (Rn[1] === "/") {
	              payload = str.slice(tidx, xlmlregex.lastIndex - Rn[0].length);
	              if (payload == "%" && NFtag[0] == "<number:percentage-style") NF += "%"; else NF += "\"" + payload.replace(/"/g, "\"\"") + "\"";
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	              tidx = xlmlregex.lastIndex;
	            }
	            break;
	          case "day":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "d";
	                  break;
	                case "long":
	                  NF += "dd";
	                  break;
	                default:
	                  NF += "dd";
	                  break;
	              }
	            }
	            break;
	          case "day-of-week":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "ddd";
	                  break;
	                case "long":
	                  NF += "dddd";
	                  break;
	                default:
	                  NF += "ddd";
	                  break;
	              }
	            }
	            break;
	          case "era":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "ee";
	                  break;
	                case "long":
	                  NF += "eeee";
	                  break;
	                default:
	                  NF += "eeee";
	                  break;
	              }
	            }
	            break;
	          case "hours":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "h";
	                  break;
	                case "long":
	                  NF += "hh";
	                  break;
	                default:
	                  NF += "hh";
	                  break;
	              }
	            }
	            break;
	          case "minutes":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "m";
	                  break;
	                case "long":
	                  NF += "mm";
	                  break;
	                default:
	                  NF += "mm";
	                  break;
	              }
	            }
	            break;
	          case "month":
	            {
	              y = parsexmltag(Rn[0], false);
	              if (y["textual"]) NF += "mm";
	              switch (y["style"]) {
	                case "short":
	                  NF += "m";
	                  break;
	                case "long":
	                  NF += "mm";
	                  break;
	                default:
	                  NF += "m";
	                  break;
	              }
	            }
	            break;
	          case "seconds":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "s";
	                  break;
	                case "long":
	                  NF += "ss";
	                  break;
	                default:
	                  NF += "ss";
	                  break;
	              }
	              if (y["decimal-places"]) NF += "." + fill("0", +y["decimal-places"]);
	            }
	            break;
	          case "year":
	            {
	              y = parsexmltag(Rn[0], false);
	              switch (y["style"]) {
	                case "short":
	                  NF += "yy";
	                  break;
	                case "long":
	                  NF += "yyyy";
	                  break;
	                default:
	                  NF += "yy";
	                  break;
	              }
	            }
	            break;
	          case "am-pm":
	            NF += "AM/PM";
	            break;
	          case "week-of-year":
	          case "quarter":
	            console.error("Excel does not support ODS format token " + Rn[3]);
	            break;
	          case "fill-character":
	            if (Rn[1] === "/") {
	              payload = str.slice(tidx, xlmlregex.lastIndex - Rn[0].length);
	              NF += "\"" + payload.replace(/"/g, "\"\"") + "\"*";
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	              tidx = xlmlregex.lastIndex;
	            }
	            break;
	          case "scientific-number":
	            y = parsexmltag(Rn[0], false);
	            NF += "0." + fill("0", +y["min-decimal-places"] || +y["decimal-places"] || 2) + fill("?", +y["decimal-places"] - +y["min-decimal-places"] || 0) + "E" + (parsexmlbool(y["forced-exponent-sign"]) ? "+" : "") + fill("0", +y["min-exponent-digits"] || 2);
	            break;
	          case "fraction":
	            y = parsexmltag(Rn[0], false);
	            if (!+y["min-integer-digits"]) NF += "#"; else NF += fill("0", +y["min-integer-digits"]);
	            NF += " ";
	            NF += fill("?", +y["min-numerator-digits"] || 1);
	            NF += "/";
	            if (+y["denominator-value"]) NF += y["denominator-value"]; else NF += fill("?", +y["min-denominator-digits"] || 1);
	            break;
	          case "currency-symbol":
	            if (Rn[1] === "/") {
	              NF += "\"" + str.slice(tidx, xlmlregex.lastIndex - Rn[0].length).replace(/"/g, "\"\"") + "\"";
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	              tidx = xlmlregex.lastIndex;
	            } else NF += "$";
	            break;
	          case "text-properties":
	            y = parsexmltag(Rn[0], false);
	            switch ((y["color"] || "").toLowerCase().replace("#", "")) {
	              case "ff0000":
	              case "red":
	                NF = "[Red]" + NF;
	                break;
	            }
	            break;
	          case "text-content":
	            NF += "@";
	            break;
	          case "map":
	            y = parsexmltag(Rn[0], false);
	            if (unescapexml(y["condition"]) == "value()>=0") NF = number_format_map[y["apply-style-name"]] + ";" + NF; else console.error("ODS number format may be incorrect: " + y["condition"]);
	            break;
	          case "number":
	            if (Rn[1] === "/") break;
	            y = parsexmltag(Rn[0], false);
	            tNF = "";
	            tNF += fill("0", +y["min-integer-digits"] || 1);
	            if (parsexmlbool(y["grouping"])) tNF = commaify(fill("#", Math.max(0, 4 - tNF.length)) + tNF);
	            if (+y["min-decimal-places"] || +y["decimal-places"]) tNF += ".";
	            if (+y["min-decimal-places"]) tNF += fill("0", +y["min-decimal-places"] || 1);
	            if (+y["decimal-places"] - (+y["min-decimal-places"] || 0)) tNF += fill("0", +y["decimal-places"] - (+y["min-decimal-places"] || 0));
	            NF += tNF;
	            break;
	          case "embedded-text":
	            if (Rn[1] === "/") {
	              if (etpos == 0) NF += "\"" + str.slice(tidx, xlmlregex.lastIndex - Rn[0].length).replace(/"/g, "\"\"") + "\""; else NF = NF.slice(0, etpos) + "\"" + str.slice(tidx, xlmlregex.lastIndex - Rn[0].length).replace(/"/g, "\"\"") + "\"" + NF.slice(etpos);
	            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	              tidx = xlmlregex.lastIndex;
	              etpos = -+parsexmltag(Rn[0], false)["position"] || 0;
	            }
	            break;
	        }
	      }
	      return number_format_map;
	    }
	    function parse_content_xml(d, _opts, _nfm) {
	      var opts = _opts || ({});
	      var str = xlml_normalize(d);
	      var state = [], tmp;
	      var tag;
	      var nfidx, NF = "", pidx = 0;
	      var sheetag;
	      var rowtag;
	      var Sheets = {}, SheetNames = [];
	      var ws = {};
	      if (opts.dense) ws["!data"] = [];
	      var Rn, q;
	      var ctag = {
	        value: ""
	      };
	      var textp = "", textpidx = 0, oldtextp = "", oldtextpidx = 0;
	      var textR = [], oldtextR = [];
	      var R = -1, C = -1, range = {
	        s: {
	          r: 1000000,
	          c: 10000000
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var row_ol = 0;
	      var number_format_map = _nfm || ({}), styles = {};
	      var merges = [], mrange = {}, mR = 0, mC = 0;
	      var rowinfo = [], rowpeat = 1, colpeat = 1;
	      var arrayf = [];
	      var WB = {
	        Names: [],
	        WBProps: {}
	      };
	      var atag = {};
	      var _Ref = ["", ""];
	      var comments = [], comment = {};
	      var creator = "", creatoridx = 0;
	      var isstub = false, intable = false;
	      var i = 0;
	      xlmlregex.lastIndex = 0;
	      str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
	      while (Rn = xlmlregex.exec(str)) switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
	        case "table":
	        case "工作表":
	          if (Rn[1] === "/") {
	            if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws["!ref"] = encode_range(range); else ws["!ref"] = "A1:A1";
	            if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
	              ws["!fullref"] = ws["!ref"];
	              range.e.r = opts.sheetRows - 1;
	              ws["!ref"] = encode_range(range);
	            }
	            if (merges.length) ws["!merges"] = merges;
	            if (rowinfo.length) ws["!rows"] = rowinfo;
	            sheetag.name = sheetag["名称"] || sheetag.name;
	            if (typeof JSON !== "undefined") JSON.stringify(sheetag);
	            SheetNames.push(sheetag.name);
	            Sheets[sheetag.name] = ws;
	            intable = false;
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	            sheetag = parsexmltag(Rn[0], false);
	            R = C = -1;
	            range.s.r = range.s.c = 10000000;
	            range.e.r = range.e.c = 0;
	            ws = {};
	            if (opts.dense) ws["!data"] = [];
	            merges = [];
	            rowinfo = [];
	            intable = true;
	          }
	          break;
	        case "table-row-group":
	          if (Rn[1] === "/") --row_ol; else ++row_ol;
	          break;
	        case "table-row":
	        case "行":
	          if (Rn[1] === "/") {
	            R += rowpeat;
	            rowpeat = 1;
	            break;
	          }
	          rowtag = parsexmltag(Rn[0], false);
	          if (rowtag["行号"]) R = rowtag["行号"] - 1; else if (R == -1) R = 0;
	          rowpeat = +rowtag["number-rows-repeated"] || 1;
	          if (rowpeat < 10) for (i = 0; i < rowpeat; ++i) if (row_ol > 0) rowinfo[R + i] = {
	            level: row_ol
	          };
	          C = -1;
	          break;
	        case "covered-table-cell":
	          if (Rn[1] !== "/") ++C;
	          if (opts.sheetStubs) {
	            if (opts.dense) {
	              if (!ws["!data"][R]) ws["!data"][R] = [];
	              ws["!data"][R][C] = {
	                t: "z"
	              };
	            } else ws[encode_cell({
	              r: R,
	              c: C
	            })] = {
	              t: "z"
	            };
	          }
	          textp = "";
	          textR = [];
	          break;
	        case "table-cell":
	        case "数据":
	          if (Rn[0].charAt(Rn[0].length - 2) === "/") {
	            ++C;
	            ctag = parsexmltag(Rn[0], false);
	            colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
	            q = {
	              t: "z",
	              v: null
	            };
	            if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
	            if (ctag["style-name"] && styles[ctag["style-name"]]) q.z = styles[ctag["style-name"]];
	            if ((ctag["数据类型"] || ctag["value-type"]) == "string") {
	              q.t = "s";
	              q.v = unescapexml(ctag["string-value"] || "");
	              if (opts.dense) {
	                if (!ws["!data"][R]) ws["!data"][R] = [];
	                ws["!data"][R][C] = q;
	              } else {
	                ws[encode_col(C) + encode_row(R)] = q;
	              }
	            }
	            C += colpeat - 1;
	          } else if (Rn[1] !== "/") {
	            ++C;
	            textp = oldtextp = "";
	            textpidx = oldtextpidx = 0;
	            textR = [];
	            oldtextR = [];
	            colpeat = 1;
	            var rptR = rowpeat ? R + rowpeat - 1 : R;
	            if (C > range.e.c) range.e.c = C;
	            if (C < range.s.c) range.s.c = C;
	            if (R < range.s.r) range.s.r = R;
	            if (rptR > range.e.r) range.e.r = rptR;
	            ctag = parsexmltag(Rn[0], false);
	            comments = [];
	            comment = {};
	            q = {
	              t: ctag["数据类型"] || ctag["value-type"],
	              v: null
	            };
	            if (ctag["style-name"] && styles[ctag["style-name"]]) q.z = styles[ctag["style-name"]];
	            if (opts.cellFormula) {
	              if (ctag.formula) ctag.formula = unescapexml(ctag.formula);
	              if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
	                mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
	                mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
	                mrange = {
	                  s: {
	                    r: R,
	                    c: C
	                  },
	                  e: {
	                    r: R + mR - 1,
	                    c: C + mC - 1
	                  }
	                };
	                q.F = encode_range(mrange);
	                arrayf.push([mrange, q.F]);
	              }
	              if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula); else for (i = 0; i < arrayf.length; ++i) if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1];
	            }
	            if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
	              mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
	              mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
	              mrange = {
	                s: {
	                  r: R,
	                  c: C
	                },
	                e: {
	                  r: R + mR - 1,
	                  c: C + mC - 1
	                }
	              };
	              merges.push(mrange);
	            }
	            if (ctag["number-columns-repeated"]) colpeat = parseInt(ctag["number-columns-repeated"], 10);
	            switch (q.t) {
	              case "boolean":
	                q.t = "b";
	                q.v = parsexmlbool(ctag["boolean-value"]) || +ctag["boolean-value"] >= 1;
	                break;
	              case "float":
	                q.t = "n";
	                q.v = parseFloat(ctag.value);
	                if (opts.cellDates && q.z && fmt_is_date(q.z)) {
	                  q.v = numdate(q.v + (WB.WBProps.date1904 ? 1462 : 0));
	                  q.t = typeof q.v == "number" ? "n" : "d";
	                }
	                break;
	              case "percentage":
	                q.t = "n";
	                q.v = parseFloat(ctag.value);
	                break;
	              case "currency":
	                q.t = "n";
	                q.v = parseFloat(ctag.value);
	                break;
	              case "date":
	                q.t = "d";
	                q.v = parseDate(ctag["date-value"], WB.WBProps.date1904);
	                if (!opts.cellDates) {
	                  q.t = "n";
	                  q.v = datenum(q.v, WB.WBProps.date1904);
	                }
	                if (!q.z) q.z = "m/d/yy";
	                break;
	              case "time":
	                q.t = "n";
	                q.v = parse_isodur(ctag["time-value"]) / 86400;
	                if (opts.cellDates) {
	                  q.v = numdate(q.v);
	                  q.t = typeof q.v == "number" ? "n" : "d";
	                }
	                if (!q.z) q.z = "HH:MM:SS";
	                break;
	              case "number":
	                q.t = "n";
	                q.v = parseFloat(ctag["数据数值"]);
	                break;
	              default:
	                if (q.t === "string" || q.t === "text" || !q.t) {
	                  q.t = "s";
	                  if (ctag["string-value"] != null) {
	                    textp = unescapexml(ctag["string-value"]);
	                    textR = [];
	                  }
	                } else throw new Error("Unsupported value type " + q.t);
	            }
	          } else {
	            isstub = false;
	            if (q.t === "s") {
	              q.v = textp || "";
	              if (textR.length) q.R = textR;
	              isstub = textpidx == 0;
	            }
	            if (atag.Target) q.l = atag;
	            if (comments.length > 0) {
	              q.c = comments;
	              comments = [];
	            }
	            if (textp && opts.cellText !== false) q.w = textp;
	            if (isstub) {
	              q.t = "z";
	              delete q.v;
	            }
	            if (!isstub || opts.sheetStubs) {
	              if (!(opts.sheetRows && opts.sheetRows <= R)) {
	                for (var rpt = 0; rpt < rowpeat; ++rpt) {
	                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
	                  if (opts.dense) {
	                    if (!ws["!data"][R + rpt]) ws["!data"][R + rpt] = [];
	                    ws["!data"][R + rpt][C] = rpt == 0 ? q : dup(q);
	                    while (--colpeat > 0) ws["!data"][R + rpt][C + colpeat] = dup(q);
	                  } else {
	                    ws[encode_cell({
	                      r: R + rpt,
	                      c: C
	                    })] = q;
	                    while (--colpeat > 0) ws[encode_cell({
	                      r: R + rpt,
	                      c: C + colpeat
	                    })] = dup(q);
	                  }
	                  if (range.e.c <= C) range.e.c = C;
	                }
	              }
	            }
	            colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
	            C += colpeat - 1;
	            colpeat = 0;
	            q = {};
	            textp = "";
	            textR = [];
	          }
	          atag = {};
	          break;
	        case "document":
	        case "document-content":
	        case "电子表格文档":
	        case "spreadsheet":
	        case "主体":
	        case "scripts":
	        case "styles":
	        case "font-face-decls":
	        case "master-styles":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
	          break;
	        case "annotation":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
	            comment.t = textp;
	            if (textR.length) comment.R = textR;
	            comment.a = creator;
	            comments.push(comment);
	            textp = oldtextp;
	            textpidx = oldtextpidx;
	            textR = oldtextR;
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	            state.push([Rn[3], false]);
	            var annotag = parsexmltag(Rn[0], true);
	            if (!(annotag["display"] && parsexmlbool(annotag["display"]))) comments.hidden = true;
	            oldtextp = textp;
	            oldtextpidx = textpidx;
	            oldtextR = textR;
	            textp = "";
	            textpidx = 0;
	            textR = [];
	          }
	          creator = "";
	          creatoridx = 0;
	          break;
	        case "creator":
	          if (Rn[1] === "/") {
	            creator = str.slice(creatoridx, Rn.index);
	          } else creatoridx = Rn.index + Rn[0].length;
	          break;
	        case "meta":
	        case "元数据":
	        case "settings":
	        case "config-item-set":
	        case "config-item-map-indexed":
	        case "config-item-map-entry":
	        case "config-item-map-named":
	        case "shapes":
	        case "frame":
	        case "text-box":
	        case "image":
	        case "data-pilot-tables":
	        case "list-style":
	        case "form":
	        case "dde-links":
	        case "event-listeners":
	        case "chart":
	          if (Rn[1] === "/") {
	            if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], false]);
	          textp = "";
	          textpidx = 0;
	          textR = [];
	          break;
	        case "scientific-number":
	        case "currency-symbol":
	        case "fill-character":
	          break;
	        case "text-style":
	        case "boolean-style":
	        case "number-style":
	        case "currency-style":
	        case "percentage-style":
	        case "date-style":
	        case "time-style":
	          if (Rn[1] === "/") {
	            var xlmlidx = xlmlregex.lastIndex;
	            parse_ods_styles(str.slice(nfidx, xlmlregex.lastIndex), _opts, number_format_map);
	            xlmlregex.lastIndex = xlmlidx;
	          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
	            nfidx = xlmlregex.lastIndex - Rn[0].length;
	          }
	          break;
	        case "script":
	          break;
	        case "libraries":
	          break;
	        case "automatic-styles":
	          break;
	        case "default-style":
	        case "page-layout":
	          break;
	        case "style":
	          {
	            var styletag = parsexmltag(Rn[0], false);
	            if (styletag["family"] == "table-cell" && number_format_map[styletag["data-style-name"]]) styles[styletag["name"]] = number_format_map[styletag["data-style-name"]];
	          }
	          break;
	        case "map":
	          break;
	        case "font-face":
	          break;
	        case "paragraph-properties":
	          break;
	        case "table-properties":
	          break;
	        case "table-column-properties":
	          break;
	        case "table-row-properties":
	          break;
	        case "table-cell-properties":
	          break;
	        case "number":
	          break;
	        case "fraction":
	          break;
	        case "day":
	        case "month":
	        case "year":
	        case "era":
	        case "day-of-week":
	        case "week-of-year":
	        case "quarter":
	        case "hours":
	        case "minutes":
	        case "seconds":
	        case "am-pm":
	          break;
	        case "boolean":
	          break;
	        case "text":
	          if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") switch (state[state.length - 1][0]) {
	            case "number-style":
	            case "date-style":
	            case "time-style":
	              NF += str.slice(pidx, Rn.index);
	              break;
	          } else pidx = Rn.index + Rn[0].length;
	          break;
	        case "named-range":
	          tag = parsexmltag(Rn[0], false);
	          _Ref = ods_to_csf_3D(tag["cell-range-address"]);
	          var nrange = {
	            Name: tag.name,
	            Ref: _Ref[0] + "!" + _Ref[1]
	          };
	          if (intable) nrange.Sheet = SheetNames.length;
	          WB.Names.push(nrange);
	          break;
	        case "text-content":
	          break;
	        case "text-properties":
	          break;
	        case "embedded-text":
	          break;
	        case "body":
	        case "电子表格":
	          break;
	        case "forms":
	          break;
	        case "table-column":
	          break;
	        case "table-header-rows":
	          break;
	        case "table-rows":
	          break;
	        case "table-column-group":
	          break;
	        case "table-header-columns":
	          break;
	        case "table-columns":
	          break;
	        case "null-date":
	          tag = parsexmltag(Rn[0], false);
	          switch (tag["date-value"]) {
	            case "1904-01-01":
	              WB.WBProps.date1904 = true;
	              break;
	          }
	          break;
	        case "graphic-properties":
	          break;
	        case "calculation-settings":
	          break;
	        case "named-expressions":
	          break;
	        case "label-range":
	          break;
	        case "label-ranges":
	          break;
	        case "named-expression":
	          break;
	        case "sort":
	          break;
	        case "sort-by":
	          break;
	        case "sort-groups":
	          break;
	        case "tab":
	          break;
	        case "line-break":
	          break;
	        case "span":
	          break;
	        case "p":
	        case "文本串":
	          if (["master-styles"].indexOf(state[state.length - 1][0]) > -1) break;
	          if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
	            var ptp = parse_text_p(str.slice(textpidx, Rn.index));
	            textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
	          } else if (Rn[0].slice(-2) == "/>") {
	            textp += "\n";
	          } else {
	            parsexmltag(Rn[0], false);
	            textpidx = Rn.index + Rn[0].length;
	          }
	          break;
	        case "s":
	          break;
	        case "database-range":
	          if (Rn[1] === "/") break;
	          try {
	            _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
	            Sheets[_Ref[0]]["!autofilter"] = {
	              ref: _Ref[1]
	            };
	          } catch (e) {}
	          break;
	        case "date":
	          break;
	        case "object":
	          break;
	        case "title":
	        case "标题":
	          break;
	        case "desc":
	          break;
	        case "binary-data":
	          break;
	        case "table-source":
	          break;
	        case "scenario":
	          break;
	        case "iteration":
	          break;
	        case "content-validations":
	          break;
	        case "content-validation":
	          break;
	        case "help-message":
	          break;
	        case "error-message":
	          break;
	        case "database-ranges":
	          break;
	        case "filter":
	          break;
	        case "filter-and":
	          break;
	        case "filter-or":
	          break;
	        case "filter-condition":
	          break;
	        case "list-level-style-bullet":
	          break;
	        case "list-level-style-number":
	          break;
	        case "list-level-properties":
	          break;
	        case "sender-firstname":
	        case "sender-lastname":
	        case "sender-initials":
	        case "sender-title":
	        case "sender-position":
	        case "sender-email":
	        case "sender-phone-private":
	        case "sender-fax":
	        case "sender-company":
	        case "sender-phone-work":
	        case "sender-street":
	        case "sender-city":
	        case "sender-postal-code":
	        case "sender-country":
	        case "sender-state-or-province":
	        case "author-name":
	        case "author-initials":
	        case "chapter":
	        case "file-name":
	        case "template-name":
	        case "sheet-name":
	          break;
	        case "event-listener":
	          break;
	        case "initial-creator":
	        case "creation-date":
	        case "print-date":
	        case "generator":
	        case "document-statistic":
	        case "user-defined":
	        case "editing-duration":
	        case "editing-cycles":
	          break;
	        case "config-item":
	          break;
	        case "page-number":
	          break;
	        case "page-count":
	          break;
	        case "time":
	          break;
	        case "cell-range-source":
	          break;
	        case "detective":
	          break;
	        case "operation":
	          break;
	        case "highlighted-range":
	          break;
	        case "data-pilot-table":
	        case "source-cell-range":
	        case "source-service":
	        case "data-pilot-field":
	        case "data-pilot-level":
	        case "data-pilot-subtotals":
	        case "data-pilot-subtotal":
	        case "data-pilot-members":
	        case "data-pilot-member":
	        case "data-pilot-display-info":
	        case "data-pilot-sort-info":
	        case "data-pilot-layout-info":
	        case "data-pilot-field-reference":
	        case "data-pilot-groups":
	        case "data-pilot-group":
	        case "data-pilot-group-member":
	          break;
	        case "rect":
	          break;
	        case "dde-connection-decls":
	        case "dde-connection-decl":
	        case "dde-link":
	        case "dde-source":
	          break;
	        case "properties":
	          break;
	        case "property":
	          break;
	        case "a":
	          if (Rn[1] !== "/") {
	            atag = parsexmltag(Rn[0], false);
	            if (!atag.href) break;
	            atag.Target = unescapexml(atag.href);
	            delete atag.href;
	            if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
	              _Ref = ods_to_csf_3D(atag.Target.slice(1));
	              atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
	            } else if (atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
	          }
	          break;
	        case "table-protection":
	          break;
	        case "data-pilot-grand-total":
	          break;
	        case "office-document-common-attrs":
	          break;
	        default:
	          switch (Rn[2]) {
	            case "dc:":
	            case "calcext:":
	            case "loext:":
	            case "ooo:":
	            case "chartooo:":
	            case "draw:":
	            case "style:":
	            case "chart:":
	            case "form:":
	            case "uof:":
	            case "表:":
	            case "字:":
	              break;
	            default:
	              if (opts.WTF) throw new Error(Rn);
	          }
	      }
	      var out = {
	        Sheets: Sheets,
	        SheetNames: SheetNames,
	        Workbook: WB
	      };
	      if (opts.bookSheets) delete out.Sheets;
	      return out;
	    }
	    function parse_ods(zip, opts) {
	      opts = opts || ({});
	      if (safegetzipfile(zip, "META-INF/manifest.xml")) parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
	      var styles = getzipstr(zip, "styles.xml");
	      var Styles = styles && parse_ods_styles(utf8read(styles));
	      var content = getzipstr(zip, "content.xml");
	      if (!content) throw new Error("Missing content.xml in ODS / UOF file");
	      var wb = parse_content_xml(utf8read(content), opts, Styles);
	      if (safegetzipfile(zip, "meta.xml")) wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
	      wb.bookType = "ods";
	      return wb;
	    }
	    function parse_fods(data, opts) {
	      var wb = parse_content_xml(data, opts);
	      wb.bookType = "fods";
	      return wb;
	    }
	    var write_styles_ods = (function () {
	      var master_styles = ["<office:master-styles>", "<style:master-page style:name=\"mp1\" style:page-layout-name=\"mp1\">", "<style:header/>", "<style:header-left style:display=\"false\"/>", "<style:footer/>", "<style:footer-left style:display=\"false\"/>", "</style:master-page>", "</office:master-styles>"].join("");
	      var payload = "<office:document-styles " + wxt_helper({
	        "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
	        "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
	        "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
	        "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
	        "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
	        "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
	        "xmlns:xlink": "http://www.w3.org/1999/xlink",
	        "xmlns:dc": "http://purl.org/dc/elements/1.1/",
	        "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
	        "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
	        "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
	        "office:version": "1.2"
	      }) + ">" + master_styles + "</office:document-styles>";
	      return function wso() {
	        return XML_HEADER + payload;
	      };
	    })();
	    function write_number_format_ods(nf, nfidx) {
	      var type = "number", payload = "", nopts = {
	        "style:name": nfidx
	      }, c = "", i = 0;
	      nf = nf.replace(/"[$]"/g, "$");
	      j: {
	        if (nf.indexOf(";") > -1) {
	          console.error("Unsupported ODS Style Map exported.  Using first branch of " + nf);
	          nf = nf.slice(0, nf.indexOf(";"));
	        }
	        if (nf == "@") {
	          type = "text";
	          payload = "<number:text-content/>";
	          break j;
	        }
	        if (nf.indexOf(/\$/) > -1) {
	          type = "currency";
	        }
	        if (nf[i] == "\"") {
	          c = "";
	          while (nf[++i] != "\"" || nf[++i] == "\"") c += nf[i];
	          --i;
	          if (nf[i + 1] == "*") {
	            i++;
	            payload += "<number:fill-character>" + escapexml(c.replace(/""/g, "\"")) + "</number:fill-character>";
	          } else {
	            payload += "<number:text>" + escapexml(c.replace(/""/g, "\"")) + "</number:text>";
	          }
	          nf = nf.slice(i + 1);
	          i = 0;
	        }
	        var t = nf.match(/# (\?+)\/(\?+)/);
	        if (t) {
	          payload += writextag("number:fraction", null, {
	            "number:min-integer-digits": 0,
	            "number:min-numerator-digits": t[1].length,
	            "number:max-denominator-value": Math.max(+t[1].replace(/./g, "9"), +t[2].replace(/./g, "9"))
	          });
	          break j;
	        }
	        if (t = nf.match(/# (\?+)\/(\d+)/)) {
	          payload += writextag("number:fraction", null, {
	            "number:min-integer-digits": 0,
	            "number:min-numerator-digits": t[1].length,
	            "number:denominator-value": +t[2]
	          });
	          break j;
	        }
	        if (t = nf.match(/(\d+)(|\.\d+)%/)) {
	          type = "percentage";
	          payload += writextag("number:number", null, {
	            "number:decimal-places": t[2] && t.length - 1 || 0,
	            "number:min-decimal-places": t[2] && t.length - 1 || 0,
	            "number:min-integer-digits": t[1].length
	          }) + "<number:text>%</number:text>";
	          break j;
	        }
	        var has_time = false;
	        if (["y", "m", "d"].indexOf(nf[0]) > -1) {
	          type = "date";
	          k: for (; i < nf.length; ++i) switch (c = nf[i].toLowerCase()) {
	            case "h":
	            case "s":
	              has_time = true;
	              --i;
	              break k;
	            case "m":
	              l: for (var h = i + 1; h < nf.length; ++h) switch (nf[h]) {
	                case "y":
	                case "d":
	                  break l;
	                case "h":
	                case "s":
	                  has_time = true;
	                  --i;
	                  break k;
	              }
	            case "y":
	            case "d":
	              while ((nf[++i] || "").toLowerCase() == c[0]) c += c[0];
	              --i;
	              switch (c) {
	                case "y":
	                case "yy":
	                  payload += "<number:year/>";
	                  break;
	                case "yyy":
	                case "yyyy":
	                  payload += "<number:year number:style=\"long\"/>";
	                  break;
	                case "mmmmm":
	                  console.error("ODS has no equivalent of format |mmmmm|");
	                case "m":
	                case "mm":
	                case "mmm":
	                case "mmmm":
	                  payload += "<number:month number:style=\"" + (c.length % 2 ? "short" : "long") + "\" number:textual=\"" + (c.length >= 3 ? "true" : "false") + "\"/>";
	                  break;
	                case "d":
	                case "dd":
	                  payload += "<number:day number:style=\"" + (c.length % 2 ? "short" : "long") + "\"/>";
	                  break;
	                case "ddd":
	                case "dddd":
	                  payload += "<number:day-of-week number:style=\"" + (c.length % 2 ? "short" : "long") + "\"/>";
	                  break;
	              }
	              break;
	            case "\"":
	              while (nf[++i] != "\"" || nf[++i] == "\"") c += nf[i];
	              --i;
	              payload += "<number:text>" + escapexml(c.slice(1).replace(/""/g, "\"")) + "</number:text>";
	              break;
	            case "\\":
	              c = nf[++i];
	              payload += "<number:text>" + escapexml(c) + "</number:text>";
	              break;
	            case "/":
	            case ":":
	              payload += "<number:text>" + escapexml(c) + "</number:text>";
	              break;
	            default:
	              console.error("unrecognized character " + c + " in ODF format " + nf);
	          }
	          if (!has_time) break j;
	          nf = nf.slice(i + 1);
	          i = 0;
	        }
	        if (nf.match(/^\[?[hms]/)) {
	          if (type == "number") type = "time";
	          if (nf.match(/\[/)) {
	            nf = nf.replace(/[\[\]]/g, "");
	            nopts["number:truncate-on-overflow"] = "false";
	          }
	          for (; i < nf.length; ++i) switch (c = nf[i].toLowerCase()) {
	            case "h":
	            case "m":
	            case "s":
	              while ((nf[++i] || "").toLowerCase() == c[0]) c += c[0];
	              --i;
	              switch (c) {
	                case "h":
	                case "hh":
	                  payload += "<number:hours number:style=\"" + (c.length % 2 ? "short" : "long") + "\"/>";
	                  break;
	                case "m":
	                case "mm":
	                  payload += "<number:minutes number:style=\"" + (c.length % 2 ? "short" : "long") + "\"/>";
	                  break;
	                case "s":
	                case "ss":
	                  if (nf[i + 1] == ".") do {
	                    c += nf[i + 1];
	                    ++i;
	                  } while (nf[i + 1] == "0");
	                  payload += "<number:seconds number:style=\"" + (c.match("ss") ? "long" : "short") + "\"" + (c.match(/\./) ? " number:decimal-places=\"" + (c.match(/0+/) || [""])[0].length + "\"" : "") + "/>";
	                  break;
	              }
	              break;
	            case "\"":
	              while (nf[++i] != "\"" || nf[++i] == "\"") c += nf[i];
	              --i;
	              payload += "<number:text>" + escapexml(c.slice(1).replace(/""/g, "\"")) + "</number:text>";
	              break;
	            case "/":
	            case ":":
	              payload += "<number:text>" + escapexml(c) + "</number:text>";
	              break;
	            case "a":
	              if (nf.slice(i, i + 3).toLowerCase() == "a/p") {
	                payload += "<number:am-pm/>";
	                i += 2;
	                break;
	              }
	              if (nf.slice(i, i + 5).toLowerCase() == "am/pm") {
	                payload += "<number:am-pm/>";
	                i += 4;
	                break;
	              }
	            default:
	              console.error("unrecognized character " + c + " in ODF format " + nf);
	          }
	          break j;
	        }
	        if (nf.indexOf(/\$/) > -1) {
	          type = "currency";
	        }
	        if (nf[0] == "$") {
	          payload += "<number:currency-symbol number:language=\"en\" number:country=\"US\">$</number:currency-symbol>";
	          nf = nf.slice(1);
	          i = 0;
	        }
	        i = 0;
	        if (nf[i] == "\"") {
	          while (nf[++i] != "\"" || nf[++i] == "\"") c += nf[i];
	          --i;
	          if (nf[i + 1] == "*") {
	            i++;
	            payload += "<number:fill-character>" + escapexml(c.replace(/""/g, "\"")) + "</number:fill-character>";
	          } else {
	            payload += "<number:text>" + escapexml(c.replace(/""/g, "\"")) + "</number:text>";
	          }
	          nf = nf.slice(i + 1);
	          i = 0;
	        }
	        var np = nf.match(/([#0][0#,]*)(\.[0#]*|)(E[+]?0*|)/i);
	        if (!np || !np[0]) console.error("Could not find numeric part of " + nf); else {
	          var base = np[1].replace(/,/g, "");
	          payload += "<number:" + (np[3] ? "scientific-" : "") + "number" + " number:min-integer-digits=\"" + (base.indexOf("0") == -1 ? "0" : base.length - base.indexOf("0")) + "\"" + (np[0].indexOf(",") > -1 ? " number:grouping=\"true\"" : "") + (np[2] && " number:decimal-places=\"" + (np[2].length - 1) + "\"" || " number:decimal-places=\"0\"") + (np[3] && np[3].indexOf("+") > -1 ? " number:forced-exponent-sign=\"true\"" : "") + (np[3] ? " number:min-exponent-digits=\"" + np[3].match(/0+/)[0].length + "\"" : "") + ">" + "</number:" + (np[3] ? "scientific-" : "") + "number>";
	          i = np.index + np[0].length;
	        }
	        if (nf[i] == "\"") {
	          c = "";
	          while (nf[++i] != "\"" || nf[++i] == "\"") c += nf[i];
	          --i;
	          payload += "<number:text>" + escapexml(c.replace(/""/g, "\"")) + "</number:text>";
	        }
	      }
	      if (!payload) {
	        console.error("Could not generate ODS number format for |" + nf + "|");
	        return "";
	      }
	      return writextag("number:" + type + "-style", payload, nopts);
	    }
	    function write_names_ods(Names, SheetNames, idx) {
	      var scoped = [];
	      for (var namei = 0; namei < Names.length; ++namei) {
	        var name = Names[namei];
	        if (!name) continue;
	        if (name.Sheet == (idx == -1 ? null : idx)) scoped.push(name);
	      }
	      if (!scoped.length) return "";
	      return "      <table:named-expressions>\n" + scoped.map(function (name) {
	        var odsref = (idx == -1 ? "$" : "") + csf_to_ods_3D(name.Ref);
	        return "        " + writextag("table:named-range", null, {
	          "table:name": name.Name,
	          "table:cell-range-address": odsref,
	          "table:base-cell-address": odsref.replace(/[\.]?[^\.]*$/, ".$A$1")
	        });
	      }).join("\n") + "\n      </table:named-expressions>\n";
	    }
	    var write_content_ods = (function () {
	      var write_text_p = function (text) {
	        return escapexml(text).replace(/  +/g, function ($$) {
	          return "<text:s text:c=\"" + $$.length + "\"/>";
	        }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
	      };
	      var null_cell_xml = "          <table:table-cell />\n";
	      var write_ws = function (ws, wb, i, opts, nfs, date1904) {
	        var o = [];
	        o.push("      <table:table table:name=\"" + escapexml(wb.SheetNames[i]) + "\" table:style-name=\"ta1\">\n");
	        var R = 0, C = 0, range = decode_range(ws["!ref"] || "A1");
	        var marr = ws["!merges"] || [], mi = 0;
	        var dense = ws["!data"] != null;
	        if (ws["!cols"]) {
	          for (C = 0; C <= range.e.c; ++C) o.push("        <table:table-column" + (ws["!cols"][C] ? " table:style-name=\"co" + ws["!cols"][C].ods + "\"" : "") + "></table:table-column>\n");
	        }
	        var H = "", ROWS = ws["!rows"] || [];
	        for (R = 0; R < range.s.r; ++R) {
	          H = ROWS[R] ? " table:style-name=\"ro" + ROWS[R].ods + "\"" : "";
	          o.push("        <table:table-row" + H + "></table:table-row>\n");
	        }
	        for (; R <= range.e.r; ++R) {
	          H = ROWS[R] ? " table:style-name=\"ro" + ROWS[R].ods + "\"" : "";
	          o.push("        <table:table-row" + H + ">\n");
	          for (C = 0; C < range.s.c; ++C) o.push(null_cell_xml);
	          for (; C <= range.e.c; ++C) {
	            var skip = false, ct = {}, textp = "";
	            for (mi = 0; mi != marr.length; ++mi) {
	              if (marr[mi].s.c > C) continue;
	              if (marr[mi].s.r > R) continue;
	              if (marr[mi].e.c < C) continue;
	              if (marr[mi].e.r < R) continue;
	              if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
	              ct["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
	              ct["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
	              break;
	            }
	            if (skip) {
	              o.push("          <table:covered-table-cell/>\n");
	              continue;
	            }
	            var ref = encode_cell({
	              r: R,
	              c: C
	            }), cell = dense ? (ws["!data"][R] || [])[C] : ws[ref];
	            if (cell && cell.f) {
	              ct["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
	              if (cell.F) {
	                if (cell.F.slice(0, ref.length) == ref) {
	                  var _Fref = decode_range(cell.F);
	                  ct["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
	                  ct["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
	                }
	              }
	            }
	            if (!cell) {
	              o.push(null_cell_xml);
	              continue;
	            }
	            switch (cell.t) {
	              case "b":
	                textp = cell.v ? "TRUE" : "FALSE";
	                ct["office:value-type"] = "boolean";
	                ct["office:boolean-value"] = cell.v ? "true" : "false";
	                break;
	              case "n":
	                textp = cell.w || String(cell.v || 0);
	                ct["office:value-type"] = "float";
	                ct["office:value"] = cell.v || 0;
	                break;
	              case "s":
	              case "str":
	                textp = cell.v == null ? "" : cell.v;
	                ct["office:value-type"] = "string";
	                break;
	              case "d":
	                textp = cell.w || parseDate(cell.v, date1904).toISOString();
	                ct["office:value-type"] = "date";
	                ct["office:date-value"] = parseDate(cell.v, date1904).toISOString();
	                ct["table:style-name"] = "ce1";
	                break;
	              default:
	                o.push(null_cell_xml);
	                continue;
	            }
	            var text_p = write_text_p(textp);
	            if (cell.l && cell.l.Target) {
	              var _tgt = cell.l.Target;
	              _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
	              if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/)) _tgt = "../" + _tgt;
	              text_p = writextag("text:a", text_p, {
	                "xlink:href": _tgt.replace(/&/g, "&amp;")
	              });
	            }
	            if (nfs[cell.z]) ct["table:style-name"] = "ce" + nfs[cell.z].slice(1);
	            var payload = writextag("text:p", text_p, {});
	            if (cell.c) {
	              var acreator = "", apayload = "", aprops = {};
	              for (var ci = 0; ci < cell.c.length; ++ci) {
	                if (!acreator && cell.c[ci].a) acreator = cell.c[ci].a;
	                apayload += "<text:p>" + write_text_p(cell.c[ci].t) + "</text:p>";
	              }
	              if (!cell.c.hidden) aprops["office:display"] = true;
	              payload = writextag("office:annotation", apayload, aprops) + payload;
	            }
	            o.push("          " + writextag("table:table-cell", payload, ct) + "\n");
	          }
	          o.push("        </table:table-row>\n");
	        }
	        if ((wb.Workbook || ({})).Names) o.push(write_names_ods(wb.Workbook.Names, wb.SheetNames, i));
	        o.push("      </table:table>\n");
	        return o.join("");
	      };
	      var write_automatic_styles_ods = function (o, wb) {
	        o.push(" <office:automatic-styles>\n");
	        var cidx = 0;
	        wb.SheetNames.map(function (n) {
	          return wb.Sheets[n];
	        }).forEach(function (ws) {
	          if (!ws) return;
	          if (ws["!cols"]) {
	            for (var C = 0; C < ws["!cols"].length; ++C) if (ws["!cols"][C]) {
	              var colobj = ws["!cols"][C];
	              if (colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;
	              process_col(colobj);
	              colobj.ods = cidx;
	              var w = ws["!cols"][C].wpx + "px";
	              o.push("  <style:style style:name=\"co" + cidx + "\" style:family=\"table-column\">\n");
	              o.push("   <style:table-column-properties fo:break-before=\"auto\" style:column-width=\"" + w + "\"/>\n");
	              o.push("  </style:style>\n");
	              ++cidx;
	            }
	          }
	        });
	        var ridx = 0;
	        wb.SheetNames.map(function (n) {
	          return wb.Sheets[n];
	        }).forEach(function (ws) {
	          if (!ws) return;
	          if (ws["!rows"]) {
	            for (var R = 0; R < ws["!rows"].length; ++R) if (ws["!rows"][R]) {
	              ws["!rows"][R].ods = ridx;
	              var h = ws["!rows"][R].hpx + "px";
	              o.push("  <style:style style:name=\"ro" + ridx + "\" style:family=\"table-row\">\n");
	              o.push("   <style:table-row-properties fo:break-before=\"auto\" style:row-height=\"" + h + "\"/>\n");
	              o.push("  </style:style>\n");
	              ++ridx;
	            }
	          }
	        });
	        o.push("  <style:style style:name=\"ta1\" style:family=\"table\" style:master-page-name=\"mp1\">\n");
	        o.push("   <style:table-properties table:display=\"true\" style:writing-mode=\"lr-tb\"/>\n");
	        o.push("  </style:style>\n");
	        o.push("  <number:date-style style:name=\"N37\" number:automatic-order=\"true\">\n");
	        o.push("   <number:month number:style=\"long\"/>\n");
	        o.push("   <number:text>/</number:text>\n");
	        o.push("   <number:day number:style=\"long\"/>\n");
	        o.push("   <number:text>/</number:text>\n");
	        o.push("   <number:year/>\n");
	        o.push("  </number:date-style>\n");
	        var nfs = {};
	        var nfi = 69;
	        wb.SheetNames.map(function (n) {
	          return wb.Sheets[n];
	        }).forEach(function (ws) {
	          if (!ws) return;
	          var dense = ws["!data"] != null;
	          var range = decode_range(ws["!ref"]);
	          for (var R = 0; R <= range.e.r; ++R) for (var C = 0; C <= range.e.c; ++C) {
	            var c = dense ? (ws["!data"][R] || [])[C] : ws[encode_cell({
	              r: R,
	              c: C
	            })];
	            if (!c || !c.z || c.z.toLowerCase() == "general") continue;
	            if (!nfs[c.z]) {
	              var out = write_number_format_ods(c.z, "N" + nfi);
	              if (out) {
	                nfs[c.z] = "N" + nfi;
	                ++nfi;
	                o.push(out + "\n");
	              }
	            }
	          }
	        });
	        o.push("  <style:style style:name=\"ce1\" style:family=\"table-cell\" style:parent-style-name=\"Default\" style:data-style-name=\"N37\"/>\n");
	        keys(nfs).forEach(function (nf) {
	          o.push("<style:style style:name=\"ce" + nfs[nf].slice(1) + "\" style:family=\"table-cell\" style:parent-style-name=\"Default\" style:data-style-name=\"" + nfs[nf] + "\"/>\n");
	        });
	        o.push(" </office:automatic-styles>\n");
	        return nfs;
	      };
	      return function wcx(wb, opts) {
	        var o = [XML_HEADER];
	        var attr = wxt_helper({
	          "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
	          "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
	          "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
	          "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
	          "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
	          "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
	          "xmlns:xlink": "http://www.w3.org/1999/xlink",
	          "xmlns:dc": "http://purl.org/dc/elements/1.1/",
	          "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
	          "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
	          "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
	          "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
	          "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
	          "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
	          "xmlns:math": "http://www.w3.org/1998/Math/MathML",
	          "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
	          "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
	          "xmlns:ooo": "http://openoffice.org/2004/office",
	          "xmlns:ooow": "http://openoffice.org/2004/writer",
	          "xmlns:oooc": "http://openoffice.org/2004/calc",
	          "xmlns:dom": "http://www.w3.org/2001/xml-events",
	          "xmlns:xforms": "http://www.w3.org/2002/xforms",
	          "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
	          "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
	          "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
	          "xmlns:rpt": "http://openoffice.org/2005/report",
	          "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
	          "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
	          "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
	          "xmlns:tableooo": "http://openoffice.org/2009/table",
	          "xmlns:drawooo": "http://openoffice.org/2010/draw",
	          "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
	          "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
	          "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
	          "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
	          "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
	          "office:version": "1.2"
	        });
	        var fods = wxt_helper({
	          "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
	          "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
	        });
	        if (opts.bookType == "fods") {
	          o.push("<office:document" + attr + fods + ">\n");
	          o.push(write_meta_ods().replace(/<office:document-meta.*?>/, "").replace(/<\/office:document-meta>/, "") + "\n");
	        } else o.push("<office:document-content" + attr + ">\n");
	        var nfs = write_automatic_styles_ods(o, wb);
	        o.push("  <office:body>\n");
	        o.push("    <office:spreadsheet>\n");
	        if (((wb.Workbook || ({})).WBProps || ({})).date1904) o.push("      <table:calculation-settings table:case-sensitive=\"false\" table:search-criteria-must-apply-to-whole-cell=\"true\" table:use-wildcards=\"true\" table:use-regular-expressions=\"false\" table:automatic-find-labels=\"false\">\n        <table:null-date table:date-value=\"1904-01-01\"/>\n      </table:calculation-settings>\n");
	        for (var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts, nfs, ((wb.Workbook || ({})).WBProps || ({})).date1904));
	        if ((wb.Workbook || ({})).Names) o.push(write_names_ods(wb.Workbook.Names, wb.SheetNames, -1));
	        o.push("    </office:spreadsheet>\n");
	        o.push("  </office:body>\n");
	        if (opts.bookType == "fods") o.push("</office:document>"); else o.push("</office:document-content>");
	        return o.join("");
	      };
	    })();
	    function write_ods(wb, opts) {
	      if (opts.bookType == "fods") return write_content_ods(wb, opts);
	      var zip = zip_new();
	      var f = "";
	      var manifest = [];
	      var rdf = [];
	      f = "mimetype";
	      zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");
	      f = "content.xml";
	      zip_add_file(zip, f, write_content_ods(wb, opts));
	      manifest.push([f, "text/xml"]);
	      rdf.push([f, "ContentFile"]);
	      f = "styles.xml";
	      zip_add_file(zip, f, write_styles_ods(wb, opts));
	      manifest.push([f, "text/xml"]);
	      rdf.push([f, "StylesFile"]);
	      f = "meta.xml";
	      zip_add_file(zip, f, XML_HEADER + write_meta_ods());
	      manifest.push([f, "text/xml"]);
	      rdf.push([f, "MetadataFile"]);
	      f = "manifest.rdf";
	      zip_add_file(zip, f, write_rdf(rdf));
	      manifest.push([f, "application/rdf+xml"]);
	      f = "META-INF/manifest.xml";
	      zip_add_file(zip, f, write_manifest(manifest));
	      return zip;
	    }
	    var subarray = (function () {
	      try {
	        if (typeof Uint8Array == "undefined") return "slice";
	        if (typeof Uint8Array.prototype.subarray == "undefined") return "slice";
	        if (typeof Buffer !== "undefined") {
	          if (typeof Buffer.prototype.subarray == "undefined") return "slice";
	          if ((typeof Buffer.from == "function" ? Buffer.from([72, 62]) : new Buffer([72, 62])) instanceof Uint8Array) return "subarray";
	          return "slice";
	        }
	        return "subarray";
	      } catch (e) {
	        return "slice";
	      }
	    })();
	    function u8_to_dataview(array) {
	      return new DataView(array.buffer, array.byteOffset, array.byteLength);
	    }
	    function u8str(u8) {
	      return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
	    }
	    function stru8(str) {
	      return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
	    }
	    function u8concat(u8a) {
	      var len = 0;
	      for (var i = 0; i < u8a.length; ++i) len += u8a[i].length;
	      var out = new Uint8Array(len);
	      var off = 0;
	      for (i = 0; i < u8a.length; ++i) {
	        var u8 = u8a[i], L = u8.length;
	        if (L < 250) {
	          for (var j = 0; j < L; ++j) out[off++] = u8[j];
	        } else {
	          out.set(u8, off);
	          off += L;
	        }
	      }
	      return out;
	    }
	    function popcnt(x) {
	      x -= x >> 1 & 1431655765;
	      x = (x & 858993459) + (x >> 2 & 858993459);
	      return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
	    }
	    function readDecimal128LE(buf, offset) {
	      var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
	      var mantissa = buf[offset + 14] & 1;
	      for (var j = offset + 13; j >= offset; --j) mantissa = mantissa * 256 + buf[j];
	      return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
	    }
	    function writeDecimal128LE(buf, offset, value) {
	      var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 16;
	      var mantissa = value / Math.pow(10, exp - 6176);
	      buf[offset + 15] |= exp >> 7;
	      buf[offset + 14] |= (exp & 127) << 1;
	      for (var i = 0; mantissa >= 1; (++i, mantissa /= 256)) buf[offset + i] = mantissa & 255;
	      buf[offset + 15] |= value >= 0 ? 0 : 128;
	    }
	    function parse_varint49(buf, ptr) {
	      var l = ptr.l;
	      var usz = buf[l] & 127;
	      varint: if (buf[l++] >= 128) {
	        usz |= (buf[l] & 127) << 7;
	        if (buf[l++] < 128) break varint;
	        usz |= (buf[l] & 127) << 14;
	        if (buf[l++] < 128) break varint;
	        usz |= (buf[l] & 127) << 21;
	        if (buf[l++] < 128) break varint;
	        usz += (buf[l] & 127) * Math.pow(2, 28);
	        ++l;
	        if (buf[l++] < 128) break varint;
	        usz += (buf[l] & 127) * Math.pow(2, 35);
	        ++l;
	        if (buf[l++] < 128) break varint;
	        usz += (buf[l] & 127) * Math.pow(2, 42);
	        ++l;
	        if (buf[l++] < 128) break varint;
	      }
	      ptr.l = l;
	      return usz;
	    }
	    function write_varint49(v) {
	      var usz = new Uint8Array(7);
	      usz[0] = v & 127;
	      var L = 1;
	      sz: if (v > 127) {
	        usz[L - 1] |= 128;
	        usz[L] = v >> 7 & 127;
	        ++L;
	        if (v <= 16383) break sz;
	        usz[L - 1] |= 128;
	        usz[L] = v >> 14 & 127;
	        ++L;
	        if (v <= 2097151) break sz;
	        usz[L - 1] |= 128;
	        usz[L] = v >> 21 & 127;
	        ++L;
	        if (v <= 268435455) break sz;
	        usz[L - 1] |= 128;
	        usz[L] = v / 256 >>> 21 & 127;
	        ++L;
	        if (v <= 34359738367) break sz;
	        usz[L - 1] |= 128;
	        usz[L] = v / 65536 >>> 21 & 127;
	        ++L;
	        if (v <= 4398046511103) break sz;
	        usz[L - 1] |= 128;
	        usz[L] = v / 16777216 >>> 21 & 127;
	        ++L;
	      }
	      return usz[subarray](0, L);
	    }
	    function parse_packed_varints(buf) {
	      var ptr = {
	        l: 0
	      };
	      var out = [];
	      while (ptr.l < buf.length) out.push(parse_varint49(buf, ptr));
	      return out;
	    }
	    function write_packed_varints(nums) {
	      return u8concat(nums.map(function (x) {
	        return write_varint49(x);
	      }));
	    }
	    function varint_to_i32(buf) {
	      var l = 0, i32 = buf[l] & 127;
	      if (buf[l++] < 128) return i32;
	      i32 |= (buf[l] & 127) << 7;
	      if (buf[l++] < 128) return i32;
	      i32 |= (buf[l] & 127) << 14;
	      if (buf[l++] < 128) return i32;
	      i32 |= (buf[l] & 127) << 21;
	      if (buf[l++] < 128) return i32;
	      i32 |= (buf[l] & 15) << 28;
	      return i32;
	    }
	    function parse_shallow(buf) {
	      var out = [], ptr = {
	        l: 0
	      };
	      while (ptr.l < buf.length) {
	        var off = ptr.l;
	        var num = parse_varint49(buf, ptr);
	        var type = num & 7;
	        num = num / 8 | 0;
	        var data;
	        var l = ptr.l;
	        switch (type) {
	          case 0:
	            {
	              while (buf[l++] >= 128) ;
	              data = buf[subarray](ptr.l, l);
	              ptr.l = l;
	            }
	            break;
	          case 1:
	            {
	              data = buf[subarray](l, l + 8);
	              ptr.l = l + 8;
	            }
	            break;
	          case 2:
	            {
	              var len = parse_varint49(buf, ptr);
	              data = buf[subarray](ptr.l, ptr.l + len);
	              ptr.l += len;
	            }
	            break;
	          case 5:
	            {
	              data = buf[subarray](l, l + 4);
	              ptr.l = l + 4;
	            }
	            break;
	          default:
	            throw new Error(("PB Type ").concat(type, " for Field ").concat(num, " at offset ").concat(off));
	        }
	        var v = {
	          data: data,
	          type: type
	        };
	        if (out[num] == null) out[num] = [];
	        out[num].push(v);
	      }
	      return out;
	    }
	    function write_shallow(proto) {
	      var out = [];
	      proto.forEach(function (field, idx) {
	        if (idx == 0) return;
	        field.forEach(function (item) {
	          if (!item.data) return;
	          out.push(write_varint49(idx * 8 + item.type));
	          if (item.type == 2) out.push(write_varint49(item.data.length));
	          out.push(item.data);
	        });
	      });
	      return u8concat(out);
	    }
	    function mappa(data, cb) {
	      return (data == null ? void 0 : data.map(function (d) {
	        return cb(d.data);
	      })) || [];
	    }
	    function parse_iwa_file(buf) {
	      var _a;
	      var out = [], ptr = {
	        l: 0
	      };
	      while (ptr.l < buf.length) {
	        var len = parse_varint49(buf, ptr);
	        var ai = parse_shallow(buf[subarray](ptr.l, ptr.l + len));
	        ptr.l += len;
	        var res = {
	          id: varint_to_i32(ai[1][0].data),
	          messages: []
	        };
	        ai[2].forEach(function (b) {
	          var mi = parse_shallow(b.data);
	          var fl = varint_to_i32(mi[3][0].data);
	          res.messages.push({
	            meta: mi,
	            data: buf[subarray](ptr.l, ptr.l + fl)
	          });
	          ptr.l += fl;
	        });
	        if ((_a = ai[3]) == null ? void 0 : _a[0]) res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
	        out.push(res);
	      }
	      return out;
	    }
	    function write_iwa_file(ias) {
	      var bufs = [];
	      ias.forEach(function (ia) {
	        var ai = [[], [{
	          data: write_varint49(ia.id),
	          type: 0
	        }], []];
	        if (ia.merge != null) ai[3] = [{
	          data: write_varint49(+!!ia.merge),
	          type: 0
	        }];
	        var midata = [];
	        ia.messages.forEach(function (mi) {
	          midata.push(mi.data);
	          mi.meta[3] = [{
	            type: 0,
	            data: write_varint49(mi.data.length)
	          }];
	          ai[2].push({
	            data: write_shallow(mi.meta),
	            type: 2
	          });
	        });
	        var aipayload = write_shallow(ai);
	        bufs.push(write_varint49(aipayload.length));
	        bufs.push(aipayload);
	        midata.forEach(function (mid) {
	          return bufs.push(mid);
	        });
	      });
	      return u8concat(bufs);
	    }
	    function parse_snappy_chunk(type, buf) {
	      if (type != 0) throw new Error(("Unexpected Snappy chunk type ").concat(type));
	      var ptr = {
	        l: 0
	      };
	      var usz = parse_varint49(buf, ptr);
	      var chunks = [];
	      var l = ptr.l;
	      while (l < buf.length) {
	        var tag = buf[l] & 3;
	        if (tag == 0) {
	          var len = buf[l++] >> 2;
	          if (len < 60) ++len; else {
	            var c = len - 59;
	            len = buf[l];
	            if (c > 1) len |= buf[l + 1] << 8;
	            if (c > 2) len |= buf[l + 2] << 16;
	            if (c > 3) len |= buf[l + 3] << 24;
	            len >>>= 0;
	            len++;
	            l += c;
	          }
	          chunks.push(buf[subarray](l, l + len));
	          l += len;
	          continue;
	        } else {
	          var offset = 0, length = 0;
	          if (tag == 1) {
	            length = (buf[l] >> 2 & 7) + 4;
	            offset = (buf[l++] & 224) << 3;
	            offset |= buf[l++];
	          } else {
	            length = (buf[l++] >> 2) + 1;
	            if (tag == 2) {
	              offset = buf[l] | buf[l + 1] << 8;
	              l += 2;
	            } else {
	              offset = (buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16 | buf[l + 3] << 24) >>> 0;
	              l += 4;
	            }
	          }
	          if (offset == 0) throw new Error("Invalid offset 0");
	          var j = chunks.length - 1, off = offset;
	          while (j >= 0 && off >= chunks[j].length) {
	            off -= chunks[j].length;
	            --j;
	          }
	          if (j < 0) {
	            if (off == 0) off = chunks[j = 0].length; else throw new Error("Invalid offset beyond length");
	          }
	          if (length < off) chunks.push(chunks[j][subarray](chunks[j].length - off, chunks[j].length - off + length)); else {
	            if (off > 0) {
	              chunks.push(chunks[j][subarray](chunks[j].length - off));
	              length -= off;
	            }
	            ++j;
	            while (length >= chunks[j].length) {
	              chunks.push(chunks[j]);
	              length -= chunks[j].length;
	              ++j;
	            }
	            if (length) chunks.push(chunks[j][subarray](0, length));
	          }
	          if (chunks.length > 25) chunks = [u8concat(chunks)];
	        }
	      }
	      var clen = 0;
	      for (var u8i = 0; u8i < chunks.length; ++u8i) clen += chunks[u8i].length;
	      if (clen != usz) throw new Error(("Unexpected length: ").concat(clen, " != ").concat(usz));
	      return chunks;
	    }
	    function decompress_iwa_file(buf) {
	      if (Array.isArray(buf)) buf = new Uint8Array(buf);
	      var out = [];
	      var l = 0;
	      while (l < buf.length) {
	        var t = buf[l++];
	        var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
	        l += 3;
	        out.push.apply(out, parse_snappy_chunk(t, buf[subarray](l, l + len)));
	        l += len;
	      }
	      if (l !== buf.length) throw new Error("data is not a valid framed stream!");
	      return out.length == 1 ? out[0] : u8concat(out);
	    }
	    function compress_iwa_file(buf) {
	      var out = [];
	      var l = 0;
	      while (l < buf.length) {
	        var c = Math.min(buf.length - l, 268435455);
	        var frame = new Uint8Array(4);
	        out.push(frame);
	        var usz = write_varint49(c);
	        var L = usz.length;
	        out.push(usz);
	        if (c <= 60) {
	          L++;
	          out.push(new Uint8Array([c - 1 << 2]));
	        } else if (c <= 256) {
	          L += 2;
	          out.push(new Uint8Array([240, c - 1 & 255]));
	        } else if (c <= 65536) {
	          L += 3;
	          out.push(new Uint8Array([244, c - 1 & 255, c - 1 >> 8 & 255]));
	        } else if (c <= 16777216) {
	          L += 4;
	          out.push(new Uint8Array([248, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255]));
	        } else if (c <= 4294967296) {
	          L += 5;
	          out.push(new Uint8Array([252, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255, c - 1 >>> 24 & 255]));
	        }
	        out.push(buf[subarray](l, l + c));
	        L += c;
	        frame[0] = 0;
	        frame[1] = L & 255;
	        frame[2] = L >> 8 & 255;
	        frame[3] = L >> 16 & 255;
	        l += c;
	      }
	      return u8concat(out);
	    }
	    var numbers_lut_new = function () {
	      return {
	        sst: [],
	        rsst: [],
	        ofmt: [],
	        nfmt: [],
	        fmla: [],
	        ferr: [],
	        cmnt: []
	      };
	    };
	    function numbers_format_cell(cell, t, flags, ofmt, nfmt) {
	      var _a, _b, _c, _d;
	      var ctype = t & 255, ver = t >> 8;
	      var fmt = ver >= 5 ? nfmt : ofmt;
	      dur: if (flags & (ver > 4 ? 8 : 4) && cell.t == "n" && ctype == 7) {
	        var dstyle = ((_a = fmt[7]) == null ? void 0 : _a[0]) ? varint_to_i32(fmt[7][0].data) : -1;
	        if (dstyle == -1) break dur;
	        var dmin = ((_b = fmt[15]) == null ? void 0 : _b[0]) ? varint_to_i32(fmt[15][0].data) : -1;
	        var dmax = ((_c = fmt[16]) == null ? void 0 : _c[0]) ? varint_to_i32(fmt[16][0].data) : -1;
	        var auto = ((_d = fmt[40]) == null ? void 0 : _d[0]) ? varint_to_i32(fmt[40][0].data) : -1;
	        var d = cell.v, dd = d;
	        autodur: if (auto) {
	          if (d == 0) {
	            dmin = dmax = 2;
	            break autodur;
	          }
	          if (d >= 604800) dmin = 1; else if (d >= 86400) dmin = 2; else if (d >= 3600) dmin = 4; else if (d >= 60) dmin = 8; else if (d >= 1) dmin = 16; else dmin = 32;
	          if (Math.floor(d) != d) dmax = 32; else if (d % 60) dmax = 16; else if (d % 3600) dmax = 8; else if (d % 86400) dmax = 4; else if (d % 604800) dmax = 2;
	          if (dmax < dmin) dmax = dmin;
	        }
	        if (dmin == -1 || dmax == -1) break dur;
	        var dstr = [], zstr = [];
	        if (dmin == 1) {
	          dd = d / 604800;
	          if (dmax == 1) {
	            zstr.push("d\"d\"");
	          } else {
	            dd |= 0;
	            d -= 604800 * dd;
	          }
	          dstr.push(dd + (dstyle == 2 ? " week" + (dd == 1 ? "" : "s") : dstyle == 1 ? "w" : ""));
	        }
	        if (dmin <= 2 && dmax >= 2) {
	          dd = d / 86400;
	          if (dmax > 2) {
	            dd |= 0;
	            d -= 86400 * dd;
	          }
	          zstr.push("d\"d\"");
	          dstr.push(dd + (dstyle == 2 ? " day" + (dd == 1 ? "" : "s") : dstyle == 1 ? "d" : ""));
	        }
	        if (dmin <= 4 && dmax >= 4) {
	          dd = d / 3600;
	          if (dmax > 4) {
	            dd |= 0;
	            d -= 3600 * dd;
	          }
	          zstr.push((dmin >= 4 ? "[h]" : "h") + "\"h\"");
	          dstr.push(dd + (dstyle == 2 ? " hour" + (dd == 1 ? "" : "s") : dstyle == 1 ? "h" : ""));
	        }
	        if (dmin <= 8 && dmax >= 8) {
	          dd = d / 60;
	          if (dmax > 8) {
	            dd |= 0;
	            d -= 60 * dd;
	          }
	          zstr.push((dmin >= 8 ? "[m]" : "m") + "\"m\"");
	          if (dstyle == 0) dstr.push((dmin == 8 && dmax == 8 || dd >= 10 ? "" : "0") + dd); else dstr.push(dd + (dstyle == 2 ? " minute" + (dd == 1 ? "" : "s") : dstyle == 1 ? "m" : ""));
	        }
	        if (dmin <= 16 && dmax >= 16) {
	          dd = d;
	          if (dmax > 16) {
	            dd |= 0;
	            d -= dd;
	          }
	          zstr.push((dmin >= 16 ? "[s]" : "s") + "\"s\"");
	          if (dstyle == 0) dstr.push((dmax == 16 && dmin == 16 || dd >= 10 ? "" : "0") + dd); else dstr.push(dd + (dstyle == 2 ? " second" + (dd == 1 ? "" : "s") : dstyle == 1 ? "s" : ""));
	        }
	        if (dmax >= 32) {
	          dd = Math.round(1000 * d);
	          if (dmin < 32) zstr.push(".000\"ms\"");
	          if (dstyle == 0) dstr.push((dd >= 100 ? "" : dd >= 10 ? "0" : "00") + dd); else dstr.push(dd + (dstyle == 2 ? " millisecond" + (dd == 1 ? "" : "s") : dstyle == 1 ? "ms" : ""));
	        }
	        cell.w = dstr.join(dstyle == 0 ? ":" : " ");
	        cell.z = zstr.join(dstyle == 0 ? "\":\"" : " ");
	        if (dstyle == 0) cell.w = cell.w.replace(/:(\d\d\d)$/, ".$1");
	      }
	    }
	    function parse_old_storage(buf, lut, v, opts) {
	      var dv = u8_to_dataview(buf);
	      var flags = dv.getUint32(4, true);
	      var ridx = -1, sidx = -1, zidx = -1, ieee = NaN, dc = 0, dt = new Date(Date.UTC(2001, 0, 1));
	      var doff = v > 1 ? 12 : 8;
	      if (flags & 2) {
	        zidx = dv.getUint32(doff, true);
	        doff += 4;
	      }
	      doff += popcnt(flags & (v > 1 ? 3468 : 396)) * 4;
	      if (flags & 512) {
	        ridx = dv.getUint32(doff, true);
	        doff += 4;
	      }
	      doff += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
	      if (flags & 16) {
	        sidx = dv.getUint32(doff, true);
	        doff += 4;
	      }
	      if (flags & 32) {
	        ieee = dv.getFloat64(doff, true);
	        doff += 8;
	      }
	      if (flags & 64) {
	        dt.setTime(dt.getTime() + (dc = dv.getFloat64(doff, true)) * 1000);
	        doff += 8;
	      }
	      if (v > 1) {
	        flags = dv.getUint32(8, true) >>> 16;
	        if (flags & 255) {
	          if (zidx == -1) zidx = dv.getUint32(doff, true);
	          doff += 4;
	        }
	      }
	      var ret;
	      var t = buf[v >= 4 ? 1 : 2];
	      switch (t) {
	        case 0:
	          return void 0;
	        case 2:
	          ret = {
	            t: "n",
	            v: ieee
	          };
	          break;
	        case 3:
	          ret = {
	            t: "s",
	            v: lut.sst[sidx]
	          };
	          break;
	        case 5:
	          {
	            if (opts == null ? void 0 : opts.cellDates) ret = {
	              t: "d",
	              v: dt
	            }; else ret = {
	              t: "n",
	              v: dc / 86400 + 35430,
	              z: table_fmt[14]
	            };
	          }
	          break;
	        case 6:
	          ret = {
	            t: "b",
	            v: ieee > 0
	          };
	          break;
	        case 7:
	          ret = {
	            t: "n",
	            v: ieee
	          };
	          break;
	        case 8:
	          ret = {
	            t: "e",
	            v: 0
	          };
	          break;
	        case 9:
	          {
	            if (ridx > -1) {
	              var rts = lut.rsst[ridx];
	              ret = {
	                t: "s",
	                v: rts.v
	              };
	              if (rts.l) ret.l = {
	                Target: rts.l
	              };
	            } else throw new Error(("Unsupported cell type ").concat(buf[subarray](0, 4)));
	          }
	          break;
	        default:
	          throw new Error(("Unsupported cell type ").concat(buf[subarray](0, 4)));
	      }
	      if (zidx > -1) numbers_format_cell(ret, t | v << 8, flags, lut.ofmt[zidx], lut.nfmt[zidx]);
	      if (t == 7) ret.v /= 86400;
	      return ret;
	    }
	    function parse_new_storage(buf, lut, opts) {
	      var dv = u8_to_dataview(buf);
	      dv.getUint32(4, true);
	      var fields = dv.getUint32(8, true);
	      var doff = 12;
	      var ridx = -1, sidx = -1, zidx = -1, d128 = NaN, ieee = NaN, dc = 0, dt = new Date(Date.UTC(2001, 0, 1));
	      if (fields & 1) {
	        d128 = readDecimal128LE(buf, doff);
	        doff += 16;
	      }
	      if (fields & 2) {
	        ieee = dv.getFloat64(doff, true);
	        doff += 8;
	      }
	      if (fields & 4) {
	        dt.setTime(dt.getTime() + (dc = dv.getFloat64(doff, true)) * 1000);
	        doff += 8;
	      }
	      if (fields & 8) {
	        sidx = dv.getUint32(doff, true);
	        doff += 4;
	      }
	      if (fields & 16) {
	        ridx = dv.getUint32(doff, true);
	        doff += 4;
	      }
	      doff += popcnt(fields & 480) * 4;
	      if (fields & 512) {
	        dv.getUint32(doff, true);
	        doff += 4;
	      }
	      doff += popcnt(fields & 1024) * 4;
	      if (fields & 2048) {
	        dv.getUint32(doff, true);
	        doff += 4;
	      }
	      var ret;
	      var t = buf[1];
	      switch (t) {
	        case 0:
	          ret = {
	            t: "z"
	          };
	          break;
	        case 2:
	          ret = {
	            t: "n",
	            v: d128
	          };
	          break;
	        case 3:
	          ret = {
	            t: "s",
	            v: lut.sst[sidx]
	          };
	          break;
	        case 5:
	          {
	            if (opts == null ? void 0 : opts.cellDates) ret = {
	              t: "d",
	              v: dt
	            }; else ret = {
	              t: "n",
	              v: dc / 86400 + 35430,
	              z: table_fmt[14]
	            };
	          }
	          break;
	        case 6:
	          ret = {
	            t: "b",
	            v: ieee > 0
	          };
	          break;
	        case 7:
	          ret = {
	            t: "n",
	            v: ieee
	          };
	          break;
	        case 8:
	          ret = {
	            t: "e",
	            v: 0
	          };
	          break;
	        case 9:
	          {
	            if (ridx > -1) {
	              var rts = lut.rsst[ridx];
	              ret = {
	                t: "s",
	                v: rts.v
	              };
	              if (rts.l) ret.l = {
	                Target: rts.l
	              };
	            } else throw new Error(("Unsupported cell type ").concat(buf[1], " : ").concat(fields & 31, " : ").concat(buf[subarray](0, 4)));
	          }
	          break;
	        case 10:
	          ret = {
	            t: "n",
	            v: d128
	          };
	          break;
	        default:
	          throw new Error(("Unsupported cell type ").concat(buf[1], " : ").concat(fields & 31, " : ").concat(buf[subarray](0, 4)));
	      }
	      doff += popcnt(fields & 4096) * 4;
	      if (fields & 516096) {
	        if (zidx == -1) zidx = dv.getUint32(doff, true);
	        doff += 4;
	      }
	      if (fields & 524288) {
	        var cmntidx = dv.getUint32(doff, true);
	        doff += 4;
	        if (lut.cmnt[cmntidx]) ret.c = iwa_to_s5s_comment(lut.cmnt[cmntidx]);
	      }
	      if (zidx > -1) numbers_format_cell(ret, t | 5 << 8, fields >> 13, lut.ofmt[zidx], lut.nfmt[zidx]);
	      if (t == 7) ret.v /= 86400;
	      return ret;
	    }
	    function write_new_storage(cell, lut) {
	      var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, fields = 0;
	      out[0] = 5;
	      switch (cell.t) {
	        case "n":
	          if (cell.z && fmt_is_date(cell.z)) {
	            out[1] = 5;
	            dv.setFloat64(l, (numdate(cell.v + 1462).getTime() - Date.UTC(2001, 0, 1)) / 1000, true);
	            fields |= 4;
	            l += 8;
	            break;
	          } else {
	            out[1] = 2;
	            writeDecimal128LE(out, l, cell.v);
	            fields |= 1;
	            l += 16;
	          }
	          break;
	        case "b":
	          out[1] = 6;
	          dv.setFloat64(l, cell.v ? 1 : 0, true);
	          fields |= 2;
	          l += 8;
	          break;
	        case "s":
	          {
	            var s = cell.v == null ? "" : String(cell.v);
	            if (cell.l) {
	              var irsst = lut.rsst.findIndex(function (v) {
	                var _a;
	                return v.v == s && v.l == ((_a = cell.l) == null ? void 0 : _a.Target);
	              });
	              if (irsst == -1) lut.rsst[irsst = lut.rsst.length] = {
	                v: s,
	                l: cell.l.Target
	              };
	              out[1] = 9;
	              dv.setUint32(l, irsst, true);
	              fields |= 16;
	              l += 4;
	            } else {
	              var isst = lut.sst.indexOf(s);
	              if (isst == -1) lut.sst[isst = lut.sst.length] = s;
	              out[1] = 3;
	              dv.setUint32(l, isst, true);
	              fields |= 8;
	              l += 4;
	            }
	          }
	          break;
	        case "d":
	          out[1] = 5;
	          dv.setFloat64(l, (cell.v.getTime() - Date.UTC(2001, 0, 1)) / 1000, true);
	          fields |= 4;
	          l += 8;
	          break;
	        case "z":
	          out[1] = 0;
	          break;
	        default:
	          throw "unsupported cell type " + cell.t;
	      }
	      if (cell.c) {
	        lut.cmnt.push(s5s_to_iwa_comment(cell.c));
	        dv.setUint32(l, lut.cmnt.length - 1, true);
	        fields |= 524288;
	        l += 4;
	      }
	      dv.setUint32(8, fields, true);
	      return out[subarray](0, l);
	    }
	    function write_old_storage(cell, lut) {
	      var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, fields = 0, s = "";
	      out[0] = 4;
	      switch (cell.t) {
	        case "n":
	          break;
	        case "b":
	          break;
	        case "s":
	          {
	            s = cell.v == null ? "" : String(cell.v);
	            if (cell.l) {
	              var irsst = lut.rsst.findIndex(function (v) {
	                var _a;
	                return v.v == s && v.l == ((_a = cell.l) == null ? void 0 : _a.Target);
	              });
	              if (irsst == -1) lut.rsst[irsst = lut.rsst.length] = {
	                v: s,
	                l: cell.l.Target
	              };
	              out[1] = 9;
	              dv.setUint32(l, irsst, true);
	              fields |= 512;
	              l += 4;
	            }
	          }
	          break;
	        case "d":
	          break;
	        case "e":
	          break;
	        case "z":
	          break;
	        default:
	          throw "unsupported cell type " + cell.t;
	      }
	      if (cell.c) {
	        dv.setUint32(l, lut.cmnt.length - 1, true);
	        fields |= 4096;
	        l += 4;
	      }
	      switch (cell.t) {
	        case "n":
	          out[1] = 2;
	          dv.setFloat64(l, cell.v, true);
	          fields |= 32;
	          l += 8;
	          break;
	        case "b":
	          out[1] = 6;
	          dv.setFloat64(l, cell.v ? 1 : 0, true);
	          fields |= 32;
	          l += 8;
	          break;
	        case "s":
	          {
	            s = cell.v == null ? "" : String(cell.v);
	            if (cell.l) ; else {
	              var isst = lut.sst.indexOf(s);
	              if (isst == -1) lut.sst[isst = lut.sst.length] = s;
	              out[1] = 3;
	              dv.setUint32(l, isst, true);
	              fields |= 16;
	              l += 4;
	            }
	          }
	          break;
	        case "d":
	          out[1] = 5;
	          dv.setFloat64(l, (cell.v.getTime() - Date.UTC(2001, 0, 1)) / 1000, true);
	          fields |= 64;
	          l += 8;
	          break;
	        case "z":
	          out[1] = 0;
	          break;
	        default:
	          throw "unsupported cell type " + cell.t;
	      }
	      dv.setUint32(8, fields, true);
	      return out[subarray](0, l);
	    }
	    function parse_cell_storage(buf, lut, opts) {
	      switch (buf[0]) {
	        case 0:
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	          return parse_old_storage(buf, lut, buf[0], opts);
	        case 5:
	          return parse_new_storage(buf, lut, opts);
	        default:
	          throw new Error(("Unsupported payload version ").concat(buf[0]));
	      }
	    }
	    function parse_TSP_Reference(buf) {
	      var pb = parse_shallow(buf);
	      return varint_to_i32(pb[1][0].data);
	    }
	    function write_TSP_Reference(idx) {
	      return write_shallow([[], [{
	        type: 0,
	        data: write_varint49(idx)
	      }]]);
	    }
	    function numbers_add_oref(iwa, ref) {
	      var _a;
	      var orefs = ((_a = iwa.messages[0].meta[5]) == null ? void 0 : _a[0]) ? parse_packed_varints(iwa.messages[0].meta[5][0].data) : [];
	      var orefidx = orefs.indexOf(ref);
	      if (orefidx == -1) {
	        orefs.push(ref);
	        iwa.messages[0].meta[5] = [{
	          type: 2,
	          data: write_packed_varints(orefs)
	        }];
	      }
	    }
	    function numbers_del_oref(iwa, ref) {
	      var _a;
	      var orefs = ((_a = iwa.messages[0].meta[5]) == null ? void 0 : _a[0]) ? parse_packed_varints(iwa.messages[0].meta[5][0].data) : [];
	      iwa.messages[0].meta[5] = [{
	        type: 2,
	        data: write_packed_varints(orefs.filter(function (r) {
	          return r != ref;
	        }))
	      }];
	    }
	    function parse_TST_TableDataList(M, root) {
	      var pb = parse_shallow(root.data);
	      var type = varint_to_i32(pb[1][0].data);
	      var entries = pb[3];
	      var data = [];
	      (entries || []).forEach(function (entry) {
	        var _a, _b;
	        var le = parse_shallow(entry.data);
	        if (!le[1]) return;
	        var key = varint_to_i32(le[1][0].data) >>> 0;
	        switch (type) {
	          case 1:
	            data[key] = u8str(le[3][0].data);
	            break;
	          case 8:
	            {
	              var rt = M[parse_TSP_Reference(le[9][0].data)][0];
	              var rtp = parse_shallow(rt.data);
	              var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
	              var mtype = varint_to_i32(rtpref.meta[1][0].data);
	              if (mtype != 2001) throw new Error(("2000 unexpected reference to ").concat(mtype));
	              var tswpsa = parse_shallow(rtpref.data);
	              var richtext = {
	                v: tswpsa[3].map(function (x) {
	                  return u8str(x.data);
	                }).join("")
	              };
	              data[key] = richtext;
	              sfields: if ((_a = tswpsa == null ? void 0 : tswpsa[11]) == null ? void 0 : _a[0]) {
	                var smartfields = (_b = parse_shallow(tswpsa[11][0].data)) == null ? void 0 : _b[1];
	                if (!smartfields) break sfields;
	                smartfields.forEach(function (sf) {
	                  var _a2, _b2, _c;
	                  var attr = parse_shallow(sf.data);
	                  if ((_a2 = attr[2]) == null ? void 0 : _a2[0]) {
	                    var obj = M[parse_TSP_Reference((_b2 = attr[2]) == null ? void 0 : _b2[0].data)][0];
	                    var objtype = varint_to_i32(obj.meta[1][0].data);
	                    switch (objtype) {
	                      case 2032:
	                        var hlink = parse_shallow(obj.data);
	                        if (((_c = hlink == null ? void 0 : hlink[2]) == null ? void 0 : _c[0]) && !richtext.l) richtext.l = u8str(hlink[2][0].data);
	                        break;
	                      case 2039:
	                        break;
	                      default:
	                        console.log(("unrecognized ObjectAttribute type ").concat(objtype));
	                    }
	                  }
	                });
	              }
	            }
	            break;
	          case 2:
	            data[key] = parse_shallow(le[6][0].data);
	            break;
	          case 3:
	            data[key] = parse_shallow(le[5][0].data);
	            break;
	          case 10:
	            {
	              var cs = M[parse_TSP_Reference(le[10][0].data)][0];
	              data[key] = parse_TSD_CommentStorageArchive(M, cs.data);
	            }
	            break;
	          default:
	            throw type;
	        }
	      });
	      return data;
	    }
	    function parse_TST_TileRowInfo(u8, type) {
	      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
	      var pb = parse_shallow(u8);
	      var R = varint_to_i32(pb[1][0].data) >>> 0;
	      var cnt = varint_to_i32(pb[2][0].data) >>> 0;
	      var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
	      var used_storage_u8, used_storage;
	      if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
	        used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
	        used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
	      } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
	        used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
	        used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
	      } else throw ("NUMBERS Tile missing ").concat(type, " cell storage");
	      var width = wide_offsets ? 4 : 1;
	      var used_storage_offsets = u8_to_dataview(used_storage_u8);
	      var offsets = [];
	      for (var C = 0; C < used_storage_u8.length / 2; ++C) {
	        var off = used_storage_offsets.getUint16(C * 2, true);
	        if (off < 65535) offsets.push([C, off]);
	      }
	      if (offsets.length != cnt) throw ("Expected ").concat(cnt, " cells, found ").concat(offsets.length);
	      var cells = [];
	      for (C = 0; C < offsets.length - 1; ++C) cells[offsets[C][0]] = used_storage[subarray](offsets[C][1] * width, offsets[C + 1][1] * width);
	      if (offsets.length >= 1) cells[offsets[offsets.length - 1][0]] = used_storage[subarray](offsets[offsets.length - 1][1] * width);
	      return {
	        R: R,
	        cells: cells
	      };
	    }
	    function parse_TST_Tile(M, root) {
	      var _a;
	      var pb = parse_shallow(root.data);
	      var storage = -1;
	      if ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) {
	        if (varint_to_i32(pb[7][0].data) >>> 0) storage = 1; else storage = 0;
	      }
	      var ri = mappa(pb[5], function (u8) {
	        return parse_TST_TileRowInfo(u8, storage);
	      });
	      return {
	        nrows: varint_to_i32(pb[4][0].data) >>> 0,
	        data: ri.reduce(function (acc, x) {
	          if (!acc[x.R]) acc[x.R] = [];
	          x.cells.forEach(function (cell, C) {
	            if (acc[x.R][C]) throw new Error(("Duplicate cell r=").concat(x.R, " c=").concat(C));
	            acc[x.R][C] = cell;
	          });
	          return acc;
	        }, [])
	      };
	    }
	    function parse_TSD_CommentStorageArchive(M, data) {
	      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
	      var out = {
	        t: "",
	        a: ""
	      };
	      var csp = parse_shallow(data);
	      if ((_b = (_a = csp == null ? void 0 : csp[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) out.t = u8str((_d = (_c = csp == null ? void 0 : csp[1]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) || "";
	      if ((_f = (_e = csp == null ? void 0 : csp[3]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data) {
	        var as = M[parse_TSP_Reference((_h = (_g = csp == null ? void 0 : csp[3]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data)][0];
	        var asp = parse_shallow(as.data);
	        if ((_j = (_i = asp[1]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) out.a = u8str(asp[1][0].data);
	      }
	      if (csp == null ? void 0 : csp[4]) {
	        out.replies = [];
	        csp[4].forEach(function (pi) {
	          var cs = M[parse_TSP_Reference(pi.data)][0];
	          out.replies.push(parse_TSD_CommentStorageArchive(M, cs.data));
	        });
	      }
	      return out;
	    }
	    function iwa_to_s5s_comment(iwa) {
	      var out = [];
	      out.push({
	        t: iwa.t || "",
	        a: iwa.a,
	        T: iwa.replies && iwa.replies.length > 0
	      });
	      if (iwa.replies) iwa.replies.forEach(function (reply) {
	        out.push({
	          t: reply.t || "",
	          a: reply.a,
	          T: true
	        });
	      });
	      return out;
	    }
	    function s5s_to_iwa_comment(s5s) {
	      var out = {
	        a: "",
	        t: "",
	        replies: []
	      };
	      for (var i = 0; i < s5s.length; ++i) {
	        if (i == 0) {
	          out.a = s5s[i].a;
	          out.t = s5s[i].t;
	        } else {
	          out.replies.push({
	            a: s5s[i].a,
	            t: s5s[i].t
	          });
	        }
	      }
	      return out;
	    }
	    function parse_TST_TableModelArchive(M, root, ws, opts) {
	      var _a, _b, _c, _d, _e, _f, _g, _h, _i;
	      var pb = parse_shallow(root.data);
	      var range = {
	        s: {
	          r: 0,
	          c: 0
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
	      if (range.e.r < 0) throw new Error(("Invalid row varint ").concat(pb[6][0].data));
	      range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
	      if (range.e.c < 0) throw new Error(("Invalid col varint ").concat(pb[7][0].data));
	      ws["!ref"] = encode_range(range);
	      var dense = ws["!data"] != null, dws = ws;
	      var store = parse_shallow(pb[4][0].data);
	      var lut = numbers_lut_new();
	      if ((_a = store[4]) == null ? void 0 : _a[0]) lut.sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
	      if ((_b = store[6]) == null ? void 0 : _b[0]) lut.fmla = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[6][0].data)][0]);
	      if ((_c = store[11]) == null ? void 0 : _c[0]) lut.ofmt = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[11][0].data)][0]);
	      if ((_d = store[12]) == null ? void 0 : _d[0]) lut.ferr = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[12][0].data)][0]);
	      if ((_e = store[17]) == null ? void 0 : _e[0]) lut.rsst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]);
	      if ((_f = store[19]) == null ? void 0 : _f[0]) lut.cmnt = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[19][0].data)][0]);
	      if ((_g = store[22]) == null ? void 0 : _g[0]) lut.nfmt = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[22][0].data)][0]);
	      var tile = parse_shallow(store[3][0].data);
	      var _R = 0;
	      tile[1].forEach(function (t) {
	        var tl = parse_shallow(t.data);
	        var ref2 = M[parse_TSP_Reference(tl[2][0].data)][0];
	        var mtype2 = varint_to_i32(ref2.meta[1][0].data);
	        if (mtype2 != 6002) throw new Error(("6001 unexpected reference to ").concat(mtype2));
	        var _tile = parse_TST_Tile(M, ref2);
	        _tile.data.forEach(function (row, R) {
	          row.forEach(function (buf, C) {
	            var res = parse_cell_storage(buf, lut, opts);
	            if (res) {
	              if (dense) {
	                if (!dws["!data"][_R + R]) dws["!data"][_R + R] = [];
	                dws["!data"][_R + R][C] = res;
	              } else {
	                ws[encode_col(C) + encode_row(_R + R)] = res;
	              }
	            }
	          });
	        });
	        _R += _tile.nrows;
	      });
	      if ((_h = store[13]) == null ? void 0 : _h[0]) {
	        var ref = M[parse_TSP_Reference(store[13][0].data)][0];
	        var mtype = varint_to_i32(ref.meta[1][0].data);
	        if (mtype != 6144) throw new Error(("Expected merge type 6144, found ").concat(mtype));
	        ws["!merges"] = (_i = parse_shallow(ref.data)) == null ? void 0 : _i[1].map(function (pi) {
	          var merge = parse_shallow(pi.data);
	          var origin = u8_to_dataview(parse_shallow(merge[1][0].data)[1][0].data), size = u8_to_dataview(parse_shallow(merge[2][0].data)[1][0].data);
	          return {
	            s: {
	              r: origin.getUint16(0, true),
	              c: origin.getUint16(2, true)
	            },
	            e: {
	              r: origin.getUint16(0, true) + size.getUint16(0, true) - 1,
	              c: origin.getUint16(2, true) + size.getUint16(2, true) - 1
	            }
	          };
	        });
	      }
	    }
	    function parse_TST_TableInfoArchive(M, root, opts) {
	      var pb = parse_shallow(root.data);
	      var out = {
	        "!ref": "A1"
	      };
	      if (opts == null ? void 0 : opts.dense) out["!data"] = [];
	      var tableref = M[parse_TSP_Reference(pb[2][0].data)];
	      var mtype = varint_to_i32(tableref[0].meta[1][0].data);
	      if (mtype != 6001) throw new Error(("6000 unexpected reference to ").concat(mtype));
	      parse_TST_TableModelArchive(M, tableref[0], out, opts);
	      return out;
	    }
	    function parse_TN_SheetArchive(M, root, opts) {
	      var _a;
	      var pb = parse_shallow(root.data);
	      var out = {
	        name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
	        sheets: []
	      };
	      var shapeoffs = mappa(pb[2], parse_TSP_Reference);
	      shapeoffs.forEach(function (off) {
	        M[off].forEach(function (m) {
	          var mtype = varint_to_i32(m.meta[1][0].data);
	          if (mtype == 6000) out.sheets.push(parse_TST_TableInfoArchive(M, m, opts));
	        });
	      });
	      return out;
	    }
	    function parse_TN_DocumentArchive(M, root, opts) {
	      var _a;
	      var out = book_new();
	      out.Workbook = {
	        WBProps: {
	          date1904: true
	        }
	      };
	      var pb = parse_shallow(root.data);
	      if ((_a = pb[2]) == null ? void 0 : _a[0]) throw new Error("Keynote presentations are not supported");
	      var sheetoffs = mappa(pb[1], parse_TSP_Reference);
	      sheetoffs.forEach(function (off) {
	        M[off].forEach(function (m) {
	          var mtype = varint_to_i32(m.meta[1][0].data);
	          if (mtype == 2) {
	            var root2 = parse_TN_SheetArchive(M, m, opts);
	            root2.sheets.forEach(function (sheet, idx) {
	              book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
	            });
	          }
	        });
	      });
	      if (out.SheetNames.length == 0) throw new Error("Empty NUMBERS file");
	      out.bookType = "numbers";
	      return out;
	    }
	    function parse_numbers_iwa(cfb, opts) {
	      var _a, _b, _c, _d, _e, _f, _g;
	      var M = {}, indices = [];
	      cfb.FullPaths.forEach(function (p) {
	        if (p.match(/\.iwpv2/)) throw new Error("Unsupported password protection");
	      });
	      cfb.FileIndex.forEach(function (s) {
	        if (!s.name.match(/\.iwa$/)) return;
	        if (s.content[0] != 0) return;
	        var o;
	        try {
	          o = decompress_iwa_file(s.content);
	        } catch (e) {
	          return console.log("?? " + s.content.length + " " + (e.message || e));
	        }
	        var packets;
	        try {
	          packets = parse_iwa_file(o);
	        } catch (e) {
	          return console.log("## " + (e.message || e));
	        }
	        packets.forEach(function (packet) {
	          M[packet.id] = packet.messages;
	          indices.push(packet.id);
	        });
	      });
	      if (!indices.length) throw new Error("File has no messages");
	      if (((_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0].meta) == null ? void 0 : _b[1]) == null ? void 0 : _c[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 10000) throw new Error("Pages documents are not supported");
	      var docroot = ((_g = (_f = (_e = (_d = M == null ? void 0 : M[1]) == null ? void 0 : _d[0]) == null ? void 0 : _e.meta) == null ? void 0 : _f[1]) == null ? void 0 : _g[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
	      if (!docroot) indices.forEach(function (idx) {
	        M[idx].forEach(function (iwam) {
	          var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
	          if (mtype == 1) {
	            if (!docroot) docroot = iwam; else throw new Error("Document has multiple roots");
	          }
	        });
	      });
	      if (!docroot) throw new Error("Cannot find Document root");
	      return parse_TN_DocumentArchive(M, docroot, opts);
	    }
	    function write_TST_TileRowInfo(data, lut, wide) {
	      var _a, _b, _c;
	      var tri = [[], [{
	        type: 0,
	        data: write_varint49(0)
	      }], [{
	        type: 0,
	        data: write_varint49(0)
	      }], [{
	        type: 2,
	        data: new Uint8Array([])
	      }], [{
	        type: 2,
	        data: new Uint8Array(Array.from({
	          length: 510
	        }, function () {
	          return 255;
	        }))
	      }], [{
	        type: 0,
	        data: write_varint49(5)
	      }], [{
	        type: 2,
	        data: new Uint8Array([])
	      }], [{
	        type: 2,
	        data: new Uint8Array(Array.from({
	          length: 510
	        }, function () {
	          return 255;
	        }))
	      }], [{
	        type: 0,
	        data: write_varint49(1)
	      }]];
	      if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0])) throw "Mutation only works on post-BNC storages!";
	      var cnt = 0;
	      if (tri[7][0].data.length < 2 * data.length) {
	        var new_7 = new Uint8Array(2 * data.length);
	        new_7.set(tri[7][0].data);
	        tri[7][0].data = new_7;
	      }
	      if (tri[4][0].data.length < 2 * data.length) {
	        var new_4 = new Uint8Array(2 * data.length);
	        new_4.set(tri[4][0].data);
	        tri[4][0].data = new_4;
	      }
	      var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
	      var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
	      var width = wide ? 4 : 1;
	      for (var C = 0; C < data.length; ++C) {
	        if (data[C] == null || data[C].t == "z" && !((_c = data[C].c) == null ? void 0 : _c.length) || data[C].t == "e") {
	          dv.setUint16(C * 2, 65535, true);
	          _dv.setUint16(C * 2, 65535);
	          continue;
	        }
	        dv.setUint16(C * 2, last_offset / width, true);
	        _dv.setUint16(C * 2, _last_offset / width, true);
	        var celload, _celload;
	        switch (data[C].t) {
	          case "d":
	            if (data[C].v instanceof Date) {
	              celload = write_new_storage(data[C], lut);
	              _celload = write_old_storage(data[C], lut);
	              break;
	            }
	            celload = write_new_storage(data[C], lut);
	            _celload = write_old_storage(data[C], lut);
	            break;
	          case "s":
	          case "n":
	          case "b":
	          case "z":
	            celload = write_new_storage(data[C], lut);
	            _celload = write_old_storage(data[C], lut);
	            break;
	          default:
	            throw new Error("Unsupported value " + data[C]);
	        }
	        cell_storage.push(celload);
	        last_offset += celload.length;
	        {
	          _cell_storage.push(_celload);
	          _last_offset += _celload.length;
	        }
	        ++cnt;
	      }
	      tri[2][0].data = write_varint49(cnt);
	      tri[5][0].data = write_varint49(5);
	      for (; C < tri[7][0].data.length / 2; ++C) {
	        dv.setUint16(C * 2, 65535, true);
	        _dv.setUint16(C * 2, 65535, true);
	      }
	      tri[6][0].data = u8concat(cell_storage);
	      tri[3][0].data = u8concat(_cell_storage);
	      tri[8] = [{
	        type: 0,
	        data: write_varint49(wide ? 1 : 0)
	      }];
	      return tri;
	    }
	    function write_iwam(type, payload) {
	      return {
	        meta: [[], [{
	          type: 0,
	          data: write_varint49(type)
	        }]],
	        data: payload
	      };
	    }
	    function get_unique_msgid(dep, dependents) {
	      if (!dependents.last) dependents.last = 927262;
	      for (var i = dependents.last; i < 2000000; ++i) if (!dependents[i]) {
	        dependents[dependents.last = i] = dep;
	        return i;
	      }
	      throw new Error("Too many messages");
	    }
	    function build_numbers_deps(cfb) {
	      var dependents = {};
	      var indices = [];
	      cfb.FileIndex.map(function (fi, idx) {
	        return [fi, cfb.FullPaths[idx]];
	      }).forEach(function (row) {
	        var fi = row[0], fp = row[1];
	        if (fi.type != 2) return;
	        if (!fi.name.match(/\.iwa/)) return;
	        if (fi.content[0] != 0) return;
	        parse_iwa_file(decompress_iwa_file(fi.content)).forEach(function (packet) {
	          indices.push(packet.id);
	          dependents[packet.id] = {
	            deps: [],
	            location: fp,
	            type: varint_to_i32(packet.messages[0].meta[1][0].data)
	          };
	        });
	      });
	      cfb.FileIndex.forEach(function (fi) {
	        if (!fi.name.match(/\.iwa/)) return;
	        if (fi.content[0] != 0) return;
	        parse_iwa_file(decompress_iwa_file(fi.content)).forEach(function (ia) {
	          ia.messages.forEach(function (mess) {
	            [5, 6].forEach(function (f) {
	              if (!mess.meta[f]) return;
	              mess.meta[f].forEach(function (x) {
	                dependents[ia.id].deps.push(varint_to_i32(x.data));
	              });
	            });
	          });
	        });
	      });
	      return dependents;
	    }
	    function write_TSP_Color_RGB(r, g, b) {
	      return write_shallow([[], [{
	        type: 0,
	        data: write_varint49(1)
	      }], [], [{
	        type: 5,
	        data: new Uint8Array(Float32Array.from([r / 255]).buffer)
	      }], [{
	        type: 5,
	        data: new Uint8Array(Float32Array.from([g / 255]).buffer)
	      }], [{
	        type: 5,
	        data: new Uint8Array(Float32Array.from([b / 255]).buffer)
	      }], [{
	        type: 5,
	        data: new Uint8Array(Float32Array.from([1]).buffer)
	      }], [], [], [], [], [], [{
	        type: 0,
	        data: write_varint49(1)
	      }]]);
	    }
	    function get_author_color(n) {
	      switch (n) {
	        case 0:
	          return write_TSP_Color_RGB(99, 222, 171);
	        case 1:
	          return write_TSP_Color_RGB(162, 197, 240);
	        case 2:
	          return write_TSP_Color_RGB(255, 189, 189);
	      }
	      return write_TSP_Color_RGB(Math.random() * 255, Math.random() * 255, Math.random() * 255);
	    }
	    function write_numbers_iwa(wb, opts) {
	      if (!opts || !opts.numbers) throw new Error("Must pass a `numbers` option -- check the README");
	      var cfb = CFB.read(opts.numbers, {
	        type: "base64"
	      });
	      var deps = build_numbers_deps(cfb);
	      var docroot = numbers_iwa_find(cfb, deps, 1);
	      if (docroot == null) throw ("Could not find message ").concat(1, " in Numbers template");
	      var sheetrefs = mappa(parse_shallow(docroot.messages[0].data)[1], parse_TSP_Reference);
	      if (sheetrefs.length > 1) throw new Error("Template NUMBERS file must have exactly one sheet");
	      wb.SheetNames.forEach(function (name, idx) {
	        if (idx >= 1) {
	          numbers_add_ws(cfb, deps, idx + 1);
	          docroot = numbers_iwa_find(cfb, deps, 1);
	          sheetrefs = mappa(parse_shallow(docroot.messages[0].data)[1], parse_TSP_Reference);
	        }
	        write_numbers_ws(cfb, deps, wb.Sheets[name], name, idx, sheetrefs[idx]);
	      });
	      return cfb;
	    }
	    function numbers_iwa_doit(cfb, deps, id, cb) {
	      var entry = CFB.find(cfb, deps[id].location);
	      if (!entry) throw ("Could not find ").concat(deps[id].location, " in Numbers template");
	      var x = parse_iwa_file(decompress_iwa_file(entry.content));
	      var ainfo = x.find(function (packet) {
	        return packet.id == id;
	      });
	      cb(ainfo, x);
	      entry.content = compress_iwa_file(write_iwa_file(x));
	      entry.size = entry.content.length;
	    }
	    function numbers_iwa_find(cfb, deps, id) {
	      var entry = CFB.find(cfb, deps[id].location);
	      if (!entry) throw ("Could not find ").concat(deps[id].location, " in Numbers template");
	      var x = parse_iwa_file(decompress_iwa_file(entry.content));
	      var ainfo = x.find(function (packet) {
	        return packet.id == id;
	      });
	      return ainfo;
	    }
	    function numbers_add_meta(mlist, newid, newloc) {
	      mlist[3].push({
	        type: 2,
	        data: write_shallow([[], [{
	          type: 0,
	          data: write_varint49(newid)
	        }], [{
	          type: 2,
	          data: stru8(newloc.replace(/-.*$/, ""))
	        }], [{
	          type: 2,
	          data: stru8(newloc)
	        }], [{
	          type: 2,
	          data: new Uint8Array([2, 0, 0])
	        }], [{
	          type: 2,
	          data: new Uint8Array([2, 0, 0])
	        }], [], [], [], [], [{
	          type: 0,
	          data: write_varint49(0)
	        }], [], [{
	          type: 0,
	          data: write_varint49(0)
	        }]])
	      });
	      mlist[1] = [{
	        type: 0,
	        data: write_varint49(Math.max(newid + 1, varint_to_i32(mlist[1][0].data)))
	      }];
	    }
	    function numbers_add_msg(cfb, type, msg, path, deps, id) {
	      if (!id) id = get_unique_msgid({
	        deps: [],
	        location: "",
	        type: type
	      }, deps);
	      var loc = ("").concat(path, "-").concat(id, ".iwa");
	      deps[id].location = "Root Entry" + loc;
	      CFB.utils.cfb_add(cfb, loc, compress_iwa_file(write_iwa_file([{
	        id: id,
	        messages: [write_iwam(type, write_shallow(msg))]
	      }])));
	      var newloc = loc.replace(/^[\/]/, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
	      numbers_iwa_doit(cfb, deps, 2, function (ai) {
	        var mlist = parse_shallow(ai.messages[0].data);
	        numbers_add_meta(mlist, id || 0, newloc);
	        ai.messages[0].data = write_shallow(mlist);
	      });
	      return id;
	    }
	    function numbers_meta_add_dep(mlist, deps, id, dep) {
	      var loc = deps[id].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
	      var parentidx = mlist[3].findIndex(function (m) {
	        var _a, _b;
	        var mm = parse_shallow(m.data);
	        if ((_a = mm[3]) == null ? void 0 : _a[0]) return u8str(mm[3][0].data) == loc;
	        if (((_b = mm[2]) == null ? void 0 : _b[0]) && u8str(mm[2][0].data) == loc) return true;
	        return false;
	      });
	      var parent = parse_shallow(mlist[3][parentidx].data);
	      if (!parent[6]) parent[6] = [];
	      (Array.isArray(dep) ? dep : [dep]).forEach(function (dep2) {
	        parent[6].push({
	          type: 2,
	          data: write_shallow([[], [{
	            type: 0,
	            data: write_varint49(dep2)
	          }]])
	        });
	      });
	      mlist[3][parentidx].data = write_shallow(parent);
	    }
	    function numbers_meta_del_dep(mlist, deps, id, dep) {
	      var loc = deps[id].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
	      var parentidx = mlist[3].findIndex(function (m) {
	        var _a, _b;
	        var mm = parse_shallow(m.data);
	        if ((_a = mm[3]) == null ? void 0 : _a[0]) return u8str(mm[3][0].data) == loc;
	        if (((_b = mm[2]) == null ? void 0 : _b[0]) && u8str(mm[2][0].data) == loc) return true;
	        return false;
	      });
	      var parent = parse_shallow(mlist[3][parentidx].data);
	      if (!parent[6]) parent[6] = [];
	      parent[6] = parent[6].filter(function (m) {
	        return varint_to_i32(parse_shallow(m.data)[1][0].data) != dep;
	      });
	      mlist[3][parentidx].data = write_shallow(parent);
	    }
	    function numbers_add_ws(cfb, deps, wsidx) {
	      var sheetref = -1, newsheetref = -1;
	      var remap = {};
	      numbers_iwa_doit(cfb, deps, 1, function (docroot, arch) {
	        var doc = parse_shallow(docroot.messages[0].data);
	        sheetref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
	        newsheetref = get_unique_msgid({
	          deps: [1],
	          location: deps[sheetref].location,
	          type: 2
	        }, deps);
	        remap[sheetref] = newsheetref;
	        numbers_add_oref(docroot, newsheetref);
	        doc[1].push({
	          type: 2,
	          data: write_TSP_Reference(newsheetref)
	        });
	        var sheet = numbers_iwa_find(cfb, deps, sheetref);
	        sheet.id = newsheetref;
	        if (deps[1].location == deps[newsheetref].location) arch.push(sheet); else numbers_iwa_doit(cfb, deps, newsheetref, function (_, x) {
	          return x.push(sheet);
	        });
	        docroot.messages[0].data = write_shallow(doc);
	      });
	      var tiaref = -1;
	      numbers_iwa_doit(cfb, deps, newsheetref, function (sheetroot, arch) {
	        var sa = parse_shallow(sheetroot.messages[0].data);
	        for (var i = 3; i <= 69; ++i) delete sa[i];
	        var drawables = mappa(sa[2], parse_TSP_Reference);
	        drawables.forEach(function (n) {
	          return numbers_del_oref(sheetroot, n);
	        });
	        tiaref = get_unique_msgid({
	          deps: [newsheetref],
	          location: deps[drawables[0]].location,
	          type: deps[drawables[0]].type
	        }, deps);
	        numbers_add_oref(sheetroot, tiaref);
	        remap[drawables[0]] = tiaref;
	        sa[2] = [{
	          type: 2,
	          data: write_TSP_Reference(tiaref)
	        }];
	        var tia = numbers_iwa_find(cfb, deps, drawables[0]);
	        tia.id = tiaref;
	        if (deps[drawables[0]].location == deps[newsheetref].location) arch.push(tia); else {
	          numbers_iwa_doit(cfb, deps, 2, function (ai) {
	            var mlist = parse_shallow(ai.messages[0].data);
	            numbers_meta_add_dep(mlist, deps, newsheetref, tiaref);
	            ai.messages[0].data = write_shallow(mlist);
	          });
	          numbers_iwa_doit(cfb, deps, tiaref, function (_, x) {
	            return x.push(tia);
	          });
	        }
	        sheetroot.messages[0].data = write_shallow(sa);
	      });
	      var tmaref = -1;
	      numbers_iwa_doit(cfb, deps, tiaref, function (tiaroot, arch) {
	        var tia = parse_shallow(tiaroot.messages[0].data);
	        var da = parse_shallow(tia[1][0].data);
	        for (var i = 3; i <= 69; ++i) delete da[i];
	        var dap = parse_TSP_Reference(da[2][0].data);
	        da[2][0].data = write_TSP_Reference(remap[dap]);
	        tia[1][0].data = write_shallow(da);
	        var oldtmaref = parse_TSP_Reference(tia[2][0].data);
	        numbers_del_oref(tiaroot, oldtmaref);
	        tmaref = get_unique_msgid({
	          deps: [tiaref],
	          location: deps[oldtmaref].location,
	          type: deps[oldtmaref].type
	        }, deps);
	        numbers_add_oref(tiaroot, tmaref);
	        remap[oldtmaref] = tmaref;
	        tia[2][0].data = write_TSP_Reference(tmaref);
	        var tma = numbers_iwa_find(cfb, deps, oldtmaref);
	        tma.id = tmaref;
	        if (deps[tiaref].location == deps[tmaref].location) arch.push(tma); else numbers_iwa_doit(cfb, deps, tmaref, function (_, x) {
	          return x.push(tma);
	        });
	        tiaroot.messages[0].data = write_shallow(tia);
	      });
	      numbers_iwa_doit(cfb, deps, tmaref, function (tmaroot, arch) {
	        var _a, _b;
	        var tma = parse_shallow(tmaroot.messages[0].data);
	        var uuid = u8str(tma[1][0].data), new_uuid = uuid.replace(/-[A-Z0-9]*/, ("-").concat(("0000" + wsidx.toString(16)).slice(-4)));
	        tma[1][0].data = stru8(new_uuid);
	        [12, 13, 29, 31, 32, 33, 39, 44, 47, 81, 82, 84].forEach(function (n) {
	          return delete tma[n];
	        });
	        if (tma[45]) {
	          var srrta = parse_shallow(tma[45][0].data);
	          var ref = parse_TSP_Reference(srrta[1][0].data);
	          numbers_del_oref(tmaroot, ref);
	          delete tma[45];
	        }
	        if (tma[70]) {
	          var hsoa = parse_shallow(tma[70][0].data);
	          (_a = hsoa[2]) == null ? void 0 : _a.forEach(function (item) {
	            var hsa = parse_shallow(item.data);
	            [2, 3].map(function (n) {
	              return hsa[n][0];
	            }).forEach(function (hseadata) {
	              var hsea = parse_shallow(hseadata.data);
	              if (!hsea[8]) return;
	              var ref2 = parse_TSP_Reference(hsea[8][0].data);
	              numbers_del_oref(tmaroot, ref2);
	            });
	          });
	          delete tma[70];
	        }
	        [46, 30, 34, 35, 36, 38, 48, 49, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89].forEach(function (n) {
	          if (!tma[n]) return;
	          var ref2 = parse_TSP_Reference(tma[n][0].data);
	          delete tma[n];
	          numbers_del_oref(tmaroot, ref2);
	        });
	        var store = parse_shallow(tma[4][0].data);
	        {
	          [2, 4, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22].forEach(function (n) {
	            var _a2;
	            if (!((_a2 = store[n]) == null ? void 0 : _a2[0])) return;
	            var oldref = parse_TSP_Reference(store[n][0].data);
	            var newref = get_unique_msgid({
	              deps: [tmaref],
	              location: deps[oldref].location,
	              type: deps[oldref].type
	            }, deps);
	            numbers_del_oref(tmaroot, oldref);
	            numbers_add_oref(tmaroot, newref);
	            remap[oldref] = newref;
	            var msg = numbers_iwa_find(cfb, deps, oldref);
	            msg.id = newref;
	            if (deps[oldref].location == deps[tmaref].location) arch.push(msg); else {
	              deps[newref].location = deps[oldref].location.replace(oldref.toString(), newref.toString());
	              if (deps[newref].location == deps[oldref].location) deps[newref].location = deps[newref].location.replace(/\.iwa/, ("-").concat(newref, ".iwa"));
	              CFB.utils.cfb_add(cfb, deps[newref].location, compress_iwa_file(write_iwa_file([msg])));
	              var newloc = deps[newref].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
	              numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                var mlist = parse_shallow(ai.messages[0].data);
	                numbers_add_meta(mlist, newref, newloc);
	                numbers_meta_add_dep(mlist, deps, tmaref, newref);
	                ai.messages[0].data = write_shallow(mlist);
	              });
	            }
	            store[n][0].data = write_TSP_Reference(newref);
	          });
	          var row_headers = parse_shallow(store[1][0].data);
	          {
	            (_b = row_headers[2]) == null ? void 0 : _b.forEach(function (tspref) {
	              var oldref = parse_TSP_Reference(tspref.data);
	              var newref = get_unique_msgid({
	                deps: [tmaref],
	                location: deps[oldref].location,
	                type: deps[oldref].type
	              }, deps);
	              numbers_del_oref(tmaroot, oldref);
	              numbers_add_oref(tmaroot, newref);
	              remap[oldref] = newref;
	              var msg = numbers_iwa_find(cfb, deps, oldref);
	              msg.id = newref;
	              if (deps[oldref].location == deps[tmaref].location) {
	                arch.push(msg);
	              } else {
	                deps[newref].location = deps[oldref].location.replace(oldref.toString(), newref.toString());
	                if (deps[newref].location == deps[oldref].location) deps[newref].location = deps[newref].location.replace(/\.iwa/, ("-").concat(newref, ".iwa"));
	                CFB.utils.cfb_add(cfb, deps[newref].location, compress_iwa_file(write_iwa_file([msg])));
	                var newloc = deps[newref].location.replace(/^Root Entry\//, "").replace(/^Index\//, "").replace(/\.iwa$/, "");
	                numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                  var mlist = parse_shallow(ai.messages[0].data);
	                  numbers_add_meta(mlist, newref, newloc);
	                  numbers_meta_add_dep(mlist, deps, tmaref, newref);
	                  ai.messages[0].data = write_shallow(mlist);
	                });
	              }
	              tspref.data = write_TSP_Reference(newref);
	            });
	          }
	          store[1][0].data = write_shallow(row_headers);
	          var tiles = parse_shallow(store[3][0].data);
	          {
	            tiles[1].forEach(function (t) {
	              var tst = parse_shallow(t.data);
	              var oldtileref = parse_TSP_Reference(tst[2][0].data);
	              var newtileref = remap[oldtileref];
	              if (!remap[oldtileref]) {
	                newtileref = get_unique_msgid({
	                  deps: [tmaref],
	                  location: "",
	                  type: deps[oldtileref].type
	                }, deps);
	                deps[newtileref].location = ("Root Entry/Index/Tables/Tile-").concat(newtileref, ".iwa");
	                remap[oldtileref] = newtileref;
	                var oldtile = numbers_iwa_find(cfb, deps, oldtileref);
	                oldtile.id = newtileref;
	                numbers_del_oref(tmaroot, oldtileref);
	                numbers_add_oref(tmaroot, newtileref);
	                CFB.utils.cfb_add(cfb, ("/Index/Tables/Tile-").concat(newtileref, ".iwa"), compress_iwa_file(write_iwa_file([oldtile])));
	                numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                  var mlist = parse_shallow(ai.messages[0].data);
	                  mlist[3].push({
	                    type: 2,
	                    data: write_shallow([[], [{
	                      type: 0,
	                      data: write_varint49(newtileref)
	                    }], [{
	                      type: 2,
	                      data: stru8("Tables/Tile")
	                    }], [{
	                      type: 2,
	                      data: stru8(("Tables/Tile-").concat(newtileref))
	                    }], [{
	                      type: 2,
	                      data: new Uint8Array([2, 0, 0])
	                    }], [{
	                      type: 2,
	                      data: new Uint8Array([2, 0, 0])
	                    }], [], [], [], [], [{
	                      type: 0,
	                      data: write_varint49(0)
	                    }], [], [{
	                      type: 0,
	                      data: write_varint49(0)
	                    }]])
	                  });
	                  mlist[1] = [{
	                    type: 0,
	                    data: write_varint49(Math.max(newtileref + 1, varint_to_i32(mlist[1][0].data)))
	                  }];
	                  numbers_meta_add_dep(mlist, deps, tmaref, newtileref);
	                  ai.messages[0].data = write_shallow(mlist);
	                });
	              }
	              tst[2][0].data = write_TSP_Reference(newtileref);
	              t.data = write_shallow(tst);
	            });
	          }
	          store[3][0].data = write_shallow(tiles);
	        }
	        tma[4][0].data = write_shallow(store);
	        tmaroot.messages[0].data = write_shallow(tma);
	      });
	    }
	    function write_numbers_ws(cfb, deps, ws, wsname, sheetidx, rootref) {
	      var drawables = [];
	      numbers_iwa_doit(cfb, deps, rootref, function (docroot) {
	        var sheetref = parse_shallow(docroot.messages[0].data);
	        {
	          sheetref[1] = [{
	            type: 2,
	            data: stru8(wsname)
	          }];
	          drawables = mappa(sheetref[2], parse_TSP_Reference);
	        }
	        docroot.messages[0].data = write_shallow(sheetref);
	      });
	      var tia = numbers_iwa_find(cfb, deps, drawables[0]);
	      var tmaref = parse_TSP_Reference(parse_shallow(tia.messages[0].data)[2][0].data);
	      numbers_iwa_doit(cfb, deps, tmaref, function (docroot, x) {
	        return write_numbers_tma(cfb, deps, ws, docroot, x, tmaref);
	      });
	    }
	    var USE_WIDE_ROWS = true;
	    function write_numbers_tma(cfb, deps, ws, tmaroot, tmafile, tmaref) {
	      var range = decode_range(ws["!ref"]);
	      range.s.r = range.s.c = 0;
	      var trunc = false;
	      if (range.e.c > 999) {
	        trunc = true;
	        range.e.c = 999;
	      }
	      if (range.e.r > 999999) {
	        trunc = true;
	        range.e.r = 999999;
	      }
	      if (trunc) console.error(("Truncating to ").concat(encode_range(range)));
	      var data = [];
	      if (ws["!data"]) data = ws["!data"]; else {
	        var colstr = [];
	        for (var _C = 0; _C <= range.e.c; ++_C) colstr[_C] = encode_col(_C);
	        for (var R_ = 0; R_ <= range.e.r; ++R_) {
	          data[R_] = [];
	          var _R = "" + (R_ + 1);
	          for (_C = 0; _C <= range.e.c; ++_C) {
	            var _cell = ws[colstr[_C] + _R];
	            if (!_cell) continue;
	            data[R_][_C] = _cell;
	          }
	        }
	      }
	      var LUT = {
	        cmnt: [{
	          a: "~54ee77S~",
	          t: "... the people who are crazy enough to think they can change the world, are the ones who do."
	        }],
	        ferr: [],
	        fmla: [],
	        nfmt: [],
	        ofmt: [],
	        rsst: [{
	          v: "~54ee77S~",
	          l: "https://sheetjs.com/"
	        }],
	        sst: ["~Sh33tJ5~"]
	      };
	      var pb = parse_shallow(tmaroot.messages[0].data);
	      {
	        pb[6][0].data = write_varint49(range.e.r + 1);
	        pb[7][0].data = write_varint49(range.e.c + 1);
	        delete pb[46];
	        var store = parse_shallow(pb[4][0].data);
	        {
	          var row_header_ref = parse_TSP_Reference(parse_shallow(store[1][0].data)[2][0].data);
	          numbers_iwa_doit(cfb, deps, row_header_ref, function (rowhead, _x) {
	            var _a;
	            var base_bucket = parse_shallow(rowhead.messages[0].data);
	            if ((_a = base_bucket == null ? void 0 : base_bucket[2]) == null ? void 0 : _a[0]) for (var R2 = 0; R2 < data.length; ++R2) {
	              var _bucket = parse_shallow(base_bucket[2][0].data);
	              _bucket[1][0].data = write_varint49(R2);
	              _bucket[4][0].data = write_varint49(data[R2].length);
	              base_bucket[2][R2] = {
	                type: base_bucket[2][0].type,
	                data: write_shallow(_bucket)
	              };
	            }
	            rowhead.messages[0].data = write_shallow(base_bucket);
	          });
	          var col_header_ref = parse_TSP_Reference(store[2][0].data);
	          numbers_iwa_doit(cfb, deps, col_header_ref, function (colhead, _x) {
	            var base_bucket = parse_shallow(colhead.messages[0].data);
	            for (var C = 0; C <= range.e.c; ++C) {
	              var _bucket = parse_shallow(base_bucket[2][0].data);
	              _bucket[1][0].data = write_varint49(C);
	              _bucket[4][0].data = write_varint49(range.e.r + 1);
	              base_bucket[2][C] = {
	                type: base_bucket[2][0].type,
	                data: write_shallow(_bucket)
	              };
	            }
	            colhead.messages[0].data = write_shallow(base_bucket);
	          });
	          var rbtree = parse_shallow(store[9][0].data);
	          rbtree[1] = [];
	          var tilestore = parse_shallow(store[3][0].data);
	          {
	            var tstride = 256;
	            tilestore[2] = [{
	              type: 0,
	              data: write_varint49(tstride)
	            }];
	            var tileref = parse_TSP_Reference(parse_shallow(tilestore[1][0].data)[2][0].data);
	            var save_token = (function () {
	              var metadata = numbers_iwa_find(cfb, deps, 2);
	              var mlist = parse_shallow(metadata.messages[0].data);
	              var mlst = mlist[3].filter(function (m) {
	                return varint_to_i32(parse_shallow(m.data)[1][0].data) == tileref;
	              });
	              return (mlst == null ? void 0 : mlst.length) ? varint_to_i32(parse_shallow(mlst[0].data)[12][0].data) : 0;
	            })();
	            {
	              CFB.utils.cfb_del(cfb, deps[tileref].location);
	              numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                var mlist = parse_shallow(ai.messages[0].data);
	                mlist[3] = mlist[3].filter(function (m) {
	                  return varint_to_i32(parse_shallow(m.data)[1][0].data) != tileref;
	                });
	                numbers_meta_del_dep(mlist, deps, tmaref, tileref);
	                ai.messages[0].data = write_shallow(mlist);
	              });
	              numbers_del_oref(tmaroot, tileref);
	            }
	            tilestore[1] = [];
	            var ntiles = Math.ceil((range.e.r + 1) / tstride);
	            for (var tidx = 0; tidx < ntiles; ++tidx) {
	              var newtileid = get_unique_msgid({
	                deps: [],
	                location: "",
	                type: 6002
	              }, deps);
	              deps[newtileid].location = ("Root Entry/Index/Tables/Tile-").concat(newtileid, ".iwa");
	              var tiledata = [[], [{
	                type: 0,
	                data: write_varint49(0)
	              }], [{
	                type: 0,
	                data: write_varint49(Math.min(range.e.r + 1, (tidx + 1) * tstride))
	              }], [{
	                type: 0,
	                data: write_varint49(0)
	              }], [{
	                type: 0,
	                data: write_varint49(Math.min((tidx + 1) * tstride, range.e.r + 1) - tidx * tstride)
	              }], [], [{
	                type: 0,
	                data: write_varint49(5)
	              }], [{
	                type: 0,
	                data: write_varint49(1)
	              }], [{
	                type: 0,
	                data: write_varint49(1 )
	              }]];
	              for (var R = tidx * tstride; R <= Math.min(range.e.r, (tidx + 1) * tstride - 1); ++R) {
	                var tilerow = write_TST_TileRowInfo(data[R], LUT, USE_WIDE_ROWS);
	                tilerow[1][0].data = write_varint49(R - tidx * tstride);
	                tiledata[5].push({
	                  data: write_shallow(tilerow),
	                  type: 2
	                });
	              }
	              tilestore[1].push({
	                type: 2,
	                data: write_shallow([[], [{
	                  type: 0,
	                  data: write_varint49(tidx)
	                }], [{
	                  type: 2,
	                  data: write_TSP_Reference(newtileid)
	                }]])
	              });
	              var newtile = {
	                id: newtileid,
	                messages: [write_iwam(6002, write_shallow(tiledata))]
	              };
	              var tilecontent = compress_iwa_file(write_iwa_file([newtile]));
	              CFB.utils.cfb_add(cfb, ("/Index/Tables/Tile-").concat(newtileid, ".iwa"), tilecontent);
	              numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                var mlist = parse_shallow(ai.messages[0].data);
	                mlist[3].push({
	                  type: 2,
	                  data: write_shallow([[], [{
	                    type: 0,
	                    data: write_varint49(newtileid)
	                  }], [{
	                    type: 2,
	                    data: stru8("Tables/Tile")
	                  }], [{
	                    type: 2,
	                    data: stru8(("Tables/Tile-").concat(newtileid))
	                  }], [{
	                    type: 2,
	                    data: new Uint8Array([2, 0, 0])
	                  }], [{
	                    type: 2,
	                    data: new Uint8Array([2, 0, 0])
	                  }], [], [], [], [], [{
	                    type: 0,
	                    data: write_varint49(0)
	                  }], [], [{
	                    type: 0,
	                    data: write_varint49(save_token)
	                  }]])
	                });
	                mlist[1] = [{
	                  type: 0,
	                  data: write_varint49(Math.max(newtileid + 1, varint_to_i32(mlist[1][0].data)))
	                }];
	                numbers_meta_add_dep(mlist, deps, tmaref, newtileid);
	                ai.messages[0].data = write_shallow(mlist);
	              });
	              numbers_add_oref(tmaroot, newtileid);
	              rbtree[1].push({
	                type: 2,
	                data: write_shallow([[], [{
	                  type: 0,
	                  data: write_varint49(tidx * tstride)
	                }], [{
	                  type: 0,
	                  data: write_varint49(tidx)
	                }]])
	              });
	            }
	          }
	          store[3][0].data = write_shallow(tilestore);
	          store[9][0].data = write_shallow(rbtree);
	          store[10] = [{
	            type: 2,
	            data: new Uint8Array([])
	          }];
	          if (ws["!merges"]) {
	            var mergeid = get_unique_msgid({
	              type: 6144,
	              deps: [tmaref],
	              location: deps[tmaref].location
	            }, deps);
	            tmafile.push({
	              id: mergeid,
	              messages: [write_iwam(6144, write_shallow([[], ws["!merges"].map(function (m) {
	                return {
	                  type: 2,
	                  data: write_shallow([[], [{
	                    type: 2,
	                    data: write_shallow([[], [{
	                      type: 5,
	                      data: new Uint8Array(new Uint16Array([m.s.r, m.s.c]).buffer)
	                    }]])
	                  }], [{
	                    type: 2,
	                    data: write_shallow([[], [{
	                      type: 5,
	                      data: new Uint8Array(new Uint16Array([m.e.r - m.s.r + 1, m.e.c - m.s.c + 1]).buffer)
	                    }]])
	                  }]])
	                };
	              })]))]
	            });
	            store[13] = [{
	              type: 2,
	              data: write_TSP_Reference(mergeid)
	            }];
	            numbers_iwa_doit(cfb, deps, 2, function (ai) {
	              var mlist = parse_shallow(ai.messages[0].data);
	              numbers_meta_add_dep(mlist, deps, tmaref, mergeid);
	              ai.messages[0].data = write_shallow(mlist);
	            });
	            numbers_add_oref(tmaroot, mergeid);
	          } else delete store[13];
	          var sstref = parse_TSP_Reference(store[4][0].data);
	          numbers_iwa_doit(cfb, deps, sstref, function (sstroot) {
	            var sstdata = parse_shallow(sstroot.messages[0].data);
	            {
	              sstdata[3] = [];
	              LUT.sst.forEach(function (str, i) {
	                if (i == 0) return;
	                sstdata[3].push({
	                  type: 2,
	                  data: write_shallow([[], [{
	                    type: 0,
	                    data: write_varint49(i)
	                  }], [{
	                    type: 0,
	                    data: write_varint49(1)
	                  }], [{
	                    type: 2,
	                    data: stru8(str)
	                  }]])
	                });
	              });
	            }
	            sstroot.messages[0].data = write_shallow(sstdata);
	          });
	          var rsstref = parse_TSP_Reference(store[17][0].data);
	          numbers_iwa_doit(cfb, deps, rsstref, function (rsstroot) {
	            var rsstdata = parse_shallow(rsstroot.messages[0].data);
	            rsstdata[3] = [];
	            var style_indices = [904980, 903835, 903815, 903845];
	            LUT.rsst.forEach(function (rsst, i) {
	              if (i == 0) return;
	              var tswpsa = [[], [{
	                type: 0,
	                data: new Uint8Array([5])
	              }], [], [{
	                type: 2,
	                data: stru8(rsst.v)
	              }]];
	              tswpsa[10] = [{
	                type: 0,
	                data: new Uint8Array([1])
	              }];
	              tswpsa[19] = [{
	                type: 2,
	                data: new Uint8Array([10, 6, 8, 0, 18, 2, 101, 110])
	              }];
	              tswpsa[5] = [{
	                type: 2,
	                data: new Uint8Array([10, 8, 8, 0, 18, 4, 8, 155, 149, 55])
	              }];
	              tswpsa[2] = [{
	                type: 2,
	                data: new Uint8Array([8, 148, 158, 55])
	              }];
	              tswpsa[6] = [{
	                type: 2,
	                data: new Uint8Array([10, 6, 8, 0, 16, 0, 24, 0])
	              }];
	              tswpsa[7] = [{
	                type: 2,
	                data: new Uint8Array([10, 8, 8, 0, 18, 4, 8, 135, 149, 55])
	              }];
	              tswpsa[8] = [{
	                type: 2,
	                data: new Uint8Array([10, 8, 8, 0, 18, 4, 8, 165, 149, 55])
	              }];
	              tswpsa[14] = [{
	                type: 2,
	                data: new Uint8Array([10, 6, 8, 0, 16, 0, 24, 0])
	              }];
	              tswpsa[24] = [{
	                type: 2,
	                data: new Uint8Array([10, 6, 8, 0, 16, 0, 24, 0])
	              }];
	              var tswpsaid = get_unique_msgid({
	                deps: [],
	                location: "",
	                type: 2001
	              }, deps);
	              var tswpsarefs = [];
	              if (rsst.l) {
	                var newhlinkid = numbers_add_msg(cfb, 2032, [[], [], [{
	                  type: 2,
	                  data: stru8(rsst.l)
	                }]], "/Index/Tables/DataList", deps);
	                tswpsa[11] = [];
	                var smartfield = [[], []];
	                if (!smartfield[1]) smartfield[1] = [];
	                smartfield[1].push({
	                  type: 2,
	                  data: write_shallow([[], [{
	                    type: 0,
	                    data: write_varint49(0)
	                  }], [{
	                    type: 2,
	                    data: write_TSP_Reference(newhlinkid)
	                  }]])
	                });
	                tswpsa[11][0] = {
	                  type: 2,
	                  data: write_shallow(smartfield)
	                };
	                tswpsarefs.push(newhlinkid);
	              }
	              numbers_add_msg(cfb, 2001, tswpsa, "/Index/Tables/DataList", deps, tswpsaid);
	              numbers_iwa_doit(cfb, deps, tswpsaid, function (iwa) {
	                style_indices.forEach(function (ref) {
	                  return numbers_add_oref(iwa, ref);
	                });
	                tswpsarefs.forEach(function (ref) {
	                  return numbers_add_oref(iwa, ref);
	                });
	              });
	              var rtpaid = numbers_add_msg(cfb, 6218, [[], [{
	                type: 2,
	                data: write_TSP_Reference(tswpsaid)
	              }], [], [{
	                type: 2,
	                data: new Uint8Array([13, 255, 255, 255, 0, 18, 10, 16, 255, 255, 1, 24, 255, 255, 255, 255, 7])
	              }]], "/Index/Tables/DataList", deps);
	              numbers_iwa_doit(cfb, deps, rtpaid, function (iwa) {
	                return numbers_add_oref(iwa, tswpsaid);
	              });
	              rsstdata[3].push({
	                type: 2,
	                data: write_shallow([[], [{
	                  type: 0,
	                  data: write_varint49(i)
	                }], [{
	                  type: 0,
	                  data: write_varint49(1)
	                }], [], [], [], [], [], [], [{
	                  type: 2,
	                  data: write_TSP_Reference(rtpaid)
	                }]])
	              });
	              numbers_add_oref(rsstroot, rtpaid);
	              numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                var mlist = parse_shallow(ai.messages[0].data);
	                numbers_meta_add_dep(mlist, deps, rsstref, rtpaid);
	                numbers_meta_add_dep(mlist, deps, rtpaid, tswpsaid);
	                numbers_meta_add_dep(mlist, deps, tswpsaid, tswpsarefs);
	                numbers_meta_add_dep(mlist, deps, tswpsaid, style_indices);
	                ai.messages[0].data = write_shallow(mlist);
	              });
	            });
	            rsstroot.messages[0].data = write_shallow(rsstdata);
	          });
	          if (LUT.cmnt.length > 1) {
	            var cmntref = parse_TSP_Reference(store[19][0].data);
	            var authors = {}, iauthor = 0;
	            numbers_iwa_doit(cfb, deps, cmntref, function (cmntroot) {
	              var cmntdata = parse_shallow(cmntroot.messages[0].data);
	              {
	                cmntdata[3] = [];
	                LUT.cmnt.forEach(function (cc, i) {
	                  if (i == 0) return;
	                  var replies = [];
	                  if (cc.replies) cc.replies.forEach(function (c) {
	                    if (!authors[c.a || ""]) authors[c.a || ""] = numbers_add_msg(cfb, 212, [[], [{
	                      type: 2,
	                      data: stru8(c.a || "")
	                    }], [{
	                      type: 2,
	                      data: get_author_color(++iauthor)
	                    }], [], [{
	                      type: 0,
	                      data: write_varint49(0)
	                    }]], "/Index/Tables/DataList", deps);
	                    var aaaid2 = authors[c.a || ""];
	                    var csaid2 = numbers_add_msg(cfb, 3056, [[], [{
	                      type: 2,
	                      data: stru8(c.t || "")
	                    }], [{
	                      type: 2,
	                      data: write_shallow([[], [{
	                        type: 1,
	                        data: new Uint8Array([0, 0, 0, 128, 116, 109, 182, 65])
	                      }]])
	                    }], [{
	                      type: 2,
	                      data: write_TSP_Reference(aaaid2)
	                    }]], "/Index/Tables/DataList", deps);
	                    numbers_iwa_doit(cfb, deps, csaid2, function (iwa) {
	                      return numbers_add_oref(iwa, aaaid2);
	                    });
	                    replies.push(csaid2);
	                    numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                      var mlist = parse_shallow(ai.messages[0].data);
	                      numbers_meta_add_dep(mlist, deps, csaid2, aaaid2);
	                      ai.messages[0].data = write_shallow(mlist);
	                    });
	                  });
	                  if (!authors[cc.a || ""]) authors[cc.a || ""] = numbers_add_msg(cfb, 212, [[], [{
	                    type: 2,
	                    data: stru8(cc.a || "")
	                  }], [{
	                    type: 2,
	                    data: get_author_color(++iauthor)
	                  }], [], [{
	                    type: 0,
	                    data: write_varint49(0)
	                  }]], "/Index/Tables/DataList", deps);
	                  var aaaid = authors[cc.a || ""];
	                  var csaid = numbers_add_msg(cfb, 3056, [[], [{
	                    type: 2,
	                    data: stru8(cc.t || "")
	                  }], [{
	                    type: 2,
	                    data: write_shallow([[], [{
	                      type: 1,
	                      data: new Uint8Array([0, 0, 0, 128, 116, 109, 182, 65])
	                    }]])
	                  }], [{
	                    type: 2,
	                    data: write_TSP_Reference(aaaid)
	                  }], replies.map(function (r) {
	                    return {
	                      type: 2,
	                      data: write_TSP_Reference(r)
	                    };
	                  }), [{
	                    type: 2,
	                    data: write_shallow([[], [{
	                      type: 0,
	                      data: write_varint49(i)
	                    }], [{
	                      type: 0,
	                      data: write_varint49(0)
	                    }]])
	                  }]], "/Index/Tables/DataList", deps);
	                  numbers_iwa_doit(cfb, deps, csaid, function (iwa) {
	                    numbers_add_oref(iwa, aaaid);
	                    replies.forEach(function (r) {
	                      return numbers_add_oref(iwa, r);
	                    });
	                  });
	                  cmntdata[3].push({
	                    type: 2,
	                    data: write_shallow([[], [{
	                      type: 0,
	                      data: write_varint49(i)
	                    }], [{
	                      type: 0,
	                      data: write_varint49(1)
	                    }], [], [], [], [], [], [], [], [{
	                      type: 2,
	                      data: write_TSP_Reference(csaid)
	                    }]])
	                  });
	                  numbers_add_oref(cmntroot, csaid);
	                  numbers_iwa_doit(cfb, deps, 2, function (ai) {
	                    var mlist = parse_shallow(ai.messages[0].data);
	                    numbers_meta_add_dep(mlist, deps, cmntref, csaid);
	                    numbers_meta_add_dep(mlist, deps, csaid, aaaid);
	                    if (replies.length) numbers_meta_add_dep(mlist, deps, csaid, replies);
	                    ai.messages[0].data = write_shallow(mlist);
	                  });
	                });
	              }
	              cmntdata[2][0].data = write_varint49(LUT.cmnt.length + 1);
	              cmntroot.messages[0].data = write_shallow(cmntdata);
	            });
	          }
	        }
	        pb[4][0].data = write_shallow(store);
	      }
	      tmaroot.messages[0].data = write_shallow(pb);
	    }
	    function fix_opts_func(defaults) {
	      return function fix_opts(opts) {
	        for (var i = 0; i != defaults.length; ++i) {
	          var d = defaults[i];
	          if (opts[d[0]] === undefined) opts[d[0]] = d[1];
	          if (d[2] === "n") opts[d[0]] = Number(opts[d[0]]);
	        }
	      };
	    }
	    function fix_read_opts(opts) {
	      fix_opts_func([["cellNF", false], ["cellHTML", true], ["cellFormula", true], ["cellStyles", false], ["cellText", true], ["cellDates", false], ["sheetStubs", false], ["sheetRows", 0, "n"], ["bookDeps", false], ["bookSheets", false], ["bookProps", false], ["bookFiles", false], ["bookVBA", false], ["password", ""], ["WTF", false]])(opts);
	    }
	    function fix_write_opts(opts) {
	      fix_opts_func([["cellDates", false], ["bookSST", false], ["bookType", "xlsx"], ["compression", false], ["WTF", false]])(opts);
	    }
	    function get_sheet_type(n) {
	      if (RELS.WS.indexOf(n) > -1) return "sheet";
	      if (n == RELS.CS) return "chart";
	      if (n == RELS.DS) return "dialog";
	      if (n == RELS.MS) return "macro";
	      return n && n.length ? n : "sheet";
	    }
	    function safe_parse_wbrels(wbrels, sheets) {
	      if (!wbrels) return 0;
	      try {
	        wbrels = sheets.map(function pwbr(w) {
	          if (!w.id) w.id = w.strRelID;
	          return [w.name, wbrels["!id"][w.id].Target, get_sheet_type(wbrels["!id"][w.id].Type)];
	        });
	      } catch (e) {
	        return null;
	      }
	      return !wbrels || wbrels.length === 0 ? null : wbrels;
	    }
	    function parse_sheet_legacy_drawing(sheet, type, zip, path, idx, opts, wb, comments) {
	      if (!sheet || !sheet["!legdrawel"]) return;
	      var dfile = resolve_path(sheet["!legdrawel"].Target, path);
	      var draw = getzipstr(zip, dfile, true);
	      if (draw) parse_vml(utf8read(draw), sheet, comments || []);
	    }
	    function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
	      try {
	        sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
	        var data = getzipdata(zip, path);
	        var _ws;
	        switch (stype) {
	          case "sheet":
	            _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
	            break;
	          case "chart":
	            _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
	            if (!_ws || !_ws["!drawel"]) break;
	            var dfile = resolve_path(_ws["!drawel"].Target, path);
	            var drelsp = get_rels_path(dfile);
	            var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
	            var chartp = resolve_path(draw, dfile);
	            var crelsp = get_rels_path(chartp);
	            _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
	            break;
	          case "macro":
	            _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
	            break;
	          case "dialog":
	            _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
	            break;
	          default:
	            throw new Error("Unrecognized sheet type " + stype);
	        }
	        sheets[sheet] = _ws;
	        var comments = [], tcomments = [];
	        if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function (n) {
	          var dfile = "";
	          if (sheetRels[sheet][n].Type == RELS.CMNT) {
	            dfile = resolve_path(sheetRels[sheet][n].Target, path);
	            comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
	            if (!comments || !comments.length) return;
	            sheet_insert_comments(_ws, comments, false);
	          }
	          if (sheetRels[sheet][n].Type == RELS.TCMNT) {
	            dfile = resolve_path(sheetRels[sheet][n].Target, path);
	            tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));
	          }
	        });
	        if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
	        parse_sheet_legacy_drawing(_ws, stype, zip, path, idx, opts, wb, comments);
	      } catch (e) {
	        if (opts.WTF) throw e;
	      }
	    }
	    function strip_front_slash(x) {
	      return x.charAt(0) == "/" ? x.slice(1) : x;
	    }
	    function parse_zip(zip, opts) {
	      make_ssf();
	      opts = opts || ({});
	      fix_read_opts(opts);
	      if (safegetzipfile(zip, "META-INF/manifest.xml")) return parse_ods(zip, opts);
	      if (safegetzipfile(zip, "objectdata.xml")) return parse_ods(zip, opts);
	      if (safegetzipfile(zip, "Index/Document.iwa")) {
	        if (typeof Uint8Array == "undefined") throw new Error("NUMBERS file parsing requires Uint8Array support");
	        if (typeof parse_numbers_iwa != "undefined") {
	          if (zip.FileIndex) return parse_numbers_iwa(zip, opts);
	          var _zip = CFB.utils.cfb_new();
	          zipentries(zip).forEach(function (e) {
	            zip_add_file(_zip, e, getzipbin(zip, e));
	          });
	          return parse_numbers_iwa(_zip, opts);
	        }
	        throw new Error("Unsupported NUMBERS file");
	      }
	      if (!safegetzipfile(zip, "[Content_Types].xml")) {
	        if (safegetzipfile(zip, "index.xml.gz")) throw new Error("Unsupported NUMBERS 08 file");
	        if (safegetzipfile(zip, "index.xml")) throw new Error("Unsupported NUMBERS 09 file");
	        var index_zip = CFB.find(zip, "Index.zip");
	        if (index_zip) {
	          opts = dup(opts);
	          delete opts.type;
	          if (typeof index_zip.content == "string") opts.type = "binary";
	          if (typeof Bun !== "undefined" && Buffer.isBuffer(index_zip.content)) return readSync(new Uint8Array(index_zip.content), opts);
	          return readSync(index_zip.content, opts);
	        }
	        throw new Error("Unsupported ZIP file");
	      }
	      var entries = zipentries(zip);
	      var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
	      var xlsb = false;
	      var sheets, binname;
	      if (dir.workbooks.length === 0) {
	        binname = "xl/workbook.xml";
	        if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
	      }
	      if (dir.workbooks.length === 0) {
	        binname = "xl/workbook.bin";
	        if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook");
	        dir.workbooks.push(binname);
	        xlsb = true;
	      }
	      if (dir.workbooks[0].slice(-3) == "bin") xlsb = true;
	      var themes = {};
	      var styles = {};
	      if (!opts.bookSheets && !opts.bookProps) {
	        strs = [];
	        if (dir.sst) try {
	          strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
	        } catch (e) {
	          if (opts.WTF) throw e;
	        }
	        if (opts.cellStyles && dir.themes.length) themes = parse_theme_xml(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", opts);
	        if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
	      }
	      dir.links.map(function (link) {
	        try {
	          var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
	          return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
	        } catch (e) {}
	      });
	      var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
	      var props = {}, propdata = "";
	      if (dir.coreprops.length) {
	        propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
	        if (propdata) props = parse_core_props(propdata);
	        if (dir.extprops.length !== 0) {
	          propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
	          if (propdata) parse_ext_props(propdata, props, opts);
	        }
	      }
	      var custprops = {};
	      if (!opts.bookSheets || opts.bookProps) {
	        if (dir.custprops.length !== 0) {
	          propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
	          if (propdata) custprops = parse_cust_props(propdata, opts);
	        }
	      }
	      var out = {};
	      if (opts.bookSheets || opts.bookProps) {
	        if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {
	          return x.name;
	        }); else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;
	        if (opts.bookProps) {
	          out.Props = props;
	          out.Custprops = custprops;
	        }
	        if (opts.bookSheets && typeof sheets !== "undefined") out.SheetNames = sheets;
	        if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
	      }
	      sheets = {};
	      var deps = {};
	      if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain);
	      var i = 0;
	      var sheetRels = {};
	      var path, relsPath;
	      {
	        var wbsheets = wb.Sheets;
	        props.Worksheets = wbsheets.length;
	        props.SheetNames = [];
	        for (var j = 0; j != wbsheets.length; ++j) {
	          props.SheetNames[j] = wbsheets[j].name;
	        }
	      }
	      var wbext = xlsb ? "bin" : "xml";
	      var wbrelsi = dir.workbooks[0].lastIndexOf("/");
	      var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
	      if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
	      var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
	      if ((dir.metadata || []).length >= 1) {
	        opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
	      }
	      if ((dir.people || []).length >= 1) {
	        opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
	      }
	      if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
	      var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
	      wsloop: for (i = 0; i != props.Worksheets; ++i) {
	        var stype = "sheet";
	        if (wbrels && wbrels[i]) {
	          path = "xl/" + wbrels[i][1].replace(/[\/]?xl\//, "");
	          if (!safegetzipfile(zip, path)) path = wbrels[i][1];
	          if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i][1];
	          stype = wbrels[i][2];
	        } else {
	          path = "xl/worksheets/sheet" + (i + 1 - nmode) + "." + wbext;
	          path = path.replace(/sheet0\./, "sheet.");
	        }
	        relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
	        if (opts && opts.sheets != null) switch (typeof opts.sheets) {
	          case "number":
	            if (i != opts.sheets) continue wsloop;
	            break;
	          case "string":
	            if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;
	            break;
	          default:
	            if (Array.isArray && Array.isArray(opts.sheets)) {
	              var snjseen = false;
	              for (var snj = 0; snj != opts.sheets.length; ++snj) {
	                if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen = 1;
	                if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
	              }
	              if (!snjseen) continue wsloop;
	            }
	        }
	        safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
	      }
	      out = {
	        Directory: dir,
	        Workbook: wb,
	        Props: props,
	        Custprops: custprops,
	        Deps: deps,
	        Sheets: sheets,
	        SheetNames: props.SheetNames,
	        Strings: strs,
	        Styles: styles,
	        Themes: themes,
	        SSF: dup(table_fmt)
	      };
	      if (opts && opts.bookFiles) {
	        if (zip.files) {
	          out.keys = entries;
	          out.files = zip.files;
	        } else {
	          out.keys = [];
	          out.files = {};
	          zip.FullPaths.forEach(function (p, idx) {
	            p = p.replace(/^Root Entry[\/]/, "");
	            out.keys.push(p);
	            out.files[p] = zip.FileIndex[idx];
	          });
	        }
	      }
	      if (opts && opts.bookVBA) {
	        if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true); else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
	      }
	      out.bookType = xlsb ? "xlsb" : "xlsx";
	      return out;
	    }
	    function parse_xlsxcfb(cfb, _opts) {
	      var opts = _opts || ({});
	      var f = "Workbook", data = CFB.find(cfb, f);
	      try {
	        f = "/!DataSpaces/Version";
	        data = CFB.find(cfb, f);
	        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
	        parse_DataSpaceVersionInfo(data.content);
	        f = "/!DataSpaces/DataSpaceMap";
	        data = CFB.find(cfb, f);
	        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
	        var dsm = parse_DataSpaceMap(data.content);
	        if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage") throw new Error("ECMA-376 Encrypted file bad " + f);
	        f = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
	        data = CFB.find(cfb, f);
	        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
	        var seds = parse_DataSpaceDefinition(data.content);
	        if (seds.length != 1 || seds[0] != "StrongEncryptionTransform") throw new Error("ECMA-376 Encrypted file bad " + f);
	        f = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
	        data = CFB.find(cfb, f);
	        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
	        parse_Primary(data.content);
	      } catch (e) {}
	      f = "/EncryptionInfo";
	      data = CFB.find(cfb, f);
	      if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
	      var einfo = parse_EncryptionInfo(data.content);
	      f = "/EncryptedPackage";
	      data = CFB.find(cfb, f);
	      if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
	      if (einfo[0] == 4 && typeof decrypt_agile !== "undefined") return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
	      if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined") return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
	      throw new Error("File is password-protected");
	    }
	    function write_zip_xlsb(wb, opts) {
	      if (wb && !wb.SSF) {
	        wb.SSF = dup(table_fmt);
	      }
	      if (wb && wb.SSF) {
	        make_ssf();
	        SSF_load_table(wb.SSF);
	        opts.revssf = evert_num(wb.SSF);
	        opts.revssf[wb.SSF[65535]] = 0;
	        opts.ssf = wb.SSF;
	      }
	      opts.rels = {};
	      opts.wbrels = {};
	      opts.Strings = [];
	      opts.Strings.Count = 0;
	      opts.Strings.Unique = 0;
	      if (browser_has_Map) opts.revStrings = new Map(); else {
	        opts.revStrings = {};
	        opts.revStrings.foo = [];
	        delete opts.revStrings.foo;
	      }
	      var wbext = "bin";
	      var vbafmt = true;
	      var ct = new_ct();
	      fix_write_opts(opts = opts || ({}));
	      var zip = zip_new();
	      var f = "", rId = 0;
	      opts.cellXfs = [];
	      get_cell_style(opts.cellXfs, {}, {
	        revssf: {
	          "General": 0
	        }
	      });
	      if (!wb.Props) wb.Props = {};
	      f = "docProps/core.xml";
	      zip_add_file(zip, f, write_core_props(wb.Props, opts));
	      ct.coreprops.push(f);
	      add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
	      f = "docProps/app.xml";
	      if (wb.Props && wb.Props.SheetNames) ; else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames; else {
	        var _sn = [];
	        for (var _i = 0; _i < wb.SheetNames.length; ++_i) if ((wb.Workbook.Sheets[_i] || ({})).Hidden != 2) _sn.push(wb.SheetNames[_i]);
	        wb.Props.SheetNames = _sn;
	      }
	      wb.Props.Worksheets = wb.Props.SheetNames.length;
	      zip_add_file(zip, f, write_ext_props(wb.Props));
	      ct.extprops.push(f);
	      add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
	      if (wb.Custprops !== wb.Props && keys(wb.Custprops || ({})).length > 0) {
	        f = "docProps/custom.xml";
	        zip_add_file(zip, f, write_cust_props(wb.Custprops));
	        ct.custprops.push(f);
	        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
	      }
	      var people = ["SheetJ5"];
	      opts.tcid = 0;
	      for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
	        var wsrels = {
	          "!id": {}
	        };
	        var ws = wb.Sheets[wb.SheetNames[rId - 1]];
	        var _type = (ws || ({}))["!type"] || "sheet";
	        switch (_type) {
	          case "chart":
	          default:
	            f = "xl/worksheets/sheet" + rId + "." + wbext;
	            zip_add_file(zip, f, write_ws_bin(rId - 1, opts, wb, wsrels));
	            ct.sheets.push(f);
	            add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
	        }
	        if (ws) {
	          var comments = ws["!comments"];
	          var need_vml = false;
	          var cf = "";
	          if (comments && comments.length > 0) {
	            var needtc = false;
	            comments.forEach(function (carr) {
	              carr[1].forEach(function (c) {
	                if (c.T == true) needtc = true;
	              });
	            });
	            if (needtc) {
	              cf = "xl/threadedComments/threadedComment" + rId + ".xml";
	              zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
	              ct.threadedcomments.push(cf);
	              add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + ".xml", RELS.TCMNT);
	            }
	            cf = "xl/comments" + rId + "." + wbext;
	            zip_add_file(zip, cf, write_comments_bin(comments));
	            ct.comments.push(cf);
	            add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
	            need_vml = true;
	          }
	          if (ws["!legacy"]) {
	            if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_vml(rId, ws["!comments"]));
	          }
	          delete ws["!comments"];
	          delete ws["!legacy"];
	        }
	        if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
	      }
	      if (opts.Strings != null && opts.Strings.length > 0) {
	        f = "xl/sharedStrings." + wbext;
	        zip_add_file(zip, f, write_sst_bin(opts.Strings));
	        ct.strs.push(f);
	        add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
	      }
	      f = "xl/workbook." + wbext;
	      zip_add_file(zip, f, write_wb_bin(wb));
	      ct.workbooks.push(f);
	      add_rels(opts.rels, 1, f, RELS.WB);
	      f = "xl/theme/theme1.xml";
	      var ww = write_theme(wb.Themes, opts);
	      zip_add_file(zip, f, ww);
	      ct.themes.push(f);
	      add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
	      f = "xl/styles." + wbext;
	      zip_add_file(zip, f, write_sty_bin(wb, opts));
	      ct.styles.push(f);
	      add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
	      if (wb.vbaraw && vbafmt) {
	        f = "xl/vbaProject.bin";
	        zip_add_file(zip, f, wb.vbaraw);
	        ct.vba.push(f);
	        add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
	      }
	      f = "xl/metadata." + wbext;
	      zip_add_file(zip, f, write_xlmeta_bin());
	      ct.metadata.push(f);
	      add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
	      if (people.length > 1) {
	        f = "xl/persons/person.xml";
	        zip_add_file(zip, f, write_people_xml(people));
	        ct.people.push(f);
	        add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
	      }
	      zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
	      zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
	      zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
	      delete opts.revssf;
	      delete opts.ssf;
	      return zip;
	    }
	    function write_zip_xlsx(wb, opts) {
	      if (wb && !wb.SSF) {
	        wb.SSF = dup(table_fmt);
	      }
	      if (wb && wb.SSF) {
	        make_ssf();
	        SSF_load_table(wb.SSF);
	        opts.revssf = evert_num(wb.SSF);
	        opts.revssf[wb.SSF[65535]] = 0;
	        opts.ssf = wb.SSF;
	      }
	      opts.rels = {};
	      opts.wbrels = {};
	      opts.Strings = [];
	      opts.Strings.Count = 0;
	      opts.Strings.Unique = 0;
	      if (browser_has_Map) opts.revStrings = new Map(); else {
	        opts.revStrings = {};
	        opts.revStrings.foo = [];
	        delete opts.revStrings.foo;
	      }
	      var wbext = "xml";
	      var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
	      var ct = new_ct();
	      fix_write_opts(opts = opts || ({}));
	      var zip = zip_new();
	      var f = "", rId = 0;
	      opts.cellXfs = [];
	      get_cell_style(opts.cellXfs, {}, {
	        revssf: {
	          "General": 0
	        }
	      });
	      if (!wb.Props) wb.Props = {};
	      f = "docProps/core.xml";
	      zip_add_file(zip, f, write_core_props(wb.Props, opts));
	      ct.coreprops.push(f);
	      add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
	      f = "docProps/app.xml";
	      if (wb.Props && wb.Props.SheetNames) ; else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames; else {
	        var _sn = [];
	        for (var _i = 0; _i < wb.SheetNames.length; ++_i) if ((wb.Workbook.Sheets[_i] || ({})).Hidden != 2) _sn.push(wb.SheetNames[_i]);
	        wb.Props.SheetNames = _sn;
	      }
	      wb.Props.Worksheets = wb.Props.SheetNames.length;
	      zip_add_file(zip, f, write_ext_props(wb.Props));
	      ct.extprops.push(f);
	      add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
	      if (wb.Custprops !== wb.Props && keys(wb.Custprops || ({})).length > 0) {
	        f = "docProps/custom.xml";
	        zip_add_file(zip, f, write_cust_props(wb.Custprops));
	        ct.custprops.push(f);
	        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
	      }
	      var people = ["SheetJ5"];
	      opts.tcid = 0;
	      for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
	        var wsrels = {
	          "!id": {}
	        };
	        var ws = wb.Sheets[wb.SheetNames[rId - 1]];
	        var _type = (ws || ({}))["!type"] || "sheet";
	        switch (_type) {
	          case "chart":
	          default:
	            f = "xl/worksheets/sheet" + rId + "." + wbext;
	            zip_add_file(zip, f, write_ws_xml(rId - 1, opts, wb, wsrels));
	            ct.sheets.push(f);
	            add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
	        }
	        if (ws) {
	          var comments = ws["!comments"];
	          var need_vml = false;
	          var cf = "";
	          if (comments && comments.length > 0) {
	            var needtc = false;
	            comments.forEach(function (carr) {
	              carr[1].forEach(function (c) {
	                if (c.T == true) needtc = true;
	              });
	            });
	            if (needtc) {
	              cf = "xl/threadedComments/threadedComment" + rId + ".xml";
	              zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
	              ct.threadedcomments.push(cf);
	              add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + ".xml", RELS.TCMNT);
	            }
	            cf = "xl/comments" + rId + "." + wbext;
	            zip_add_file(zip, cf, write_comments_xml(comments));
	            ct.comments.push(cf);
	            add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
	            need_vml = true;
	          }
	          if (ws["!legacy"]) {
	            if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_vml(rId, ws["!comments"]));
	          }
	          delete ws["!comments"];
	          delete ws["!legacy"];
	        }
	        if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
	      }
	      if (opts.Strings != null && opts.Strings.length > 0) {
	        f = "xl/sharedStrings." + wbext;
	        zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));
	        ct.strs.push(f);
	        add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
	      }
	      f = "xl/workbook." + wbext;
	      zip_add_file(zip, f, write_wb_xml(wb));
	      ct.workbooks.push(f);
	      add_rels(opts.rels, 1, f, RELS.WB);
	      f = "xl/theme/theme1.xml";
	      zip_add_file(zip, f, write_theme(wb.Themes, opts));
	      ct.themes.push(f);
	      add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
	      f = "xl/styles." + wbext;
	      zip_add_file(zip, f, write_sty_xml(wb, opts));
	      ct.styles.push(f);
	      add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
	      if (wb.vbaraw && vbafmt) {
	        f = "xl/vbaProject.bin";
	        zip_add_file(zip, f, wb.vbaraw);
	        ct.vba.push(f);
	        add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
	      }
	      f = "xl/metadata." + wbext;
	      zip_add_file(zip, f, write_xlmeta_xml());
	      ct.metadata.push(f);
	      add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
	      if (people.length > 1) {
	        f = "xl/persons/person.xml";
	        zip_add_file(zip, f, write_people_xml(people));
	        ct.people.push(f);
	        add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
	      }
	      zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
	      zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
	      zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
	      delete opts.revssf;
	      delete opts.ssf;
	      return zip;
	    }
	    function firstbyte(f, o) {
	      var x = "";
	      switch ((o || ({})).type || "base64") {
	        case "buffer":
	          return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
	        case "base64":
	          x = Base64_decode(f.slice(0, 12));
	          break;
	        case "binary":
	          x = f;
	          break;
	        case "array":
	          return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
	        default:
	          throw new Error("Unrecognized type " + (o && o.type || "undefined"));
	      }
	      return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
	    }
	    function read_cfb(cfb, opts) {
	      if (CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
	      return parse_xlscfb(cfb, opts);
	    }
	    function read_zip(data, opts) {
	      var zip, d = data;
	      var o = opts || ({});
	      if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
	      zip = zip_read(d, o);
	      return parse_zip(zip, o);
	    }
	    function read_plaintext(data, o) {
	      var i = 0;
	      main: while (i < data.length) switch (data.charCodeAt(i)) {
	        case 10:
	        case 13:
	        case 32:
	          ++i;
	          break;
	        case 60:
	          return parse_xlml(data.slice(i), o);
	        default:
	          break main;
	      }
	      return PRN.to_workbook(data, o);
	    }
	    function read_plaintext_raw(data, o) {
	      var str = "", bytes = firstbyte(data, o);
	      switch (o.type) {
	        case "base64":
	          str = Base64_decode(data);
	          break;
	        case "binary":
	          str = data;
	          break;
	        case "buffer":
	          str = data.toString("binary");
	          break;
	        case "array":
	          str = cc2str(data);
	          break;
	        default:
	          throw new Error("Unrecognized type " + o.type);
	      }
	      if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str);
	      o.type = "binary";
	      return read_plaintext(str, o);
	    }
	    function read_utf16(data, o) {
	      var d = data;
	      if (o.type == "base64") d = Base64_decode(d);
	      if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer) d = new Uint8Array(data);
	      d = typeof $cptable !== "undefined" ? $cptable.utils.decode(1200, d.slice(2), "str") : has_buf && Buffer.isBuffer(data) ? data.slice(2).toString("utf16le") : typeof Uint8Array !== "undefined" && d instanceof Uint8Array ? typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le").decode(d.slice(2)) : utf16lereadu(d.slice(2)) : utf16leread(d.slice(2));
	      o.type = "binary";
	      return read_plaintext(d, o);
	    }
	    function bstrify(data) {
	      return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
	    }
	    function read_prn(data, d, o, str) {
	      if (str) {
	        o.type = "string";
	        return PRN.to_workbook(data, o);
	      }
	      return PRN.to_workbook(d, o);
	    }
	    function readSync(data, opts) {
	      reset_cp();
	      var o = opts || ({});
	      if (o.codepage && typeof $cptable === "undefined") console.error("Codepage tables are not loaded.  Non-ASCII characters may not give expected results");
	      if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
	      if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
	      var d = data, n = [0, 0, 0, 0], str = false;
	      if (o.cellStyles) {
	        o.cellNF = true;
	        o.sheetStubs = true;
	      }
	      _ssfopts = {};
	      if (o.dateNF) _ssfopts.dateNF = o.dateNF;
	      if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
	      if (o.type == "file") {
	        o.type = has_buf ? "buffer" : "binary";
	        d = read_binary(data);
	        if (typeof Uint8Array !== "undefined" && !has_buf) o.type = "array";
	      }
	      if (o.type == "string") {
	        str = true;
	        o.type = "binary";
	        o.codepage = 65001;
	        d = bstrify(data);
	      }
	      if (o.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
	        var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
	        vu.foo = "bar";
	        if (!vu.foo) {
	          o = dup(o);
	          o.type = "array";
	          return readSync(ab2a(d), o);
	        }
	      }
	      switch ((n = firstbyte(d, o))[0]) {
	        case 208:
	          if (n[1] === 207 && n[2] === 17 && n[3] === 224 && n[4] === 161 && n[5] === 177 && n[6] === 26 && n[7] === 225) return read_cfb(CFB.read(d, o), o);
	          break;
	        case 9:
	          if (n[1] <= 8) return parse_xlscfb(d, o);
	          break;
	        case 60:
	          return parse_xlml(d, o);
	        case 73:
	          if (n[1] === 73 && n[2] === 42 && n[3] === 0) throw new Error("TIFF Image File is not a spreadsheet");
	          if (n[1] === 68) return read_wb_ID(d, o);
	          break;
	        case 84:
	          if (n[1] === 65 && n[2] === 66 && n[3] === 76) return DIF.to_workbook(d, o);
	          break;
	        case 80:
	          return n[1] === 75 && n[2] < 9 && n[3] < 9 ? read_zip(d, o) : read_prn(data, d, o, str);
	        case 239:
	          return n[3] === 60 ? parse_xlml(d, o) : read_prn(data, d, o, str);
	        case 255:
	          if (n[1] === 254) {
	            return read_utf16(d, o);
	          } else if (n[1] === 0 && n[2] === 2 && n[3] === 0) return WK_.to_workbook(d, o);
	          break;
	        case 0:
	          if (n[1] === 0) {
	            if (n[2] >= 2 && n[3] === 0) return WK_.to_workbook(d, o);
	            if (n[2] === 0 && (n[3] === 8 || n[3] === 9)) return WK_.to_workbook(d, o);
	          }
	          break;
	        case 3:
	        case 131:
	        case 139:
	        case 140:
	          return DBF.to_workbook(d, o);
	        case 123:
	          if (n[1] === 92 && n[2] === 114 && n[3] === 116) return rtf_to_workbook(d, o);
	          break;
	        case 10:
	        case 13:
	        case 32:
	          return read_plaintext_raw(d, o);
	        case 137:
	          if (n[1] === 80 && n[2] === 78 && n[3] === 71) throw new Error("PNG Image File is not a spreadsheet");
	          break;
	        case 8:
	          if (n[1] === 231) throw new Error("Unsupported Multiplan 1.x file!");
	          break;
	        case 12:
	          if (n[1] === 236) throw new Error("Unsupported Multiplan 2.x file!");
	          if (n[1] === 237) throw new Error("Unsupported Multiplan 3.x file!");
	          break;
	      }
	      if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
	      return read_prn(data, d, o, str);
	    }
	    function readFileSync(filename, opts) {
	      var o = opts || ({});
	      o.type = "file";
	      return readSync(filename, o);
	    }
	    function write_cfb_ctr(cfb, o) {
	      switch (o.type) {
	        case "base64":
	        case "binary":
	          break;
	        case "buffer":
	        case "array":
	          o.type = "";
	          break;
	        case "file":
	          return write_dl(o.file, CFB.write(cfb, {
	            type: has_buf ? "buffer" : ""
	          }));
	        case "string":
	          throw new Error("'string' output type invalid for '" + o.bookType + "' files");
	        default:
	          throw new Error("Unrecognized type " + o.type);
	      }
	      return CFB.write(cfb, o);
	    }
	    function write_zip(wb, opts) {
	      switch (opts.bookType) {
	        case "ods":
	          return write_ods(wb, opts);
	        case "numbers":
	          return write_numbers_iwa(wb, opts);
	        case "xlsb":
	          return write_zip_xlsb(wb, opts);
	        default:
	          return write_zip_xlsx(wb, opts);
	      }
	    }
	    function write_zip_type(wb, opts) {
	      var o = dup(opts || ({}));
	      var z = write_zip(wb, o);
	      return write_zip_denouement(z, o);
	    }
	    function write_zip_typeXLSX(wb, opts) {
	      var o = dup(opts || ({}));
	      var z = write_zip_xlsx(wb, o);
	      return write_zip_denouement(z, o);
	    }
	    function write_zip_denouement(z, o) {
	      var oopts = {};
	      var ftype = has_buf ? "nodebuffer" : typeof Uint8Array !== "undefined" ? "array" : "string";
	      if (o.compression) oopts.compression = "DEFLATE";
	      if (o.password) oopts.type = ftype; else switch (o.type) {
	        case "base64":
	          oopts.type = "base64";
	          break;
	        case "binary":
	          oopts.type = "string";
	          break;
	        case "string":
	          throw new Error("'string' output type invalid for '" + o.bookType + "' files");
	        case "buffer":
	        case "file":
	          oopts.type = ftype;
	          break;
	        default:
	          throw new Error("Unrecognized type " + o.type);
	      }
	      var out = z.FullPaths ? CFB.write(z, {
	        fileType: "zip",
	        type: ({
	          "nodebuffer": "buffer",
	          "string": "binary"
	        })[oopts.type] || oopts.type,
	        compression: !!o.compression
	      }) : z.generate(oopts);
	      if (typeof Deno !== "undefined") {
	        if (typeof out == "string") {
	          if (o.type == "binary" || o.type == "base64") return out;
	          out = new Uint8Array(s2ab(out));
	        }
	      }
	      if (o.password && typeof encrypt_agile !== "undefined") return write_cfb_ctr(encrypt_agile(out, o.password), o);
	      if (o.type === "file") return write_dl(o.file, out);
	      return o.type == "string" ? utf8read(out) : out;
	    }
	    function write_cfb_type(wb, opts) {
	      var o = opts || ({});
	      var cfb = write_xlscfb(wb, o);
	      return write_cfb_ctr(cfb, o);
	    }
	    function write_string_type(out, opts, bom) {
	      if (!bom) bom = "";
	      var o = bom + out;
	      switch (opts.type) {
	        case "base64":
	          return Base64_encode(utf8write(o));
	        case "binary":
	          return utf8write(o);
	        case "string":
	          return out;
	        case "file":
	          return write_dl(opts.file, o, "utf8");
	        case "buffer":
	          {
	            if (has_buf) return Buffer_from(o, "utf8"); else if (typeof TextEncoder !== "undefined") return new TextEncoder().encode(o); else return write_string_type(o, {
	              type: "binary"
	            }).split("").map(function (c) {
	              return c.charCodeAt(0);
	            });
	          }
	      }
	      throw new Error("Unrecognized type " + opts.type);
	    }
	    function write_stxt_type(out, opts) {
	      switch (opts.type) {
	        case "base64":
	          return Base64_encode_pass(out);
	        case "binary":
	          return out;
	        case "string":
	          return out;
	        case "file":
	          return write_dl(opts.file, out, "binary");
	        case "buffer":
	          {
	            if (has_buf) return Buffer_from(out, "binary"); else return out.split("").map(function (c) {
	              return c.charCodeAt(0);
	            });
	          }
	      }
	      throw new Error("Unrecognized type " + opts.type);
	    }
	    function write_binary_type(out, opts) {
	      switch (opts.type) {
	        case "string":
	        case "base64":
	        case "binary":
	          var bstr = "";
	          for (var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]);
	          return opts.type == "base64" ? Base64_encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
	        case "file":
	          return write_dl(opts.file, out);
	        case "buffer":
	          return out;
	        default:
	          throw new Error("Unrecognized type " + opts.type);
	      }
	    }
	    function writeSyncXLSX(wb, opts) {
	      reset_cp();
	      check_wb(wb);
	      var o = dup(opts || ({}));
	      if (o.cellStyles) {
	        o.cellNF = true;
	        o.sheetStubs = true;
	      }
	      if (o.type == "array") {
	        o.type = "binary";
	        var out = writeSyncXLSX(wb, o);
	        o.type = "array";
	        return s2ab(out);
	      }
	      return write_zip_typeXLSX(wb, o);
	    }
	    function writeSync(wb, opts) {
	      reset_cp();
	      check_wb(wb);
	      var o = dup(opts || ({}));
	      if (o.cellStyles) {
	        o.cellNF = true;
	        o.sheetStubs = true;
	      }
	      if (o.type == "array") {
	        o.type = "binary";
	        var out = writeSync(wb, o);
	        o.type = "array";
	        return s2ab(out);
	      }
	      var idx = 0;
	      if (o.sheet) {
	        if (typeof o.sheet == "number") idx = o.sheet; else idx = wb.SheetNames.indexOf(o.sheet);
	        if (!wb.SheetNames[idx]) throw new Error("Sheet not found: " + o.sheet + " : " + typeof o.sheet);
	      }
	      switch (o.bookType || "xlsb") {
	        case "xml":
	        case "xlml":
	          return write_string_type(write_xlml(wb, o), o);
	        case "slk":
	        case "sylk":
	          return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb), o);
	        case "htm":
	        case "html":
	          return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "txt":
	          return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "csv":
	          return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, "﻿");
	        case "dif":
	          return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "dbf":
	          return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "prn":
	          return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "rtf":
	          return write_string_type(sheet_to_rtf(wb.Sheets[wb.SheetNames[idx]]), o);
	        case "eth":
	          return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "fods":
	          return write_string_type(write_ods(wb, o), o);
	        case "wk1":
	          return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);
	        case "wk3":
	          return write_binary_type(WK_.book_to_wk3(wb, o), o);
	        case "biff2":
	          if (!o.biff) o.biff = 2;
	        case "biff3":
	          if (!o.biff) o.biff = 3;
	        case "biff4":
	          if (!o.biff) o.biff = 4;
	          return write_binary_type(write_biff_buf(wb, o), o);
	        case "biff5":
	          if (!o.biff) o.biff = 5;
	        case "biff8":
	        case "xla":
	        case "xls":
	          if (!o.biff) o.biff = 8;
	          return write_cfb_type(wb, o);
	        case "xlsx":
	        case "xlsm":
	        case "xlam":
	        case "xlsb":
	        case "numbers":
	        case "ods":
	          return write_zip_type(wb, o);
	        default:
	          throw new Error("Unrecognized bookType |" + o.bookType + "|");
	      }
	    }
	    function resolve_book_type(o) {
	      if (o.bookType) return;
	      var _BT = {
	        "xls": "biff8",
	        "htm": "html",
	        "slk": "sylk",
	        "socialcalc": "eth",
	        "Sh33tJS": "WTF"
	      };
	      var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
	      if (ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
	      o.bookType = _BT[o.bookType] || o.bookType;
	    }
	    function writeFileSync(wb, filename, opts) {
	      var o = opts || ({});
	      o.type = "file";
	      o.file = filename;
	      resolve_book_type(o);
	      return writeSync(wb, o);
	    }
	    function writeFileSyncXLSX(wb, filename, opts) {
	      var o = opts || ({});
	      o.type = "file";
	      o.file = filename;
	      resolve_book_type(o);
	      return writeSyncXLSX(wb, o);
	    }
	    function writeFileAsync(filename, wb, opts, cb) {
	      var o = opts || ({});
	      o.type = "file";
	      o.file = filename;
	      resolve_book_type(o);
	      o.type = "buffer";
	      var _cb = cb;
	      if (!(_cb instanceof Function)) _cb = opts;
	      return _fs.writeFile(filename, writeSync(wb, o), _cb);
	    }
	    function make_json_row(sheet, r, R, cols, header, hdr, o) {
	      var rr = encode_row(R);
	      var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
	      var isempty = true, dense = sheet["!data"] != null;
	      var row = header === 1 ? [] : {};
	      if (header !== 1) {
	        if (Object.defineProperty) try {
	          Object.defineProperty(row, "__rowNum__", {
	            value: R,
	            enumerable: false
	          });
	        } catch (e) {
	          row.__rowNum__ = R;
	        } else row.__rowNum__ = R;
	      }
	      if (!dense || sheet["!data"][R]) for (var C = r.s.c; C <= r.e.c; ++C) {
	        var val = dense ? (sheet["!data"][R] || [])[C] : sheet[cols[C] + rr];
	        if (val == null || val.t === undefined) {
	          if (defval === undefined) continue;
	          if (hdr[C] != null) {
	            row[hdr[C]] = defval;
	          }
	          continue;
	        }
	        var v = val.v;
	        switch (val.t) {
	          case "z":
	            if (v == null) break;
	            continue;
	          case "e":
	            v = v == 0 ? null : void 0;
	            break;
	          case "s":
	          case "b":
	          case "n":
	            if (!val.z || !fmt_is_date(val.z)) break;
	            v = numdate(v);
	            if (typeof v == "number") break;
	          case "d":
	            if (!(o && o.UTC)) v = utc_to_local(v);
	            break;
	          default:
	            throw new Error("unrecognized type " + val.t);
	        }
	        if (hdr[C] != null) {
	          if (v == null) {
	            if (val.t == "e" && v === null) row[hdr[C]] = null; else if (defval !== undefined) row[hdr[C]] = defval; else if (raw && v === null) row[hdr[C]] = null; else continue;
	          } else {
	            row[hdr[C]] = raw && (val.t !== "n" || val.t === "n" && o.rawNumbers !== false) ? v : format_cell(val, v, o);
	          }
	          if (v != null) isempty = false;
	        }
	      }
	      return {
	        row: row,
	        isempty: isempty
	      };
	    }
	    function sheet_to_json(sheet, opts) {
	      if (sheet == null || sheet["!ref"] == null) return [];
	      var val = {
	        t: "n",
	        v: 0
	      }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
	      var r = {
	        s: {
	          r: 0,
	          c: 0
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var o = opts || ({});
	      var range = o.range != null ? o.range : sheet["!ref"];
	      if (o.header === 1) header = 1; else if (o.header === "A") header = 2; else if (Array.isArray(o.header)) header = 3; else if (o.header == null) header = 0;
	      switch (typeof range) {
	        case "string":
	          r = safe_decode_range(range);
	          break;
	        case "number":
	          r = safe_decode_range(sheet["!ref"]);
	          r.s.r = range;
	          break;
	        default:
	          r = range;
	      }
	      if (header > 0) offset = 0;
	      var rr = encode_row(r.s.r);
	      var cols = [];
	      var out = [];
	      var outi = 0, counter = 0;
	      var dense = sheet["!data"] != null;
	      var R = r.s.r, C = 0;
	      var header_cnt = {};
	      if (dense && !sheet["!data"][R]) sheet["!data"][R] = [];
	      var colinfo = o.skipHidden && sheet["!cols"] || [];
	      var rowinfo = o.skipHidden && sheet["!rows"] || [];
	      for (C = r.s.c; C <= r.e.c; ++C) {
	        if ((colinfo[C] || ({})).hidden) continue;
	        cols[C] = encode_col(C);
	        val = dense ? sheet["!data"][R][C] : sheet[cols[C] + rr];
	        switch (header) {
	          case 1:
	            hdr[C] = C - r.s.c;
	            break;
	          case 2:
	            hdr[C] = cols[C];
	            break;
	          case 3:
	            hdr[C] = o.header[C - r.s.c];
	            break;
	          default:
	            if (val == null) val = {
	              w: "__EMPTY",
	              t: "s"
	            };
	            vv = v = format_cell(val, null, o);
	            counter = header_cnt[v] || 0;
	            if (!counter) header_cnt[v] = 1; else {
	              do {
	                vv = v + "_" + counter++;
	              } while (header_cnt[vv]);
	              header_cnt[v] = counter;
	              header_cnt[vv] = 1;
	            }
	            hdr[C] = vv;
	        }
	      }
	      for (R = r.s.r + offset; R <= r.e.r; ++R) {
	        if ((rowinfo[R] || ({})).hidden) continue;
	        var row = make_json_row(sheet, r, R, cols, header, hdr, o);
	        if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
	      }
	      out.length = outi;
	      return out;
	    }
	    var qreg = /"/g;
	    function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {
	      var isempty = true;
	      var row = [], txt = "", rr = encode_row(R);
	      var dense = sheet["!data"] != null;
	      var datarow = dense && sheet["!data"][R] || [];
	      for (var C = r.s.c; C <= r.e.c; ++C) {
	        if (!cols[C]) continue;
	        var val = dense ? datarow[C] : sheet[cols[C] + rr];
	        if (val == null) txt = ""; else if (val.v != null) {
	          isempty = false;
	          txt = "" + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
	          for (var i = 0, cc = 0; i !== txt.length; ++i) if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {
	            txt = "\"" + txt.replace(qreg, "\"\"") + "\"";
	            break;
	          }
	          if (txt == "ID") txt = "\"ID\"";
	        } else if (val.f != null && !val.F) {
	          isempty = false;
	          txt = "=" + val.f;
	          if (txt.indexOf(",") >= 0) txt = "\"" + txt.replace(qreg, "\"\"") + "\"";
	        } else txt = "";
	        row.push(txt);
	      }
	      if (o.blankrows === false && isempty) return null;
	      return row.join(FS);
	    }
	    function sheet_to_csv(sheet, opts) {
	      var out = [];
	      var o = opts == null ? {} : opts;
	      if (sheet == null || sheet["!ref"] == null) return "";
	      var r = safe_decode_range(sheet["!ref"]);
	      var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
	      var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
	      var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
	      var row = "", cols = [];
	      var colinfo = o.skipHidden && sheet["!cols"] || [];
	      var rowinfo = o.skipHidden && sheet["!rows"] || [];
	      for (var C = r.s.c; C <= r.e.c; ++C) if (!(colinfo[C] || ({})).hidden) cols[C] = encode_col(C);
	      var w = 0;
	      for (var R = r.s.r; R <= r.e.r; ++R) {
	        if ((rowinfo[R] || ({})).hidden) continue;
	        row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
	        if (row == null) {
	          continue;
	        }
	        if (o.strip) row = row.replace(endregex, "");
	        if (row || o.blankrows !== false) out.push((w++ ? RS : "") + row);
	      }
	      return out.join("");
	    }
	    function sheet_to_txt(sheet, opts) {
	      if (!opts) opts = {};
	      opts.FS = "\t";
	      opts.RS = "\n";
	      var s = sheet_to_csv(sheet, opts);
	      if (typeof $cptable == "undefined" || opts.type == "string") return s;
	      var o = $cptable.utils.encode(1200, s, "str");
	      return String.fromCharCode(255) + String.fromCharCode(254) + o;
	    }
	    function sheet_to_formulae(sheet) {
	      var y = "", x, val = "";
	      if (sheet == null || sheet["!ref"] == null) return [];
	      var r = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C;
	      var cmds = [];
	      var dense = sheet["!data"] != null;
	      for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
	      for (var R = r.s.r; R <= r.e.r; ++R) {
	        rr = encode_row(R);
	        for (C = r.s.c; C <= r.e.c; ++C) {
	          y = cols[C] + rr;
	          x = dense ? (sheet["!data"][R] || [])[C] : sheet[y];
	          val = "";
	          if (x === undefined) continue; else if (x.F != null) {
	            y = x.F;
	            if (!x.f) continue;
	            val = x.f;
	            if (y.indexOf(":") == -1) y = y + ":" + y;
	          }
	          if (x.f != null) val = x.f; else if (x.t == "z") continue; else if (x.t == "n" && x.v != null) val = "" + x.v; else if (x.t == "b") val = x.v ? "TRUE" : "FALSE"; else if (x.w !== undefined) val = "'" + x.w; else if (x.v === undefined) continue; else if (x.t == "s") val = "'" + x.v; else val = "" + x.v;
	          cmds[cmds.length] = y + "=" + val;
	        }
	      }
	      return cmds;
	    }
	    function sheet_add_json(_ws, js, opts) {
	      var o = opts || ({});
	      var dense = _ws ? _ws["!data"] != null : o.dense;
	      var offset = +!o.skipHeader;
	      var ws = _ws || ({});
	      if (!_ws && dense) ws["!data"] = [];
	      var _R = 0, _C = 0;
	      if (ws && o.origin != null) {
	        if (typeof o.origin == "number") _R = o.origin; else {
	          var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
	          _R = _origin.r;
	          _C = _origin.c;
	        }
	      }
	      var range = {
	        s: {
	          c: 0,
	          r: 0
	        },
	        e: {
	          c: _C,
	          r: _R + js.length - 1 + offset
	        }
	      };
	      if (ws["!ref"]) {
	        var _range = safe_decode_range(ws["!ref"]);
	        range.e.c = Math.max(range.e.c, _range.e.c);
	        range.e.r = Math.max(range.e.r, _range.e.r);
	        if (_R == -1) {
	          _R = _range.e.r + 1;
	          range.e.r = _R + js.length - 1 + offset;
	        }
	      } else {
	        if (_R == -1) {
	          _R = 0;
	          range.e.r = js.length - 1 + offset;
	        }
	      }
	      var hdr = o.header || [], C = 0;
	      var ROW = [];
	      js.forEach(function (JS, R) {
	        if (dense && !ws["!data"][_R + R + offset]) ws["!data"][_R + R + offset] = [];
	        if (dense) ROW = ws["!data"][_R + R + offset];
	        keys(JS).forEach(function (k) {
	          if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;
	          var v = JS[k];
	          var t = "z";
	          var z = "";
	          var ref = dense ? "" : encode_col(_C + C) + encode_row(_R + R + offset);
	          var cell = dense ? ROW[_C + C] : ws[ref];
	          if (v && typeof v === "object" && !(v instanceof Date)) {
	            if (dense) ROW[_C + C] = v; else ws[ref] = v;
	          } else {
	            if (typeof v == "number") t = "n"; else if (typeof v == "boolean") t = "b"; else if (typeof v == "string") t = "s"; else if (v instanceof Date) {
	              t = "d";
	              if (!o.UTC) v = local_to_utc(v);
	              if (!o.cellDates) {
	                t = "n";
	                v = datenum(v);
	              }
	              z = cell != null && cell.z && fmt_is_date(cell.z) ? cell.z : o.dateNF || table_fmt[14];
	            } else if (v === null && o.nullError) {
	              t = "e";
	              v = 0;
	            }
	            if (!cell) {
	              if (!dense) ws[ref] = cell = {
	                t: t,
	                v: v
	              }; else ROW[_C + C] = cell = {
	                t: t,
	                v: v
	              };
	            } else {
	              cell.t = t;
	              cell.v = v;
	              delete cell.w;
	              delete cell.R;
	              if (z) cell.z = z;
	            }
	            if (z) cell.z = z;
	          }
	        });
	      });
	      range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
	      var __R = encode_row(_R);
	      if (dense && !ws["!data"][_R]) ws["!data"][_R] = [];
	      if (offset) for (C = 0; C < hdr.length; ++C) {
	        if (dense) ws["!data"][_R][C + _C] = {
	          t: "s",
	          v: hdr[C]
	        }; else ws[encode_col(C + _C) + __R] = {
	          t: "s",
	          v: hdr[C]
	        };
	      }
	      ws["!ref"] = encode_range(range);
	      return ws;
	    }
	    function json_to_sheet(js, opts) {
	      return sheet_add_json(null, js, opts);
	    }
	    function ws_get_cell_stub(ws, R, C) {
	      if (typeof R == "string") {
	        if (ws["!data"] != null) {
	          var RC = decode_cell(R);
	          if (!ws["!data"][RC.r]) ws["!data"][RC.r] = [];
	          return ws["!data"][RC.r][RC.c] || (ws["!data"][RC.r][RC.c] = {
	            t: "z"
	          });
	        }
	        return ws[R] || (ws[R] = {
	          t: "z"
	        });
	      }
	      if (typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
	      return ws_get_cell_stub(ws, encode_col(C || 0) + encode_row(R));
	    }
	    function wb_sheet_idx(wb, sh) {
	      if (typeof sh == "number") {
	        if (sh >= 0 && wb.SheetNames.length > sh) return sh;
	        throw new Error("Cannot find sheet # " + sh);
	      } else if (typeof sh == "string") {
	        var idx = wb.SheetNames.indexOf(sh);
	        if (idx > -1) return idx;
	        throw new Error("Cannot find sheet name |" + sh + "|");
	      } else throw new Error("Cannot find sheet |" + sh + "|");
	    }
	    function book_new() {
	      return {
	        SheetNames: [],
	        Sheets: {}
	      };
	    }
	    function book_append_sheet(wb, ws, name, roll) {
	      var i = 1;
	      if (!name) for (; i <= 65535; (++i, name = undefined)) if (wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
	      if (!name || wb.SheetNames.length >= 65535) throw new Error("Too many worksheets");
	      if (roll && wb.SheetNames.indexOf(name) >= 0) {
	        var m = name.match(/(^.*?)(\d+)$/);
	        i = m && +m[2] || 0;
	        var root = m && m[1] || name;
	        for (++i; i <= 65535; ++i) if (wb.SheetNames.indexOf(name = root + i) == -1) break;
	      }
	      check_ws_name(name);
	      if (wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");
	      wb.SheetNames.push(name);
	      wb.Sheets[name] = ws;
	      return name;
	    }
	    function book_set_sheet_visibility(wb, sh, vis) {
	      if (!wb.Workbook) wb.Workbook = {};
	      if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];
	      var idx = wb_sheet_idx(wb, sh);
	      if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};
	      switch (vis) {
	        case 0:
	        case 1:
	        case 2:
	          break;
	        default:
	          throw new Error("Bad sheet visibility setting " + vis);
	      }
	      wb.Workbook.Sheets[idx].Hidden = vis;
	    }
	    function cell_set_number_format(cell, fmt) {
	      cell.z = fmt;
	      return cell;
	    }
	    function cell_set_hyperlink(cell, target, tooltip) {
	      if (!target) {
	        delete cell.l;
	      } else {
	        cell.l = {
	          Target: target
	        };
	        if (tooltip) cell.l.Tooltip = tooltip;
	      }
	      return cell;
	    }
	    function cell_set_internal_link(cell, range, tooltip) {
	      return cell_set_hyperlink(cell, "#" + range, tooltip);
	    }
	    function cell_add_comment(cell, text, author) {
	      if (!cell.c) cell.c = [];
	      cell.c.push({
	        t: text,
	        a: author || "SheetJS"
	      });
	    }
	    function sheet_set_array_formula(ws, range, formula, dynamic) {
	      var rng = typeof range != "string" ? range : safe_decode_range(range);
	      var rngstr = typeof range == "string" ? range : encode_range(range);
	      for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
	        var cell = ws_get_cell_stub(ws, R, C);
	        cell.t = "n";
	        cell.F = rngstr;
	        delete cell.v;
	        if (R == rng.s.r && C == rng.s.c) {
	          cell.f = formula;
	          if (dynamic) cell.D = true;
	        }
	      }
	      var wsr = decode_range(ws["!ref"]);
	      if (wsr.s.r > rng.s.r) wsr.s.r = rng.s.r;
	      if (wsr.s.c > rng.s.c) wsr.s.c = rng.s.c;
	      if (wsr.e.r < rng.e.r) wsr.e.r = rng.e.r;
	      if (wsr.e.c < rng.e.c) wsr.e.c = rng.e.c;
	      ws["!ref"] = encode_range(wsr);
	      return ws;
	    }
	    var utils = {
	      encode_col: encode_col,
	      encode_row: encode_row,
	      encode_cell: encode_cell,
	      encode_range: encode_range,
	      decode_col: decode_col,
	      decode_row: decode_row,
	      split_cell: split_cell,
	      decode_cell: decode_cell,
	      decode_range: decode_range,
	      format_cell: format_cell,
	      sheet_add_aoa: sheet_add_aoa,
	      sheet_add_json: sheet_add_json,
	      sheet_add_dom: sheet_add_dom,
	      aoa_to_sheet: aoa_to_sheet,
	      json_to_sheet: json_to_sheet,
	      table_to_sheet: parse_dom_table,
	      table_to_book: table_to_book,
	      sheet_to_csv: sheet_to_csv,
	      sheet_to_txt: sheet_to_txt,
	      sheet_to_json: sheet_to_json,
	      sheet_to_html: sheet_to_html,
	      sheet_to_formulae: sheet_to_formulae,
	      sheet_to_row_object_array: sheet_to_json,
	      sheet_get_cell: ws_get_cell_stub,
	      book_new: book_new,
	      book_append_sheet: book_append_sheet,
	      book_set_sheet_visibility: book_set_sheet_visibility,
	      cell_set_number_format: cell_set_number_format,
	      cell_set_hyperlink: cell_set_hyperlink,
	      cell_set_internal_link: cell_set_internal_link,
	      cell_add_comment: cell_add_comment,
	      sheet_set_array_formula: sheet_set_array_formula,
	      consts: {
	        SHEET_VISIBLE: 0,
	        SHEET_HIDDEN: 1,
	        SHEET_VERY_HIDDEN: 2
	      }
	    };
	    var _Readable;
	    function set_readable(R) {
	      _Readable = R;
	    }
	    function write_csv_stream(sheet, opts) {
	      var stream = _Readable();
	      var o = opts == null ? {} : opts;
	      if (sheet == null || sheet["!ref"] == null) {
	        stream.push(null);
	        return stream;
	      }
	      var r = safe_decode_range(sheet["!ref"]);
	      var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
	      var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
	      var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
	      var row = "", cols = [];
	      var colinfo = o.skipHidden && sheet["!cols"] || [];
	      var rowinfo = o.skipHidden && sheet["!rows"] || [];
	      for (var C = r.s.c; C <= r.e.c; ++C) if (!(colinfo[C] || ({})).hidden) cols[C] = encode_col(C);
	      var R = r.s.r;
	      var BOM = false, w = 0;
	      stream._read = function () {
	        if (!BOM) {
	          BOM = true;
	          return stream.push("﻿");
	        }
	        while (R <= r.e.r) {
	          ++R;
	          if ((rowinfo[R - 1] || ({})).hidden) continue;
	          row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);
	          if (row != null) {
	            if (o.strip) row = row.replace(endregex, "");
	            if (row || o.blankrows !== false) return stream.push((w++ ? RS : "") + row);
	          }
	        }
	        return stream.push(null);
	      };
	      return stream;
	    }
	    function write_html_stream(ws, opts) {
	      var stream = _Readable();
	      var o = opts || ({});
	      var header = o.header != null ? o.header : HTML_BEGIN;
	      var footer = o.footer != null ? o.footer : HTML_END;
	      stream.push(header);
	      var r = decode_range(ws["!ref"]);
	      stream.push(make_html_preamble(ws, r, o));
	      var R = r.s.r;
	      var end = false;
	      stream._read = function () {
	        if (R > r.e.r) {
	          if (!end) {
	            end = true;
	            stream.push("</table>" + footer);
	          }
	          return stream.push(null);
	        }
	        while (R <= r.e.r) {
	          stream.push(make_html_row(ws, r, R, o));
	          ++R;
	          break;
	        }
	      };
	      return stream;
	    }
	    function write_json_stream(sheet, opts) {
	      var stream = _Readable({
	        objectMode: true
	      });
	      if (sheet == null || sheet["!ref"] == null) {
	        stream.push(null);
	        return stream;
	      }
	      var val = {
	        t: "n",
	        v: 0
	      }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
	      var r = {
	        s: {
	          r: 0,
	          c: 0
	        },
	        e: {
	          r: 0,
	          c: 0
	        }
	      };
	      var o = opts || ({});
	      var range = o.range != null ? o.range : sheet["!ref"];
	      if (o.header === 1) header = 1; else if (o.header === "A") header = 2; else if (Array.isArray(o.header)) header = 3;
	      switch (typeof range) {
	        case "string":
	          r = safe_decode_range(range);
	          break;
	        case "number":
	          r = safe_decode_range(sheet["!ref"]);
	          r.s.r = range;
	          break;
	        default:
	          r = range;
	      }
	      if (header > 0) offset = 0;
	      var rr = encode_row(r.s.r);
	      var cols = [];
	      var counter = 0;
	      var dense = sheet["!data"] != null;
	      var R = r.s.r, C = 0;
	      var header_cnt = {};
	      if (dense && !sheet["!data"][R]) sheet["!data"][R] = [];
	      var colinfo = o.skipHidden && sheet["!cols"] || [];
	      var rowinfo = o.skipHidden && sheet["!rows"] || [];
	      for (C = r.s.c; C <= r.e.c; ++C) {
	        if ((colinfo[C] || ({})).hidden) continue;
	        cols[C] = encode_col(C);
	        val = dense ? sheet["!data"][R][C] : sheet[cols[C] + rr];
	        switch (header) {
	          case 1:
	            hdr[C] = C - r.s.c;
	            break;
	          case 2:
	            hdr[C] = cols[C];
	            break;
	          case 3:
	            hdr[C] = o.header[C - r.s.c];
	            break;
	          default:
	            if (val == null) val = {
	              w: "__EMPTY",
	              t: "s"
	            };
	            vv = v = format_cell(val, null, o);
	            counter = header_cnt[v] || 0;
	            if (!counter) header_cnt[v] = 1; else {
	              do {
	                vv = v + "_" + counter++;
	              } while (header_cnt[vv]);
	              header_cnt[v] = counter;
	              header_cnt[vv] = 1;
	            }
	            hdr[C] = vv;
	        }
	      }
	      R = r.s.r + offset;
	      stream._read = function () {
	        while (R <= r.e.r) {
	          if ((rowinfo[R - 1] || ({})).hidden) continue;
	          var row = make_json_row(sheet, r, R, cols, header, hdr, o);
	          ++R;
	          if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
	            stream.push(row.row);
	            return;
	          }
	        }
	        return stream.push(null);
	      };
	      return stream;
	    }
	    var __stream = {
	      to_json: write_json_stream,
	      to_html: write_html_stream,
	      to_csv: write_csv_stream,
	      set_readable: set_readable
	    };
	    if (typeof parse_xlscfb !== "undefined") XLSX.parse_xlscfb = parse_xlscfb;
	    XLSX.parse_zip = parse_zip;
	    XLSX.read = readSync;
	    XLSX.readFile = readFileSync;
	    XLSX.readFileSync = readFileSync;
	    XLSX.write = writeSync;
	    XLSX.writeFile = writeFileSync;
	    XLSX.writeFileSync = writeFileSync;
	    XLSX.writeFileAsync = writeFileAsync;
	    XLSX.utils = utils;
	    XLSX.writeXLSX = writeSyncXLSX;
	    XLSX.writeFileXLSX = writeFileSyncXLSX;
	    XLSX.set_fs = set_fs;
	    XLSX.set_cptable = set_cptable;
	    XLSX.SSF = SSF;
	    if (typeof __stream !== "undefined") XLSX.stream = __stream;
	    if (typeof CFB !== "undefined") XLSX.CFB = CFB;
	    if (typeof commonjsRequire !== "undefined") {
	      var strmod = require$$1;
	      if ((strmod || ({})).Readable) set_readable(strmod.Readable);
	      try {
	        _fs = require$$2;
	      } catch (e) {}
	    }
	  }
	  make_xlsx_lib(exports);
	  if (typeof window !== "undefined" && !window.XLSX) try {
	    window.XLSX = XLSX;
	  } catch (e) {}
	})(xlsx, xlsx.exports);
	var xlsxExports = xlsx.exports;

	Object.defineProperty(xlsxExports, "__" + "esModule", { value: true });

	return xlsxExports;

}));
